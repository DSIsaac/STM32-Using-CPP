
STM32 Using CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
  1 .text         00002030  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080021b8  080021b8  000121b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021c8  080021c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080021c8  080021c8  000121c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080021d0  080021d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080021d0  080021d0  000121d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021d8  080021d8  000121d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080021dc  00020000  2**2
=======
  1 .text         0000188c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001a14  08001a14  00011a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a24  08001a24  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08001a24  08001a24  00011a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001a2c  08001a2c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08001a2c  08001a2c  00011a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08001a34  08001a34  00011a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001a3c  00020000  2**2
>>>>>>> Stashed changes
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000124  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000194  20000194  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
<<<<<<< Updated upstream
 13 .debug_info   0000cb5a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000200d  00000000  00000000  0002cbfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa8  00000000  00000000  0002ec08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009b0  00000000  00000000  0002f6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000235ae  00000000  00000000  00030060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c674  00000000  00000000  0005360e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca6a5  00000000  00000000  0005fc82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012a327  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e60  00000000  00000000  0012a37c  2**2
=======
 13 .debug_info   0000a73f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001954  00000000  00000000  0002a7df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a8  00000000  00000000  0002c138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008e0  00000000  00000000  0002cae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021bd4  00000000  00000000  0002d3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000af62  00000000  00000000  0004ef94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4d3c  00000000  00000000  00059ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011ec32  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002928  00000000  00000000  0011ec88  2**2
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 80001a8:	080021a0 	.word	0x080021a0
=======
 80001a8:	080019fc 	.word	0x080019fc
>>>>>>> Stashed changes

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
<<<<<<< Updated upstream
 80001c4:	080021a0 	.word	0x080021a0
=======
 80001c4:	080019fc 	.word	0x080019fc
>>>>>>> Stashed changes

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <_ZN14Task_Scheduler4TaskEv>:

extern Timer_PWM *Timer1;
extern Timer_PWM *Timer8;

void Task_Scheduler::Task()
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	if(this->fre_1000hz == 1){
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	7b1b      	ldrb	r3, [r3, #12]
 80004cc:	2b01      	cmp	r3, #1
 80004ce:	d105      	bne.n	80004dc <_ZN14Task_Scheduler4TaskEv+0x1c>
		this->Task_1000hz();
 80004d0:	6878      	ldr	r0, [r7, #4]
 80004d2:	f000 f839 	bl	8000548 <_ZN14Task_Scheduler11Task_1000hzEv>
		this->fre_1000hz = 0;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2200      	movs	r2, #0
 80004da:	731a      	strb	r2, [r3, #12]
	}
	if(this->fre_500hz == 1){
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	7b5b      	ldrb	r3, [r3, #13]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d105      	bne.n	80004f0 <_ZN14Task_Scheduler4TaskEv+0x30>
		this->Task_500hz();
 80004e4:	6878      	ldr	r0, [r7, #4]
 80004e6:	f000 f841 	bl	800056c <_ZN14Task_Scheduler10Task_500hzEv>
		this->fre_500hz = 0;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2200      	movs	r2, #0
 80004ee:	735a      	strb	r2, [r3, #13]
	}
	if(this->fre_200hz == 1){
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	7b9b      	ldrb	r3, [r3, #14]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d105      	bne.n	8000504 <_ZN14Task_Scheduler4TaskEv+0x44>
		this->Task_200hz();
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f000 f849 	bl	8000590 <_ZN14Task_Scheduler10Task_200hzEv>
		this->fre_200hz = 0;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2200      	movs	r2, #0
 8000502:	739a      	strb	r2, [r3, #14]
	}
	if(this->fre_100hz == 1){
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	7bdb      	ldrb	r3, [r3, #15]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d105      	bne.n	8000518 <_ZN14Task_Scheduler4TaskEv+0x58>
		this->Task_100hz();
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f000 f851 	bl	80005b4 <_ZN14Task_Scheduler10Task_100hzEv>
		this->fre_100hz = 0;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2200      	movs	r2, #0
 8000516:	73da      	strb	r2, [r3, #15]
	}
	if(this->fre_10hz == 1){
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	7c1b      	ldrb	r3, [r3, #16]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d105      	bne.n	800052c <_ZN14Task_Scheduler4TaskEv+0x6c>
		this->Task_10hz();
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f000 f859 	bl	80005d8 <_ZN14Task_Scheduler9Task_10hzEv>
		this->fre_10hz = 0;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2200      	movs	r2, #0
 800052a:	741a      	strb	r2, [r3, #16]
	}
	if(this->fre_1hz == 1){
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	7c5b      	ldrb	r3, [r3, #17]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d105      	bne.n	8000540 <_ZN14Task_Scheduler4TaskEv+0x80>
		this->Task_1hz();
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f000 f861 	bl	80005fc <_ZN14Task_Scheduler8Task_1hzEv>
		this->fre_1hz = 0;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2200      	movs	r2, #0
 800053e:	745a      	strb	r2, [r3, #17]
	}
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <_ZN14Task_Scheduler11Task_1000hzEv>:
void Task_Scheduler::Task_1000hz()
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	Timer1->PWM_Out(1, 500);
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <_ZN14Task_Scheduler11Task_1000hzEv+0x20>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000558:	2101      	movs	r1, #1
 800055a:	4618      	mov	r0, r3
 800055c:	f001 fccc 	bl	8001ef8 <_ZN9Timer_PWM7PWM_OutEhj>
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	2000008c 	.word	0x2000008c

0800056c <_ZN14Task_Scheduler10Task_500hzEv>:
void Task_Scheduler::Task_500hz()
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	Timer1->PWM_Out(2, 500);
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <_ZN14Task_Scheduler10Task_500hzEv+0x20>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800057c:	2102      	movs	r1, #2
 800057e:	4618      	mov	r0, r3
 8000580:	f001 fcba 	bl	8001ef8 <_ZN9Timer_PWM7PWM_OutEhj>
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	2000008c 	.word	0x2000008c

08000590 <_ZN14Task_Scheduler10Task_200hzEv>:
void Task_Scheduler::Task_200hz()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	Timer1->PWM_Out(3, 500);
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <_ZN14Task_Scheduler10Task_200hzEv+0x20>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005a0:	2103      	movs	r1, #3
 80005a2:	4618      	mov	r0, r3
 80005a4:	f001 fca8 	bl	8001ef8 <_ZN9Timer_PWM7PWM_OutEhj>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	2000008c 	.word	0x2000008c

080005b4 <_ZN14Task_Scheduler10Task_100hzEv>:
void Task_Scheduler::Task_100hz()
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	Timer1->PWM_Out(4, 500);
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <_ZN14Task_Scheduler10Task_100hzEv+0x20>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005c4:	2104      	movs	r1, #4
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 fc96 	bl	8001ef8 <_ZN9Timer_PWM7PWM_OutEhj>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	2000008c 	.word	0x2000008c

080005d8 <_ZN14Task_Scheduler9Task_10hzEv>:
void Task_Scheduler::Task_10hz()
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	Timer8->PWM_Out(1, 500);
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <_ZN14Task_Scheduler9Task_10hzEv+0x20>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005e8:	2101      	movs	r1, #1
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 fc84 	bl	8001ef8 <_ZN9Timer_PWM7PWM_OutEhj>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000090 	.word	0x20000090

080005fc <_ZN14Task_Scheduler8Task_1hzEv>:
void Task_Scheduler::Task_1hz()
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	Timer8->PWM_Out(2, 500);
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <_ZN14Task_Scheduler8Task_1hzEv+0x20>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800060c:	2102      	movs	r1, #2
 800060e:	4618      	mov	r0, r3
 8000610:	f001 fc72 	bl	8001ef8 <_ZN9Timer_PWM7PWM_OutEhj>
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000090 	.word	0x20000090

08000620 <_ZN14Task_SchedulerC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj>:

Task_Scheduler::Task_Scheduler(TIM_HandleTypeDef *tim, TIM_TypeDef *Tim_Num, u16 arr, u16 pcs)
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
 800062c:	603b      	str	r3, [r7, #0]
{
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800062e:	f107 0310 	add.w	r3, r7, #16
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]

	this->tim->Init.Prescaler = this->pcs;
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	68fa      	ldr	r2, [r7, #12]
 800063e:	6852      	ldr	r2, [r2, #4]
 8000640:	605a      	str	r2, [r3, #4]
	this->tim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
	this->tim->Init.Period = this->arr;
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	6812      	ldr	r2, [r2, #0]
 8000652:	60da      	str	r2, [r3, #12]
	this->tim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	2280      	movs	r2, #128	; 0x80
 800065a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(this->tim) != HAL_OK){
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	4618      	mov	r0, r3
 8000662:	f001 f8cf 	bl	8001804 <HAL_TIM_Base_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	bf14      	ite	ne
 800066c:	2301      	movne	r3, #1
 800066e:	2300      	moveq	r3, #0
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <_ZN14Task_SchedulerC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj+0x5a>
		Error_Handler();
 8000676:	f000 f979 	bl	800096c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK){
 8000682:	f107 0310 	add.w	r3, r7, #16
 8000686:	4619      	mov	r1, r3
 8000688:	480b      	ldr	r0, [pc, #44]	; (80006b8 <_ZN14Task_SchedulerC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj+0x98>)
 800068a:	f001 fb4b 	bl	8001d24 <HAL_TIMEx_MasterConfigSynchronization>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	bf14      	ite	ne
 8000694:	2301      	movne	r3, #1
 8000696:	2300      	moveq	r3, #0
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <_ZN14Task_SchedulerC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj+0x82>
		Error_Handler();
 800069e:	f000 f965 	bl	800096c <Error_Handler>
	}
	HAL_TIM_Base_Start_IT(this->tim);
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 f8fc 	bl	80018a4 <HAL_TIM_Base_Start_IT>
}
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	4618      	mov	r0, r3
 80006b0:	3718      	adds	r7, #24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	200000f0 	.word	0x200000f0

080006bc <_ZN14Task_Scheduler15Timer_InterruptEv>:

void Task_Scheduler::Timer_Interrupt()
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	this->count_1ms++;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	7c9b      	ldrb	r3, [r3, #18]
 80006c8:	3301      	adds	r3, #1
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	749a      	strb	r2, [r3, #18]
	this->count_2ms++;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	7cdb      	ldrb	r3, [r3, #19]
 80006d4:	3301      	adds	r3, #1
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	74da      	strb	r2, [r3, #19]
	this->count_5ms++;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	7d1b      	ldrb	r3, [r3, #20]
 80006e0:	3301      	adds	r3, #1
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	751a      	strb	r2, [r3, #20]
	this->count_10ms++;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	7d5b      	ldrb	r3, [r3, #21]
 80006ec:	3301      	adds	r3, #1
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	755a      	strb	r2, [r3, #21]
	this->count_100ms++;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	7d9b      	ldrb	r3, [r3, #22]
 80006f8:	3301      	adds	r3, #1
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	759a      	strb	r2, [r3, #22]
	this->count_1s++;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	1c5a      	adds	r2, r3, #1
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	619a      	str	r2, [r3, #24]
	if(this->count_1ms >= 1){
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	7c9b      	ldrb	r3, [r3, #18]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d005      	beq.n	800071e <_ZN14Task_Scheduler15Timer_InterruptEv+0x62>
		this->fre_1000hz = 1;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2201      	movs	r2, #1
 8000716:	731a      	strb	r2, [r3, #12]
		this->count_1ms = 0;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2200      	movs	r2, #0
 800071c:	749a      	strb	r2, [r3, #18]
	}
	if(this->count_2ms >= 2){
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	7cdb      	ldrb	r3, [r3, #19]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d905      	bls.n	8000732 <_ZN14Task_Scheduler15Timer_InterruptEv+0x76>
		this->fre_500hz = 1;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2201      	movs	r2, #1
 800072a:	735a      	strb	r2, [r3, #13]
		this->count_2ms = 0;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2200      	movs	r2, #0
 8000730:	74da      	strb	r2, [r3, #19]
	}
	if(this->count_5ms >= 5){
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	7d1b      	ldrb	r3, [r3, #20]
 8000736:	2b04      	cmp	r3, #4
 8000738:	d905      	bls.n	8000746 <_ZN14Task_Scheduler15Timer_InterruptEv+0x8a>
		this->fre_200hz = 1;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2201      	movs	r2, #1
 800073e:	739a      	strb	r2, [r3, #14]
		this->count_5ms = 0;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2200      	movs	r2, #0
 8000744:	751a      	strb	r2, [r3, #20]
	}
	if(this->count_10ms >= 10){
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	7d5b      	ldrb	r3, [r3, #21]
 800074a:	2b09      	cmp	r3, #9
 800074c:	d905      	bls.n	800075a <_ZN14Task_Scheduler15Timer_InterruptEv+0x9e>
		this->fre_100hz = 1;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2201      	movs	r2, #1
 8000752:	73da      	strb	r2, [r3, #15]
		this->count_10ms = 0;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2200      	movs	r2, #0
 8000758:	755a      	strb	r2, [r3, #21]
	}
	if(this->count_100ms >= 100){
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	7d9b      	ldrb	r3, [r3, #22]
 800075e:	2b63      	cmp	r3, #99	; 0x63
 8000760:	d905      	bls.n	800076e <_ZN14Task_Scheduler15Timer_InterruptEv+0xb2>
		this->fre_10hz = 1;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2201      	movs	r2, #1
 8000766:	741a      	strb	r2, [r3, #16]
		this->count_100ms = 0;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2200      	movs	r2, #0
 800076c:	759a      	strb	r2, [r3, #22]
	}
	if(this->count_1s >= 1000){
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000776:	d305      	bcc.n	8000784 <_ZN14Task_Scheduler15Timer_InterruptEv+0xc8>
		this->fre_1hz = 1;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	745a      	strb	r2, [r3, #17]
		this->count_1s = 0;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
	}
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b087      	sub	sp, #28
 8000794:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	4b25      	ldr	r3, [pc, #148]	; (8000830 <MX_GPIO_Init+0xa0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a24      	ldr	r2, [pc, #144]	; (8000830 <MX_GPIO_Init+0xa0>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b22      	ldr	r3, [pc, #136]	; (8000830 <MX_GPIO_Init+0xa0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <MX_GPIO_Init+0xa0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a1d      	ldr	r2, [pc, #116]	; (8000830 <MX_GPIO_Init+0xa0>)
 80007bc:	f043 0310 	orr.w	r3, r3, #16
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <MX_GPIO_Init+0xa0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0310 	and.w	r3, r3, #16
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_GPIO_Init+0xa0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a16      	ldr	r2, [pc, #88]	; (8000830 <MX_GPIO_Init+0xa0>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_GPIO_Init+0xa0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_GPIO_Init+0xa0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a0f      	ldr	r2, [pc, #60]	; (8000830 <MX_GPIO_Init+0xa0>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <MX_GPIO_Init+0xa0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_GPIO_Init+0xa0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <MX_GPIO_Init+0xa0>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_GPIO_Init+0xa0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

}
 8000822:	bf00      	nop
 8000824:	371c      	adds	r7, #28
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800

08000834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< Updated upstream
 8000838:	f000 fa4c 	bl	8000cd4 <HAL_Init>
=======
 800056a:	f000 f9ff 	bl	800096c <HAL_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083c:	f000 f80a 	bl	8000854 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< Updated upstream
 8000840:	f7ff ffa6 	bl	8000790 <MX_GPIO_Init>
=======
 8000572:	f7ff ffa5 	bl	80004c0 <MX_GPIO_Init>
//  MX_TIM1_Init();
//  MX_TIM6_Init();
//  MX_TIM8_Init();

  /* USER CODE BEGIN 2 */
	Timer Timer1(&htim1, TIM1, Timer_Mode_PWM, 1000, 168);
 8000576:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800057a:	23a8      	movs	r3, #168	; 0xa8
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2301      	movs	r3, #1
 8000586:	4a3a      	ldr	r2, [pc, #232]	; (8000670 <main+0x10c>)
 8000588:	493a      	ldr	r1, [pc, #232]	; (8000674 <main+0x110>)
 800058a:	f001 f8cb 	bl	8001724 <_ZN5TimerC1EP17TIM_HandleTypeDefP11TIM_TypeDefhjj>
	Timer Timer8(&htim8, TIM8, Timer_Mode_PWM, 1000, 168);
 800058e:	4638      	mov	r0, r7
 8000590:	23a8      	movs	r3, #168	; 0xa8
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2301      	movs	r3, #1
 800059c:	4a36      	ldr	r2, [pc, #216]	; (8000678 <main+0x114>)
 800059e:	4937      	ldr	r1, [pc, #220]	; (800067c <main+0x118>)
 80005a0:	f001 f8c0 	bl	8001724 <_ZN5TimerC1EP17TIM_HandleTypeDefP11TIM_TypeDefhjj>
>>>>>>> Stashed changes
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
<<<<<<< Updated upstream
	  Timer6->Task();
 8000844:	4b02      	ldr	r3, [pc, #8]	; (8000850 <main+0x1c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fe39 	bl	80004c0 <_ZN14Task_Scheduler4TaskEv>
 800084e:	e7f9      	b.n	8000844 <main+0x10>
 8000850:	20000094 	.word	0x20000094

08000854 <_Z18SystemClock_Configv>:
=======
	  if(Timer6.fre_1000hz == 1){
 80005a4:	4b36      	ldr	r3, [pc, #216]	; (8000680 <main+0x11c>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d10a      	bne.n	80005c2 <main+0x5e>
		  Timer1.PWM_Out(1, 500);
 80005ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005b4:	2101      	movs	r1, #1
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 f8d0 	bl	800175c <_ZN5Timer7PWM_OutEhj>
		  Timer6.fre_1000hz = 0;
 80005bc:	4b30      	ldr	r3, [pc, #192]	; (8000680 <main+0x11c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
	  }
	  if(Timer6.fre_500hz == 1){
 80005c2:	4b2f      	ldr	r3, [pc, #188]	; (8000680 <main+0x11c>)
 80005c4:	785b      	ldrb	r3, [r3, #1]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d109      	bne.n	80005de <main+0x7a>
		  Timer8.PWM_Out(1, 300);
 80005ca:	463b      	mov	r3, r7
 80005cc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80005d0:	2101      	movs	r1, #1
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 f8c2 	bl	800175c <_ZN5Timer7PWM_OutEhj>
		  Timer6.fre_500hz = 0;
 80005d8:	4b29      	ldr	r3, [pc, #164]	; (8000680 <main+0x11c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	705a      	strb	r2, [r3, #1]
	  }
	  if(Timer6.fre_200hz == 1){
 80005de:	4b28      	ldr	r3, [pc, #160]	; (8000680 <main+0x11c>)
 80005e0:	789b      	ldrb	r3, [r3, #2]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d109      	bne.n	80005fa <main+0x96>
		  Timer8.PWM_Out(2, 300);
 80005e6:	463b      	mov	r3, r7
 80005e8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80005ec:	2102      	movs	r1, #2
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 f8b4 	bl	800175c <_ZN5Timer7PWM_OutEhj>
		  Timer6.fre_200hz = 0;
 80005f4:	4b22      	ldr	r3, [pc, #136]	; (8000680 <main+0x11c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	709a      	strb	r2, [r3, #2]
	  }
	  if(Timer6.fre_200hz == 1){
 80005fa:	4b21      	ldr	r3, [pc, #132]	; (8000680 <main+0x11c>)
 80005fc:	789b      	ldrb	r3, [r3, #2]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d109      	bne.n	8000616 <main+0xb2>
		  Timer8.PWM_Out(3, 300);
 8000602:	463b      	mov	r3, r7
 8000604:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000608:	2103      	movs	r1, #3
 800060a:	4618      	mov	r0, r3
 800060c:	f001 f8a6 	bl	800175c <_ZN5Timer7PWM_OutEhj>
		  Timer6.fre_200hz = 0;
 8000610:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <main+0x11c>)
 8000612:	2200      	movs	r2, #0
 8000614:	709a      	strb	r2, [r3, #2]
	  }
	  if(Timer6.fre_100hz == 1){
 8000616:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <main+0x11c>)
 8000618:	78db      	ldrb	r3, [r3, #3]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d109      	bne.n	8000632 <main+0xce>
		  Timer8.PWM_Out(4, 300);
 800061e:	463b      	mov	r3, r7
 8000620:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000624:	2104      	movs	r1, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f001 f898 	bl	800175c <_ZN5Timer7PWM_OutEhj>
		  Timer6.fre_100hz = 0;
 800062c:	4b14      	ldr	r3, [pc, #80]	; (8000680 <main+0x11c>)
 800062e:	2200      	movs	r2, #0
 8000630:	70da      	strb	r2, [r3, #3]
	  }
	  if(Timer6.fre_10hz == 1){
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <main+0x11c>)
 8000634:	791b      	ldrb	r3, [r3, #4]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d10a      	bne.n	8000650 <main+0xec>
		  Timer1.PWM_Out(2, 300);
 800063a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800063e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000642:	2102      	movs	r1, #2
 8000644:	4618      	mov	r0, r3
 8000646:	f001 f889 	bl	800175c <_ZN5Timer7PWM_OutEhj>
		  Timer6.fre_10hz = 0;
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <main+0x11c>)
 800064c:	2200      	movs	r2, #0
 800064e:	711a      	strb	r2, [r3, #4]
	  }
	  if(Timer6.fre_1hz == 1){
 8000650:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <main+0x11c>)
 8000652:	795b      	ldrb	r3, [r3, #5]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d1a5      	bne.n	80005a4 <main+0x40>
		  Timer1.PWM_Out(3, 300);
 8000658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000660:	2103      	movs	r1, #3
 8000662:	4618      	mov	r0, r3
 8000664:	f001 f87a 	bl	800175c <_ZN5Timer7PWM_OutEhj>
		  Timer6.fre_1hz = 0;
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <main+0x11c>)
 800066a:	2200      	movs	r2, #0
 800066c:	715a      	strb	r2, [r3, #5]
	  if(Timer6.fre_1000hz == 1){
 800066e:	e799      	b.n	80005a4 <main+0x40>
 8000670:	40010000 	.word	0x40010000
 8000674:	20000144 	.word	0x20000144
 8000678:	40010400 	.word	0x40010400
 800067c:	200000b4 	.word	0x200000b4
 8000680:	2000008c 	.word	0x2000008c

08000684 <_Z18SystemClock_Configv>:
>>>>>>> Stashed changes
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b094      	sub	sp, #80	; 0x50
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
<<<<<<< Updated upstream
 800085a:	f107 0320 	add.w	r3, r7, #32
 800085e:	2230      	movs	r2, #48	; 0x30
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f001 fbd8 	bl	8002018 <memset>
=======
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	2230      	movs	r2, #48	; 0x30
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f001 f94c 	bl	8001930 <memset>
>>>>>>> Stashed changes
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	4b2d      	ldr	r3, [pc, #180]	; (8000934 <_Z18SystemClock_Configv+0xe0>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	4a2c      	ldr	r2, [pc, #176]	; (8000934 <_Z18SystemClock_Configv+0xe0>)
 8000882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000886:	6413      	str	r3, [r2, #64]	; 0x40
 8000888:	4b2a      	ldr	r3, [pc, #168]	; (8000934 <_Z18SystemClock_Configv+0xe0>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000894:	2300      	movs	r3, #0
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	4b27      	ldr	r3, [pc, #156]	; (8000938 <_Z18SystemClock_Configv+0xe4>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a26      	ldr	r2, [pc, #152]	; (8000938 <_Z18SystemClock_Configv+0xe4>)
 800089e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a2:	6013      	str	r3, [r2, #0]
 80008a4:	4b24      	ldr	r3, [pc, #144]	; (8000938 <_Z18SystemClock_Configv+0xe4>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b0:	2301      	movs	r3, #1
 80008b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ba:	2302      	movs	r3, #2
 80008bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008c4:	2319      	movs	r3, #25
 80008c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ce:	2302      	movs	r3, #2
 80008d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008d2:	2304      	movs	r3, #4
 80008d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
<<<<<<< Updated upstream
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 fb7e 	bl	8000fdc <HAL_RCC_OscConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	bf14      	ite	ne
 80008e6:	2301      	movne	r3, #1
 80008e8:	2300      	moveq	r3, #0
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <_Z18SystemClock_Configv+0xa0>
=======
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fab2 	bl	8000c74 <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	bf14      	ite	ne
 8000716:	2301      	movne	r3, #1
 8000718:	2300      	moveq	r3, #0
 800071a:	b2db      	uxtb	r3, r3
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <_Z18SystemClock_Configv+0xa0>
>>>>>>> Stashed changes
  {
    Error_Handler();
 80008f0:	f000 f83c 	bl	800096c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f4:	230f      	movs	r3, #15
 80008f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f8:	2302      	movs	r3, #2
 80008fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000900:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000904:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
<<<<<<< Updated upstream
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	2105      	movs	r1, #5
 8000912:	4618      	mov	r0, r3
 8000914:	f000 fdda 	bl	80014cc <HAL_RCC_ClockConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	bf14      	ite	ne
 800091e:	2301      	movne	r3, #1
 8000920:	2300      	moveq	r3, #0
 8000922:	b2db      	uxtb	r3, r3
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <_Z18SystemClock_Configv+0xd8>
=======
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	2105      	movs	r1, #5
 8000742:	4618      	mov	r0, r3
 8000744:	f000 fd0e 	bl	8001164 <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	bf14      	ite	ne
 800074e:	2301      	movne	r3, #1
 8000750:	2300      	moveq	r3, #0
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <_Z18SystemClock_Configv+0xd8>
>>>>>>> Stashed changes
  {
    Error_Handler();
 8000928:	f000 f820 	bl	800096c <Error_Handler>
  }
}
 800092c:	bf00      	nop
 800092e:	3750      	adds	r7, #80	; 0x50
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800
 8000938:	40007000 	.word	0x40007000

0800093c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
    if(htim->Instance == htim6.Instance){
<<<<<<< Updated upstream
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	429a      	cmp	r2, r3
 800094e:	d104      	bne.n	800095a <HAL_TIM_PeriodElapsedCallback+0x1e>
    	Timer6->Timer_Interrupt();
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff feb1 	bl	80006bc <_ZN14Task_Scheduler15Timer_InterruptEv>
=======
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	429a      	cmp	r2, r3
 800077e:	d102      	bne.n	8000786 <HAL_TIM_PeriodElapsedCallback+0x1a>
    	Timer6.Timer_Interrupt();
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000782:	f001 f827 	bl	80017d4 <_ZN5Timer15Timer_InterruptEv>
>>>>>>> Stashed changes
    }
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200000f0 	.word	0x200000f0
 8000968:	20000094 	.word	0x20000094

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
<<<<<<< Updated upstream
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b085      	sub	sp, #20
 800097c:	af02      	add	r7, sp, #8
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d134      	bne.n	80009f2 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800098e:	4293      	cmp	r3, r2
 8000990:	d12f      	bne.n	80009f2 <_Z41__static_initialization_and_destruction_0ii+0x7a>
Timer_PWM *Timer1 = new Timer_PWM{&htim1, TIM1, 1000, 168};
 8000992:	2010      	movs	r0, #16
 8000994:	f001 faec 	bl	8001f70 <_Znwj>
 8000998:	4603      	mov	r3, r0
 800099a:	461c      	mov	r4, r3
 800099c:	23a8      	movs	r3, #168	; 0xa8
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a4:	4a15      	ldr	r2, [pc, #84]	; (80009fc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80009a6:	4916      	ldr	r1, [pc, #88]	; (8000a00 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80009a8:	4620      	mov	r0, r4
 80009aa:	f001 fa4b 	bl	8001e44 <_ZN9Timer_PWMC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj>
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80009b0:	601c      	str	r4, [r3, #0]
Timer_PWM *Timer8 = new Timer_PWM{&htim8, TIM8, 1000, 168};
 80009b2:	2010      	movs	r0, #16
 80009b4:	f001 fadc 	bl	8001f70 <_Znwj>
 80009b8:	4603      	mov	r3, r0
 80009ba:	461c      	mov	r4, r3
 80009bc:	23a8      	movs	r3, #168	; 0xa8
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c4:	4a10      	ldr	r2, [pc, #64]	; (8000a08 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80009c6:	4911      	ldr	r1, [pc, #68]	; (8000a0c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80009c8:	4620      	mov	r0, r4
 80009ca:	f001 fa3b 	bl	8001e44 <_ZN9Timer_PWMC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj>
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80009d0:	601c      	str	r4, [r3, #0]
Task_Scheduler *Timer6 = new Task_Scheduler{&htim6, TIM6, 1000, 84};
 80009d2:	201c      	movs	r0, #28
 80009d4:	f001 facc 	bl	8001f70 <_Znwj>
 80009d8:	4603      	mov	r3, r0
 80009da:	461c      	mov	r4, r3
 80009dc:	2354      	movs	r3, #84	; 0x54
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e4:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80009e6:	490c      	ldr	r1, [pc, #48]	; (8000a18 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80009e8:	4620      	mov	r0, r4
 80009ea:	f7ff fe19 	bl	8000620 <_ZN14Task_SchedulerC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj>
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80009f0:	601c      	str	r4, [r3, #0]
=======
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d10f      	bne.n	80007d4 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d10a      	bne.n	80007d4 <_Z41__static_initialization_and_destruction_0ii+0x30>
Timer Timer6(&htim6, TIM6, Timer_Mode_Timer, 1000, 84);
 80007be:	2354      	movs	r3, #84	; 0x54
 80007c0:	9301      	str	r3, [sp, #4]
 80007c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	2300      	movs	r3, #0
 80007ca:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80007cc:	490a      	ldr	r1, [pc, #40]	; (80007f8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80007ce:	480b      	ldr	r0, [pc, #44]	; (80007fc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80007d0:	f000 ffa8 	bl	8001724 <_ZN5TimerC1EP17TIM_HandleTypeDefP11TIM_TypeDefhjj>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d107      	bne.n	80007ea <_Z41__static_initialization_and_destruction_0ii+0x46>
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d102      	bne.n	80007ea <_Z41__static_initialization_and_destruction_0ii+0x46>
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80007e6:	f001 f85f 	bl	80018a8 <_ZN5TimerD1Ev>
>>>>>>> Stashed changes
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd90      	pop	{r4, r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40010000 	.word	0x40010000
 8000a00:	20000138 	.word	0x20000138
 8000a04:	2000008c 	.word	0x2000008c
 8000a08:	40010400 	.word	0x40010400
 8000a0c:	200000a8 	.word	0x200000a8
 8000a10:	20000090 	.word	0x20000090
 8000a14:	40001000 	.word	0x40001000
 8000a18:	200000f0 	.word	0x200000f0
 8000a1c:	20000094 	.word	0x20000094

08000a20 <_GLOBAL__sub_I_Timer1>:
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f7ff ffa5 	bl	8000978 <_Z41__static_initialization_and_destruction_0ii>
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <HAL_MspInit+0x58>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <HAL_MspInit+0x58>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	6453      	str	r3, [r2, #68]	; 0x44
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <HAL_MspInit+0x58>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_MspInit+0x58>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	4a0b      	ldr	r2, [pc, #44]	; (8000a88 <HAL_MspInit+0x58>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a60:	6413      	str	r3, [r2, #64]	; 0x40
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_MspInit+0x58>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
<<<<<<< Updated upstream
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	2005      	movs	r0, #5
 8000a74:	f000 fa7b 	bl	8000f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000a78:	2005      	movs	r0, #5
 8000a7a:	f000 fa94 	bl	8000fa6 <HAL_NVIC_EnableIRQ>
=======
 800085e:	2200      	movs	r2, #0
 8000860:	2100      	movs	r1, #0
 8000862:	2005      	movs	r0, #5
 8000864:	f000 f9cf 	bl	8000c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000868:	2005      	movs	r0, #5
 800086a:	f000 f9e8 	bl	8000c3e <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler+0x4>

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <MemManage_Handler+0x4>

08000a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< Updated upstream
 8000ad8:	f000 f94e 	bl	8000d78 <HAL_IncTick>
=======
 80008c8:	f000 f8a2 	bl	8000a10 <HAL_IncTick>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
<<<<<<< Updated upstream
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <TIM6_DAC_IRQHandler+0x10>)
 8000af6:	f000 ff45 	bl	8001984 <HAL_TIM_IRQHandler>
=======
 80008e4:	4802      	ldr	r0, [pc, #8]	; (80008f0 <TIM6_DAC_IRQHandler+0x10>)
 80008e6:	f000 fdd9 	bl	800149c <HAL_TIM_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200000f0 	.word	0x200000f0

08000b04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
	return 1;
 8000b08:	2301      	movs	r3, #1
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <_kill>:

int _kill(int pid, int sig)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b1e:	f001 fa49 	bl	8001fb4 <__errno>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2216      	movs	r2, #22
 8000b26:	601a      	str	r2, [r3, #0]
	return -1;
 8000b28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <_exit>:

void _exit (int status)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff ffe7 	bl	8000b14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b46:	e7fe      	b.n	8000b46 <_exit+0x12>

08000b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b50:	4a14      	ldr	r2, [pc, #80]	; (8000ba4 <_sbrk+0x5c>)
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <_sbrk+0x60>)
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d102      	bne.n	8000b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <_sbrk+0x64>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <_sbrk+0x68>)
 8000b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <_sbrk+0x64>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d207      	bcs.n	8000b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b78:	f001 fa1c 	bl	8001fb4 <__errno>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	220c      	movs	r2, #12
 8000b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295
 8000b86:	e009      	b.n	8000b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b8e:	4b07      	ldr	r3, [pc, #28]	; (8000bac <_sbrk+0x64>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <_sbrk+0x64>)
 8000b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20020000 	.word	0x20020000
 8000ba8:	00000400 	.word	0x00000400
 8000bac:	20000098 	.word	0x20000098
 8000bb0:	20000198 	.word	0x20000198

08000bb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <SystemInit+0x20>)
 8000bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <SystemInit+0x20>)
 8000bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< Updated upstream
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim8);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a22      	ldr	r2, [pc, #136]	; (8000c70 <HAL_TIM_Base_MspInit+0x98>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d10e      	bne.n	8000c08 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <HAL_TIM_Base_MspInit+0x9c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	4a20      	ldr	r2, [pc, #128]	; (8000c74 <HAL_TIM_Base_MspInit+0x9c>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <HAL_TIM_Base_MspInit+0x9c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000c06:	e02e      	b.n	8000c66 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM6)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a1a      	ldr	r2, [pc, #104]	; (8000c78 <HAL_TIM_Base_MspInit+0xa0>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d116      	bne.n	8000c40 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_TIM_Base_MspInit+0x9c>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a16      	ldr	r2, [pc, #88]	; (8000c74 <HAL_TIM_Base_MspInit+0x9c>)
 8000c1c:	f043 0310 	orr.w	r3, r3, #16
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <HAL_TIM_Base_MspInit+0x9c>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f003 0310 	and.w	r3, r3, #16
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2036      	movs	r0, #54	; 0x36
 8000c34:	f000 f99b 	bl	8000f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c38:	2036      	movs	r0, #54	; 0x36
 8000c3a:	f000 f9b4 	bl	8000fa6 <HAL_NVIC_EnableIRQ>
}
 8000c3e:	e012      	b.n	8000c66 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM8)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0d      	ldr	r2, [pc, #52]	; (8000c7c <HAL_TIM_Base_MspInit+0xa4>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d10d      	bne.n	8000c66 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_TIM_Base_MspInit+0x9c>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <HAL_TIM_Base_MspInit+0x9c>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_TIM_Base_MspInit+0x9c>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
}
 8000c66:	bf00      	nop
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40010000 	.word	0x40010000
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40001000 	.word	0x40001000
 8000c7c:	40010400 	.word	0x40010400

08000c80 <Reset_Handler>:
=======
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <Reset_Handler>:
>>>>>>> Stashed changes

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
<<<<<<< Updated upstream
 8000c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c84:	480d      	ldr	r0, [pc, #52]	; (8000cbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c86:	490e      	ldr	r1, [pc, #56]	; (8000cc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c88:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c9c:	4c0b      	ldr	r4, [pc, #44]	; (8000ccc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000caa:	f7ff ff83 	bl	8000bb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cae:	f001 f987 	bl	8001fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb2:	f7ff fdbf 	bl	8000834 <main>
  bx  lr    
 8000cb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cc4:	080021dc 	.word	0x080021dc
  ldr r2, =_sbss
 8000cc8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ccc:	20000194 	.word	0x20000194

08000cd0 <ADC_IRQHandler>:
=======
 8000918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000950 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800091c:	480d      	ldr	r0, [pc, #52]	; (8000954 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800091e:	490e      	ldr	r1, [pc, #56]	; (8000958 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000920:	4a0e      	ldr	r2, [pc, #56]	; (800095c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000924:	e002      	b.n	800092c <LoopCopyDataInit>

08000926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092a:	3304      	adds	r3, #4

0800092c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800092c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000930:	d3f9      	bcc.n	8000926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000932:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000934:	4c0b      	ldr	r4, [pc, #44]	; (8000964 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000938:	e001      	b.n	800093e <LoopFillZerobss>

0800093a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800093c:	3204      	adds	r2, #4

0800093e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000940:	d3fb      	bcc.n	800093a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000942:	f7ff ffd7 	bl	80008f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000946:	f000 ffc7 	bl	80018d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800094a:	f7ff fe0b 	bl	8000564 <main>
  bx  lr    
 800094e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000950:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000958:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800095c:	08001a3c 	.word	0x08001a3c
  ldr r2, =_sbss
 8000960:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000964:	2000019c 	.word	0x2000019c

08000968 <ADC_IRQHandler>:
>>>>>>> Stashed changes
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< Updated upstream
 8000cd0:	e7fe      	b.n	8000cd0 <ADC_IRQHandler>
	...

08000cd4 <HAL_Init>:
=======
 8000968:	e7fe      	b.n	8000968 <ADC_IRQHandler>
	...

0800096c <HAL_Init>:
>>>>>>> Stashed changes
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< Updated upstream
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <HAL_Init+0x40>)
 8000cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce2:	6013      	str	r3, [r2, #0]
=======
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_Init+0x40>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <HAL_Init+0x40>)
 8000976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800097a:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< Updated upstream
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_Init+0x40>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cee:	6013      	str	r3, [r2, #0]
=======
 800097c:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <HAL_Init+0x40>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <HAL_Init+0x40>)
 8000982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000986:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< Updated upstream
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <HAL_Init+0x40>)
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfa:	6013      	str	r3, [r2, #0]
=======
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <HAL_Init+0x40>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a07      	ldr	r2, [pc, #28]	; (80009ac <HAL_Init+0x40>)
 800098e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000992:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< Updated upstream
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f92b 	bl	8000f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d02:	200f      	movs	r0, #15
 8000d04:	f000 f808 	bl	8000d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d08:	f7ff fe92 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023c00 	.word	0x40023c00

08000d18 <HAL_InitTick>:
=======
 8000994:	2003      	movs	r0, #3
 8000996:	f000 f92b 	bl	8000bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099a:	200f      	movs	r0, #15
 800099c:	f000 f808 	bl	80009b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a0:	f7ff ff3e 	bl	8000820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023c00 	.word	0x40023c00

080009b0 <HAL_InitTick>:
>>>>>>> Stashed changes
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< Updated upstream
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_InitTick+0x54>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_InitTick+0x58>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f943 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00e      	b.n	8000d64 <HAL_InitTick+0x4c>
=======
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_InitTick+0x54>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_InitTick+0x58>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	4619      	mov	r1, r3
 80009c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 f943 	bl	8000c5a <HAL_SYSTICK_Config>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	e00e      	b.n	80009fc <HAL_InitTick+0x4c>
>>>>>>> Stashed changes
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< Updated upstream
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	d80a      	bhi.n	8000d62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f000 f90b 	bl	8000f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d58:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <HAL_InitTick+0x5c>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]
=======
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b0f      	cmp	r3, #15
 80009e2:	d80a      	bhi.n	80009fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e4:	2200      	movs	r2, #0
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	f000 f90b 	bl	8000c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f0:	4a06      	ldr	r2, [pc, #24]	; (8000a0c <HAL_InitTick+0x5c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e000      	b.n	8000d64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000004 	.word	0x20000004

08000d78 <HAL_IncTick>:
=======
 80009f6:	2300      	movs	r3, #0
 80009f8:	e000      	b.n	80009fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000000 	.word	0x20000000
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	20000004 	.word	0x20000004

08000a10 <HAL_IncTick>:
>>>>>>> Stashed changes
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< Updated upstream
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	20000180 	.word	0x20000180

08000da0 <HAL_GetTick>:
=======
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_IncTick+0x20>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x24>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <HAL_IncTick+0x24>)
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000008 	.word	0x20000008
 8000a34:	2000018c 	.word	0x2000018c

08000a38 <HAL_GetTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< Updated upstream
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000180 	.word	0x20000180

08000db8 <__NVIC_SetPriorityGrouping>:
=======
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <HAL_GetTick+0x14>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	2000018c 	.word	0x2000018c

08000a50 <__NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_GetPriorityGrouping>:
=======
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a82:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	60d3      	str	r3, [r2, #12]
}
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <__NVIC_GetPriorityGrouping>:
>>>>>>> Stashed changes
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< Updated upstream
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_EnableIRQ>:
=======
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	0a1b      	lsrs	r3, r3, #8
 8000aa2:	f003 0307 	and.w	r3, r3, #7
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <__NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	db0b      	blt.n	8000e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f003 021f 	and.w	r2, r3, #31
 8000e34:	4907      	ldr	r1, [pc, #28]	; (8000e54 <__NVIC_EnableIRQ+0x38>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000e100 	.word	0xe000e100

08000e58 <__NVIC_SetPriority>:
=======
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	db0b      	blt.n	8000ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	f003 021f 	and.w	r2, r3, #31
 8000acc:	4907      	ldr	r1, [pc, #28]	; (8000aec <__NVIC_EnableIRQ+0x38>)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	095b      	lsrs	r3, r3, #5
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000e100 	.word	0xe000e100

08000af0 <__NVIC_SetPriority>:
>>>>>>> Stashed changes
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< Updated upstream
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	db0a      	blt.n	8000e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	490c      	ldr	r1, [pc, #48]	; (8000ea4 <__NVIC_SetPriority+0x4c>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	0112      	lsls	r2, r2, #4
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	db0a      	blt.n	8000b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	490c      	ldr	r1, [pc, #48]	; (8000b3c <__NVIC_SetPriority+0x4c>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	0112      	lsls	r2, r2, #4
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	440b      	add	r3, r1
 8000b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> Stashed changes
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< Updated upstream
 8000e80:	e00a      	b.n	8000e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <__NVIC_SetPriority+0x50>)
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	f003 030f 	and.w	r3, r3, #15
 8000e8e:	3b04      	subs	r3, #4
 8000e90:	0112      	lsls	r2, r2, #4
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	440b      	add	r3, r1
 8000e96:	761a      	strb	r2, [r3, #24]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000e100 	.word	0xe000e100
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <NVIC_EncodePriority>:
=======
 8000b18:	e00a      	b.n	8000b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4908      	ldr	r1, [pc, #32]	; (8000b40 <__NVIC_SetPriority+0x50>)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	3b04      	subs	r3, #4
 8000b28:	0112      	lsls	r2, r2, #4
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	761a      	strb	r2, [r3, #24]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000e100 	.word	0xe000e100
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <NVIC_EncodePriority>:
>>>>>>> Stashed changes
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	61fb      	str	r3, [r7, #28]
=======
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< Updated upstream
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f1c3 0307 	rsb	r3, r3, #7
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	bf28      	it	cs
 8000eca:	2304      	movcs	r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	2b06      	cmp	r3, #6
 8000ed4:	d902      	bls.n	8000edc <NVIC_EncodePriority+0x30>
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3b03      	subs	r3, #3
 8000eda:	e000      	b.n	8000ede <NVIC_EncodePriority+0x32>
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43da      	mvns	r2, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	401a      	ands	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	43d9      	mvns	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	4313      	orrs	r3, r2
         );
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3724      	adds	r7, #36	; 0x24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <SysTick_Config>:
=======
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	f1c3 0307 	rsb	r3, r3, #7
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	bf28      	it	cs
 8000b62:	2304      	movcs	r3, #4
 8000b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d902      	bls.n	8000b74 <NVIC_EncodePriority+0x30>
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3b03      	subs	r3, #3
 8000b72:	e000      	b.n	8000b76 <NVIC_EncodePriority+0x32>
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43da      	mvns	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	401a      	ands	r2, r3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43d9      	mvns	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	4313      	orrs	r3, r2
         );
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3724      	adds	r7, #36	; 0x24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <SysTick_Config>:
>>>>>>> Stashed changes
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< Updated upstream
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f24:	d301      	bcc.n	8000f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00f      	b.n	8000f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <SysTick_Config+0x40>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f32:	210f      	movs	r1, #15
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f7ff ff8e 	bl	8000e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <SysTick_Config+0x40>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f42:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <SysTick_Config+0x40>)
 8000f44:	2207      	movs	r2, #7
 8000f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	e000e010 	.word	0xe000e010

08000f58 <HAL_NVIC_SetPriorityGrouping>:
=======
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bbc:	d301      	bcc.n	8000bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e00f      	b.n	8000be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <SysTick_Config+0x40>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bca:	210f      	movs	r1, #15
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	f7ff ff8e 	bl	8000af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <SysTick_Config+0x40>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bda:	4b04      	ldr	r3, [pc, #16]	; (8000bec <SysTick_Config+0x40>)
 8000bdc:	2207      	movs	r2, #7
 8000bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	e000e010 	.word	0xe000e010

08000bf0 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
=======
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< Updated upstream
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ff29 	bl	8000db8 <__NVIC_SetPriorityGrouping>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_SetPriority>:
=======
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ff29 	bl	8000a50 <__NVIC_SetPriorityGrouping>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_NVIC_SetPriority>:
>>>>>>> Stashed changes
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< Updated upstream
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b086      	sub	sp, #24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
=======
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
 8000c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< Updated upstream
 8000f80:	f7ff ff3e 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8000f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	6978      	ldr	r0, [r7, #20]
 8000f8c:	f7ff ff8e 	bl	8000eac <NVIC_EncodePriority>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff5d 	bl	8000e58 <__NVIC_SetPriority>
}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_EnableIRQ>:
=======
 8000c18:	f7ff ff3e 	bl	8000a98 <__NVIC_GetPriorityGrouping>
 8000c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	6978      	ldr	r0, [r7, #20]
 8000c24:	f7ff ff8e 	bl	8000b44 <NVIC_EncodePriority>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff5d 	bl	8000af0 <__NVIC_SetPriority>
}
 8000c36:	bf00      	nop
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	71fb      	strb	r3, [r7, #7]
=======
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< Updated upstream
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff31 	bl	8000e1c <__NVIC_EnableIRQ>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
=======
 8000c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff31 	bl	8000ab4 <__NVIC_EnableIRQ>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_SYSTICK_Config>:
>>>>>>> Stashed changes
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< Updated upstream
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffa2 	bl	8000f14 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_RCC_OscConfig>:
=======
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff ffa2 	bl	8000bac <SysTick_Config>
 8000c68:	4603      	mov	r3, r0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <HAL_RCC_OscConfig>:
>>>>>>> Stashed changes
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< Updated upstream
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
=======
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< Updated upstream
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e264      	b.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
=======
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d101      	bne.n	8000c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e264      	b.n	8001150 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> Stashed changes
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< Updated upstream
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d075      	beq.n	80010e6 <HAL_RCC_OscConfig+0x10a>
=======
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d075      	beq.n	8000d7e <HAL_RCC_OscConfig+0x10a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
<<<<<<< Updated upstream
 8000ffa:	4ba3      	ldr	r3, [pc, #652]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 030c 	and.w	r3, r3, #12
 8001002:	2b04      	cmp	r3, #4
 8001004:	d00c      	beq.n	8001020 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001006:	4ba0      	ldr	r3, [pc, #640]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800100e:	2b08      	cmp	r3, #8
 8001010:	d112      	bne.n	8001038 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001012:	4b9d      	ldr	r3, [pc, #628]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800101a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800101e:	d10b      	bne.n	8001038 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001020:	4b99      	ldr	r3, [pc, #612]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d05b      	beq.n	80010e4 <HAL_RCC_OscConfig+0x108>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d157      	bne.n	80010e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e23f      	b.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
=======
 8000c92:	4ba3      	ldr	r3, [pc, #652]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	f003 030c 	and.w	r3, r3, #12
 8000c9a:	2b04      	cmp	r3, #4
 8000c9c:	d00c      	beq.n	8000cb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c9e:	4ba0      	ldr	r3, [pc, #640]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ca6:	2b08      	cmp	r3, #8
 8000ca8:	d112      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000caa:	4b9d      	ldr	r3, [pc, #628]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000cb6:	d10b      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cb8:	4b99      	ldr	r3, [pc, #612]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d05b      	beq.n	8000d7c <HAL_RCC_OscConfig+0x108>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d157      	bne.n	8000d7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e23f      	b.n	8001150 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< Updated upstream
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001040:	d106      	bne.n	8001050 <HAL_RCC_OscConfig+0x74>
 8001042:	4b91      	ldr	r3, [pc, #580]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a90      	ldr	r2, [pc, #576]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 8001048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	e01d      	b.n	800108c <HAL_RCC_OscConfig+0xb0>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001058:	d10c      	bne.n	8001074 <HAL_RCC_OscConfig+0x98>
 800105a:	4b8b      	ldr	r3, [pc, #556]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a8a      	ldr	r2, [pc, #552]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 8001060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	4b88      	ldr	r3, [pc, #544]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a87      	ldr	r2, [pc, #540]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 800106c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	e00b      	b.n	800108c <HAL_RCC_OscConfig+0xb0>
 8001074:	4b84      	ldr	r3, [pc, #528]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a83      	ldr	r2, [pc, #524]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 800107a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	4b81      	ldr	r3, [pc, #516]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a80      	ldr	r2, [pc, #512]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 8001086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800108a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d013      	beq.n	80010bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001094:	f7ff fe84 	bl	8000da0 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800109c:	f7ff fe80 	bl	8000da0 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b64      	cmp	r3, #100	; 0x64
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e204      	b.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ae:	4b76      	ldr	r3, [pc, #472]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0f0      	beq.n	800109c <HAL_RCC_OscConfig+0xc0>
 80010ba:	e014      	b.n	80010e6 <HAL_RCC_OscConfig+0x10a>
=======
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd8:	d106      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x74>
 8000cda:	4b91      	ldr	r3, [pc, #580]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a90      	ldr	r2, [pc, #576]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	e01d      	b.n	8000d24 <HAL_RCC_OscConfig+0xb0>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cf0:	d10c      	bne.n	8000d0c <HAL_RCC_OscConfig+0x98>
 8000cf2:	4b8b      	ldr	r3, [pc, #556]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a8a      	ldr	r2, [pc, #552]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	4b88      	ldr	r3, [pc, #544]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a87      	ldr	r2, [pc, #540]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d08:	6013      	str	r3, [r2, #0]
 8000d0a:	e00b      	b.n	8000d24 <HAL_RCC_OscConfig+0xb0>
 8000d0c:	4b84      	ldr	r3, [pc, #528]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a83      	ldr	r2, [pc, #524]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	4b81      	ldr	r3, [pc, #516]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a80      	ldr	r2, [pc, #512]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d013      	beq.n	8000d54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2c:	f7ff fe84 	bl	8000a38 <HAL_GetTick>
 8000d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d32:	e008      	b.n	8000d46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d34:	f7ff fe80 	bl	8000a38 <HAL_GetTick>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	2b64      	cmp	r3, #100	; 0x64
 8000d40:	d901      	bls.n	8000d46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d42:	2303      	movs	r3, #3
 8000d44:	e204      	b.n	8001150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d46:	4b76      	ldr	r3, [pc, #472]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d0f0      	beq.n	8000d34 <HAL_RCC_OscConfig+0xc0>
 8000d52:	e014      	b.n	8000d7e <HAL_RCC_OscConfig+0x10a>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 80010bc:	f7ff fe70 	bl	8000da0 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010c4:	f7ff fe6c 	bl	8000da0 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b64      	cmp	r3, #100	; 0x64
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e1f0      	b.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d6:	4b6c      	ldr	r3, [pc, #432]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f0      	bne.n	80010c4 <HAL_RCC_OscConfig+0xe8>
 80010e2:	e000      	b.n	80010e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e4:	bf00      	nop
=======
 8000d54:	f7ff fe70 	bl	8000a38 <HAL_GetTick>
 8000d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d5a:	e008      	b.n	8000d6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d5c:	f7ff fe6c 	bl	8000a38 <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b64      	cmp	r3, #100	; 0x64
 8000d68:	d901      	bls.n	8000d6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e1f0      	b.n	8001150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d6e:	4b6c      	ldr	r3, [pc, #432]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1f0      	bne.n	8000d5c <HAL_RCC_OscConfig+0xe8>
 8000d7a:	e000      	b.n	8000d7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d7c:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< Updated upstream
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d063      	beq.n	80011ba <HAL_RCC_OscConfig+0x1de>
=======
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d063      	beq.n	8000e52 <HAL_RCC_OscConfig+0x1de>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
<<<<<<< Updated upstream
 80010f2:	4b65      	ldr	r3, [pc, #404]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f003 030c 	and.w	r3, r3, #12
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00b      	beq.n	8001116 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010fe:	4b62      	ldr	r3, [pc, #392]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001106:	2b08      	cmp	r3, #8
 8001108:	d11c      	bne.n	8001144 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800110a:	4b5f      	ldr	r3, [pc, #380]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d116      	bne.n	8001144 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001116:	4b5c      	ldr	r3, [pc, #368]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d005      	beq.n	800112e <HAL_RCC_OscConfig+0x152>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d001      	beq.n	800112e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e1c4      	b.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
=======
 8000d8a:	4b65      	ldr	r3, [pc, #404]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f003 030c 	and.w	r3, r3, #12
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d00b      	beq.n	8000dae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d96:	4b62      	ldr	r3, [pc, #392]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d9e:	2b08      	cmp	r3, #8
 8000da0:	d11c      	bne.n	8000ddc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000da2:	4b5f      	ldr	r3, [pc, #380]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d116      	bne.n	8000ddc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dae:	4b5c      	ldr	r3, [pc, #368]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d005      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x152>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d001      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e1c4      	b.n	8001150 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> Stashed changes
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 800112e:	4b56      	ldr	r3, [pc, #344]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	4952      	ldr	r1, [pc, #328]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 800113e:	4313      	orrs	r3, r2
 8001140:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001142:	e03a      	b.n	80011ba <HAL_RCC_OscConfig+0x1de>
=======
 8000dc6:	4b56      	ldr	r3, [pc, #344]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	691b      	ldr	r3, [r3, #16]
 8000dd2:	00db      	lsls	r3, r3, #3
 8000dd4:	4952      	ldr	r1, [pc, #328]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dda:	e03a      	b.n	8000e52 <HAL_RCC_OscConfig+0x1de>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< Updated upstream
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d020      	beq.n	800118e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800114c:	4b4f      	ldr	r3, [pc, #316]	; (800128c <HAL_RCC_OscConfig+0x2b0>)
 800114e:	2201      	movs	r2, #1
 8001150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001152:	f7ff fe25 	bl	8000da0 <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800115a:	f7ff fe21 	bl	8000da0 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e1a5      	b.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116c:	4b46      	ldr	r3, [pc, #280]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0f0      	beq.n	800115a <HAL_RCC_OscConfig+0x17e>
=======
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d020      	beq.n	8000e26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000de4:	4b4f      	ldr	r3, [pc, #316]	; (8000f24 <HAL_RCC_OscConfig+0x2b0>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dea:	f7ff fe25 	bl	8000a38 <HAL_GetTick>
 8000dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df0:	e008      	b.n	8000e04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000df2:	f7ff fe21 	bl	8000a38 <HAL_GetTick>
 8000df6:	4602      	mov	r2, r0
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d901      	bls.n	8000e04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e00:	2303      	movs	r3, #3
 8000e02:	e1a5      	b.n	8001150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e04:	4b46      	ldr	r3, [pc, #280]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d0f0      	beq.n	8000df2 <HAL_RCC_OscConfig+0x17e>
>>>>>>> Stashed changes
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 8001178:	4b43      	ldr	r3, [pc, #268]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	4940      	ldr	r1, [pc, #256]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 8001188:	4313      	orrs	r3, r2
 800118a:	600b      	str	r3, [r1, #0]
 800118c:	e015      	b.n	80011ba <HAL_RCC_OscConfig+0x1de>
=======
 8000e10:	4b43      	ldr	r3, [pc, #268]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	691b      	ldr	r3, [r3, #16]
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	4940      	ldr	r1, [pc, #256]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000e20:	4313      	orrs	r3, r2
 8000e22:	600b      	str	r3, [r1, #0]
 8000e24:	e015      	b.n	8000e52 <HAL_RCC_OscConfig+0x1de>
>>>>>>> Stashed changes
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< Updated upstream
 800118e:	4b3f      	ldr	r3, [pc, #252]	; (800128c <HAL_RCC_OscConfig+0x2b0>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001194:	f7ff fe04 	bl	8000da0 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800119c:	f7ff fe00 	bl	8000da0 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e184      	b.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ae:	4b36      	ldr	r3, [pc, #216]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f0      	bne.n	800119c <HAL_RCC_OscConfig+0x1c0>
=======
 8000e26:	4b3f      	ldr	r3, [pc, #252]	; (8000f24 <HAL_RCC_OscConfig+0x2b0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e2c:	f7ff fe04 	bl	8000a38 <HAL_GetTick>
 8000e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e32:	e008      	b.n	8000e46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e34:	f7ff fe00 	bl	8000a38 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d901      	bls.n	8000e46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e184      	b.n	8001150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e46:	4b36      	ldr	r3, [pc, #216]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1f0      	bne.n	8000e34 <HAL_RCC_OscConfig+0x1c0>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< Updated upstream
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d030      	beq.n	8001228 <HAL_RCC_OscConfig+0x24c>
=======
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0308 	and.w	r3, r3, #8
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d030      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x24c>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< Updated upstream
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d016      	beq.n	80011fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ce:	4b30      	ldr	r3, [pc, #192]	; (8001290 <HAL_RCC_OscConfig+0x2b4>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011d4:	f7ff fde4 	bl	8000da0 <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011dc:	f7ff fde0 	bl	8000da0 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e164      	b.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ee:	4b26      	ldr	r3, [pc, #152]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d0f0      	beq.n	80011dc <HAL_RCC_OscConfig+0x200>
 80011fa:	e015      	b.n	8001228 <HAL_RCC_OscConfig+0x24c>
=======
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d016      	beq.n	8000e94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e66:	4b30      	ldr	r3, [pc, #192]	; (8000f28 <HAL_RCC_OscConfig+0x2b4>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e6c:	f7ff fde4 	bl	8000a38 <HAL_GetTick>
 8000e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e72:	e008      	b.n	8000e86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e74:	f7ff fde0 	bl	8000a38 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d901      	bls.n	8000e86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	e164      	b.n	8001150 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e86:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0f0      	beq.n	8000e74 <HAL_RCC_OscConfig+0x200>
 8000e92:	e015      	b.n	8000ec0 <HAL_RCC_OscConfig+0x24c>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< Updated upstream
 80011fc:	4b24      	ldr	r3, [pc, #144]	; (8001290 <HAL_RCC_OscConfig+0x2b4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001202:	f7ff fdcd 	bl	8000da0 <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800120a:	f7ff fdc9 	bl	8000da0 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e14d      	b.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 800121e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1f0      	bne.n	800120a <HAL_RCC_OscConfig+0x22e>
=======
 8000e94:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <HAL_RCC_OscConfig+0x2b4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e9a:	f7ff fdcd 	bl	8000a38 <HAL_GetTick>
 8000e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ea0:	e008      	b.n	8000eb4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ea2:	f7ff fdc9 	bl	8000a38 <HAL_GetTick>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d901      	bls.n	8000eb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	e14d      	b.n	8001150 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000eb8:	f003 0302 	and.w	r3, r3, #2
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1f0      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x22e>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< Updated upstream
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 80a0 	beq.w	8001376 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	75fb      	strb	r3, [r7, #23]
=======
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f000 80a0 	beq.w	800100e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< Updated upstream
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10f      	bne.n	8001266 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 8001250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001254:	6413      	str	r3, [r2, #64]	; 0x40
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <HAL_RCC_OscConfig+0x2ac>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001262:	2301      	movs	r3, #1
 8001264:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_RCC_OscConfig+0x2b8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126e:	2b00      	cmp	r3, #0
 8001270:	d121      	bne.n	80012b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_RCC_OscConfig+0x2b8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a07      	ldr	r2, [pc, #28]	; (8001294 <HAL_RCC_OscConfig+0x2b8>)
 8001278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800127e:	f7ff fd8f 	bl	8000da0 <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001284:	e011      	b.n	80012aa <HAL_RCC_OscConfig+0x2ce>
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	42470000 	.word	0x42470000
 8001290:	42470e80 	.word	0x42470e80
 8001294:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001298:	f7ff fd82 	bl	8000da0 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e106      	b.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012aa:	4b85      	ldr	r3, [pc, #532]	; (80014c0 <HAL_RCC_OscConfig+0x4e4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCC_OscConfig+0x2bc>
=======
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10f      	bne.n	8000efe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eec:	6413      	str	r3, [r2, #64]	; 0x40
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <HAL_RCC_OscConfig+0x2ac>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000efa:	2301      	movs	r3, #1
 8000efc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <HAL_RCC_OscConfig+0x2b8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d121      	bne.n	8000f4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <HAL_RCC_OscConfig+0x2b8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <HAL_RCC_OscConfig+0x2b8>)
 8000f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f16:	f7ff fd8f 	bl	8000a38 <HAL_GetTick>
 8000f1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1c:	e011      	b.n	8000f42 <HAL_RCC_OscConfig+0x2ce>
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800
 8000f24:	42470000 	.word	0x42470000
 8000f28:	42470e80 	.word	0x42470e80
 8000f2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f30:	f7ff fd82 	bl	8000a38 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d901      	bls.n	8000f42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e106      	b.n	8001150 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f42:	4b85      	ldr	r3, [pc, #532]	; (8001158 <HAL_RCC_OscConfig+0x4e4>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d0f0      	beq.n	8000f30 <HAL_RCC_OscConfig+0x2bc>
>>>>>>> Stashed changes
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< Updated upstream
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d106      	bne.n	80012cc <HAL_RCC_OscConfig+0x2f0>
 80012be:	4b81      	ldr	r3, [pc, #516]	; (80014c4 <HAL_RCC_OscConfig+0x4e8>)
 80012c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c2:	4a80      	ldr	r2, [pc, #512]	; (80014c4 <HAL_RCC_OscConfig+0x4e8>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6713      	str	r3, [r2, #112]	; 0x70
 80012ca:	e01c      	b.n	8001306 <HAL_RCC_OscConfig+0x32a>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	2b05      	cmp	r3, #5
 80012d2:	d10c      	bne.n	80012ee <HAL_RCC_OscConfig+0x312>
 80012d4:	4b7b      	ldr	r3, [pc, #492]	; (80014c4 <HAL_RCC_OscConfig+0x4e8>)
 80012d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d8:	4a7a      	ldr	r2, [pc, #488]	; (80014c4 <HAL_RCC_OscConfig+0x4e8>)
 80012da:	f043 0304 	orr.w	r3, r3, #4
 80012de:	6713      	str	r3, [r2, #112]	; 0x70
 80012e0:	4b78      	ldr	r3, [pc, #480]	; (80014c4 <HAL_RCC_OscConfig+0x4e8>)
 80012e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e4:	4a77      	ldr	r2, [pc, #476]	; (80014c4 <HAL_RCC_OscConfig+0x4e8>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6713      	str	r3, [r2, #112]	; 0x70
 80012ec:	e00b      	b.n	8001306 <HAL_RCC_OscConfig+0x32a>
 80012ee:	4b75      	ldr	r3, [pc, #468]	; (80014c4 <HAL_RCC_OscConfig+0x4e8>)
 80012f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f2:	4a74      	ldr	r2, [pc, #464]	; (80014c4 <HAL_RCC_OscConfig+0x4e8>)
 80012f4:	f023 0301 	bic.w	r3, r3, #1
 80012f8:	6713      	str	r3, [r2, #112]	; 0x70
 80012fa:	4b72      	ldr	r3, [pc, #456]	; (80014c4 <HAL_RCC_OscConfig+0x4e8>)
 80012fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012fe:	4a71      	ldr	r2, [pc, #452]	; (80014c4 <HAL_RCC_OscConfig+0x4e8>)
 8001300:	f023 0304 	bic.w	r3, r3, #4
 8001304:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d015      	beq.n	800133a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800130e:	f7ff fd47 	bl	8000da0 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001314:	e00a      	b.n	800132c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001316:	f7ff fd43 	bl	8000da0 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	f241 3288 	movw	r2, #5000	; 0x1388
 8001324:	4293      	cmp	r3, r2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e0c5      	b.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800132c:	4b65      	ldr	r3, [pc, #404]	; (80014c4 <HAL_RCC_OscConfig+0x4e8>)
 800132e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0ee      	beq.n	8001316 <HAL_RCC_OscConfig+0x33a>
 8001338:	e014      	b.n	8001364 <HAL_RCC_OscConfig+0x388>
=======
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d106      	bne.n	8000f64 <HAL_RCC_OscConfig+0x2f0>
 8000f56:	4b81      	ldr	r3, [pc, #516]	; (800115c <HAL_RCC_OscConfig+0x4e8>)
 8000f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f5a:	4a80      	ldr	r2, [pc, #512]	; (800115c <HAL_RCC_OscConfig+0x4e8>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6713      	str	r3, [r2, #112]	; 0x70
 8000f62:	e01c      	b.n	8000f9e <HAL_RCC_OscConfig+0x32a>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	2b05      	cmp	r3, #5
 8000f6a:	d10c      	bne.n	8000f86 <HAL_RCC_OscConfig+0x312>
 8000f6c:	4b7b      	ldr	r3, [pc, #492]	; (800115c <HAL_RCC_OscConfig+0x4e8>)
 8000f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f70:	4a7a      	ldr	r2, [pc, #488]	; (800115c <HAL_RCC_OscConfig+0x4e8>)
 8000f72:	f043 0304 	orr.w	r3, r3, #4
 8000f76:	6713      	str	r3, [r2, #112]	; 0x70
 8000f78:	4b78      	ldr	r3, [pc, #480]	; (800115c <HAL_RCC_OscConfig+0x4e8>)
 8000f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f7c:	4a77      	ldr	r2, [pc, #476]	; (800115c <HAL_RCC_OscConfig+0x4e8>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	6713      	str	r3, [r2, #112]	; 0x70
 8000f84:	e00b      	b.n	8000f9e <HAL_RCC_OscConfig+0x32a>
 8000f86:	4b75      	ldr	r3, [pc, #468]	; (800115c <HAL_RCC_OscConfig+0x4e8>)
 8000f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f8a:	4a74      	ldr	r2, [pc, #464]	; (800115c <HAL_RCC_OscConfig+0x4e8>)
 8000f8c:	f023 0301 	bic.w	r3, r3, #1
 8000f90:	6713      	str	r3, [r2, #112]	; 0x70
 8000f92:	4b72      	ldr	r3, [pc, #456]	; (800115c <HAL_RCC_OscConfig+0x4e8>)
 8000f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f96:	4a71      	ldr	r2, [pc, #452]	; (800115c <HAL_RCC_OscConfig+0x4e8>)
 8000f98:	f023 0304 	bic.w	r3, r3, #4
 8000f9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d015      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fa6:	f7ff fd47 	bl	8000a38 <HAL_GetTick>
 8000faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fac:	e00a      	b.n	8000fc4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fae:	f7ff fd43 	bl	8000a38 <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e0c5      	b.n	8001150 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fc4:	4b65      	ldr	r3, [pc, #404]	; (800115c <HAL_RCC_OscConfig+0x4e8>)
 8000fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d0ee      	beq.n	8000fae <HAL_RCC_OscConfig+0x33a>
 8000fd0:	e014      	b.n	8000ffc <HAL_RCC_OscConfig+0x388>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 800133a:	f7ff fd31 	bl	8000da0 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001340:	e00a      	b.n	8001358 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001342:	f7ff fd2d 	bl	8000da0 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001350:	4293      	cmp	r3, r2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e0af      	b.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001358:	4b5a      	ldr	r3, [pc, #360]	; (80014c4 <HAL_RCC_OscConfig+0x4e8>)
 800135a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1ee      	bne.n	8001342 <HAL_RCC_OscConfig+0x366>
=======
 8000fd2:	f7ff fd31 	bl	8000a38 <HAL_GetTick>
 8000fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fd8:	e00a      	b.n	8000ff0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fda:	f7ff fd2d 	bl	8000a38 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d901      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e0af      	b.n	8001150 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff0:	4b5a      	ldr	r3, [pc, #360]	; (800115c <HAL_RCC_OscConfig+0x4e8>)
 8000ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1ee      	bne.n	8000fda <HAL_RCC_OscConfig+0x366>
>>>>>>> Stashed changes
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< Updated upstream
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d105      	bne.n	8001376 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800136a:	4b56      	ldr	r3, [pc, #344]	; (80014c4 <HAL_RCC_OscConfig+0x4e8>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a55      	ldr	r2, [pc, #340]	; (80014c4 <HAL_RCC_OscConfig+0x4e8>)
 8001370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
=======
 8000ffc:	7dfb      	ldrb	r3, [r7, #23]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d105      	bne.n	800100e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001002:	4b56      	ldr	r3, [pc, #344]	; (800115c <HAL_RCC_OscConfig+0x4e8>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	4a55      	ldr	r2, [pc, #340]	; (800115c <HAL_RCC_OscConfig+0x4e8>)
 8001008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800100c:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> Stashed changes
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< Updated upstream
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 809b 	beq.w	80014b6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001380:	4b50      	ldr	r3, [pc, #320]	; (80014c4 <HAL_RCC_OscConfig+0x4e8>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f003 030c 	and.w	r3, r3, #12
 8001388:	2b08      	cmp	r3, #8
 800138a:	d05c      	beq.n	8001446 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d141      	bne.n	8001418 <HAL_RCC_OscConfig+0x43c>
=======
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 809b 	beq.w	800114e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001018:	4b50      	ldr	r3, [pc, #320]	; (800115c <HAL_RCC_OscConfig+0x4e8>)
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f003 030c 	and.w	r3, r3, #12
 8001020:	2b08      	cmp	r3, #8
 8001022:	d05c      	beq.n	80010de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	2b02      	cmp	r3, #2
 800102a:	d141      	bne.n	80010b0 <HAL_RCC_OscConfig+0x43c>
>>>>>>> Stashed changes
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8001394:	4b4c      	ldr	r3, [pc, #304]	; (80014c8 <HAL_RCC_OscConfig+0x4ec>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139a:	f7ff fd01 	bl	8000da0 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013a2:	f7ff fcfd 	bl	8000da0 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e081      	b.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013b4:	4b43      	ldr	r3, [pc, #268]	; (80014c4 <HAL_RCC_OscConfig+0x4e8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1f0      	bne.n	80013a2 <HAL_RCC_OscConfig+0x3c6>
=======
 800102c:	4b4c      	ldr	r3, [pc, #304]	; (8001160 <HAL_RCC_OscConfig+0x4ec>)
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001032:	f7ff fd01 	bl	8000a38 <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800103a:	f7ff fcfd 	bl	8000a38 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e081      	b.n	8001150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800104c:	4b43      	ldr	r3, [pc, #268]	; (800115c <HAL_RCC_OscConfig+0x4e8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f0      	bne.n	800103a <HAL_RCC_OscConfig+0x3c6>
>>>>>>> Stashed changes
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< Updated upstream
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69da      	ldr	r2, [r3, #28]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	431a      	orrs	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	019b      	lsls	r3, r3, #6
 80013d0:	431a      	orrs	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d6:	085b      	lsrs	r3, r3, #1
 80013d8:	3b01      	subs	r3, #1
 80013da:	041b      	lsls	r3, r3, #16
 80013dc:	431a      	orrs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e2:	061b      	lsls	r3, r3, #24
 80013e4:	4937      	ldr	r1, [pc, #220]	; (80014c4 <HAL_RCC_OscConfig+0x4e8>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	604b      	str	r3, [r1, #4]
=======
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	69da      	ldr	r2, [r3, #28]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	431a      	orrs	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001066:	019b      	lsls	r3, r3, #6
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106e:	085b      	lsrs	r3, r3, #1
 8001070:	3b01      	subs	r3, #1
 8001072:	041b      	lsls	r3, r3, #16
 8001074:	431a      	orrs	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107a:	061b      	lsls	r3, r3, #24
 800107c:	4937      	ldr	r1, [pc, #220]	; (800115c <HAL_RCC_OscConfig+0x4e8>)
 800107e:	4313      	orrs	r3, r2
 8001080:	604b      	str	r3, [r1, #4]
>>>>>>> Stashed changes
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< Updated upstream
 80013ea:	4b37      	ldr	r3, [pc, #220]	; (80014c8 <HAL_RCC_OscConfig+0x4ec>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fcd6 	bl	8000da0 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f8:	f7ff fcd2 	bl	8000da0 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e056      	b.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800140a:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <HAL_RCC_OscConfig+0x4e8>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d0f0      	beq.n	80013f8 <HAL_RCC_OscConfig+0x41c>
 8001416:	e04e      	b.n	80014b6 <HAL_RCC_OscConfig+0x4da>
=======
 8001082:	4b37      	ldr	r3, [pc, #220]	; (8001160 <HAL_RCC_OscConfig+0x4ec>)
 8001084:	2201      	movs	r2, #1
 8001086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001088:	f7ff fcd6 	bl	8000a38 <HAL_GetTick>
 800108c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800108e:	e008      	b.n	80010a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001090:	f7ff fcd2 	bl	8000a38 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e056      	b.n	8001150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010a2:	4b2e      	ldr	r3, [pc, #184]	; (800115c <HAL_RCC_OscConfig+0x4e8>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d0f0      	beq.n	8001090 <HAL_RCC_OscConfig+0x41c>
 80010ae:	e04e      	b.n	800114e <HAL_RCC_OscConfig+0x4da>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8001418:	4b2b      	ldr	r3, [pc, #172]	; (80014c8 <HAL_RCC_OscConfig+0x4ec>)
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141e:	f7ff fcbf 	bl	8000da0 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001426:	f7ff fcbb 	bl	8000da0 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e03f      	b.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <HAL_RCC_OscConfig+0x4e8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f0      	bne.n	8001426 <HAL_RCC_OscConfig+0x44a>
 8001444:	e037      	b.n	80014b6 <HAL_RCC_OscConfig+0x4da>
=======
 80010b0:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <HAL_RCC_OscConfig+0x4ec>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b6:	f7ff fcbf 	bl	8000a38 <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010bc:	e008      	b.n	80010d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010be:	f7ff fcbb 	bl	8000a38 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e03f      	b.n	8001150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010d0:	4b22      	ldr	r3, [pc, #136]	; (800115c <HAL_RCC_OscConfig+0x4e8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1f0      	bne.n	80010be <HAL_RCC_OscConfig+0x44a>
 80010dc:	e037      	b.n	800114e <HAL_RCC_OscConfig+0x4da>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< Updated upstream
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d101      	bne.n	8001452 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e032      	b.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
=======
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d101      	bne.n	80010ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e032      	b.n	8001150 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> Stashed changes
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< Updated upstream
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <HAL_RCC_OscConfig+0x4e8>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	60fb      	str	r3, [r7, #12]
=======
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <HAL_RCC_OscConfig+0x4e8>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
<<<<<<< Updated upstream
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d028      	beq.n	80014b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800146a:	429a      	cmp	r2, r3
 800146c:	d121      	bne.n	80014b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001478:	429a      	cmp	r2, r3
 800147a:	d11a      	bne.n	80014b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001482:	4013      	ands	r3, r2
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001488:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800148a:	4293      	cmp	r3, r2
 800148c:	d111      	bne.n	80014b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001498:	085b      	lsrs	r3, r3, #1
 800149a:	3b01      	subs	r3, #1
 800149c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800149e:	429a      	cmp	r2, r3
 80014a0:	d107      	bne.n	80014b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d001      	beq.n	80014b6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <HAL_RCC_OscConfig+0x4dc>
=======
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d028      	beq.n	800114a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001102:	429a      	cmp	r2, r3
 8001104:	d121      	bne.n	800114a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001110:	429a      	cmp	r2, r3
 8001112:	d11a      	bne.n	800114a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800111a:	4013      	ands	r3, r2
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001120:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001122:	4293      	cmp	r3, r2
 8001124:	d111      	bne.n	800114a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001130:	085b      	lsrs	r3, r3, #1
 8001132:	3b01      	subs	r3, #1
 8001134:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001136:	429a      	cmp	r2, r3
 8001138:	d107      	bne.n	800114a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001144:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001146:	429a      	cmp	r2, r3
 8001148:	d001      	beq.n	800114e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e000      	b.n	8001150 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40007000 	.word	0x40007000
 80014c4:	40023800 	.word	0x40023800
 80014c8:	42470060 	.word	0x42470060

080014cc <HAL_RCC_ClockConfig>:
=======
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40007000 	.word	0x40007000
 800115c:	40023800 	.word	0x40023800
 8001160:	42470060 	.word	0x42470060

08001164 <HAL_RCC_ClockConfig>:
>>>>>>> Stashed changes
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< Updated upstream
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
=======
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< Updated upstream
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e0cc      	b.n	800167a <HAL_RCC_ClockConfig+0x1ae>
=======
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e0cc      	b.n	8001312 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 80014e0:	4b68      	ldr	r3, [pc, #416]	; (8001684 <HAL_RCC_ClockConfig+0x1b8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d90c      	bls.n	8001508 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ee:	4b65      	ldr	r3, [pc, #404]	; (8001684 <HAL_RCC_ClockConfig+0x1b8>)
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	701a      	strb	r2, [r3, #0]
=======
 8001178:	4b68      	ldr	r3, [pc, #416]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d90c      	bls.n	80011a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001186:	4b65      	ldr	r3, [pc, #404]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 80014f6:	4b63      	ldr	r3, [pc, #396]	; (8001684 <HAL_RCC_ClockConfig+0x1b8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	429a      	cmp	r2, r3
 8001502:	d001      	beq.n	8001508 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e0b8      	b.n	800167a <HAL_RCC_ClockConfig+0x1ae>
=======
 800118e:	4b63      	ldr	r3, [pc, #396]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	429a      	cmp	r2, r3
 800119a:	d001      	beq.n	80011a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e0b8      	b.n	8001312 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d020      	beq.n	8001556 <HAL_RCC_ClockConfig+0x8a>
=======
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d020      	beq.n	80011ee <HAL_RCC_ClockConfig+0x8a>
>>>>>>> Stashed changes
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001520:	4b59      	ldr	r3, [pc, #356]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	4a58      	ldr	r2, [pc, #352]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800152a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	2b00      	cmp	r3, #0
 8001536:	d005      	beq.n	8001544 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001538:	4b53      	ldr	r3, [pc, #332]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	4a52      	ldr	r2, [pc, #328]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001542:	6093      	str	r3, [r2, #8]
=======
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d005      	beq.n	80011c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011b8:	4b59      	ldr	r3, [pc, #356]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	4a58      	ldr	r2, [pc, #352]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80011be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0308 	and.w	r3, r3, #8
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d005      	beq.n	80011dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011d0:	4b53      	ldr	r3, [pc, #332]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	4a52      	ldr	r2, [pc, #328]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80011d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011da:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< Updated upstream
 8001544:	4b50      	ldr	r3, [pc, #320]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	494d      	ldr	r1, [pc, #308]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	4313      	orrs	r3, r2
 8001554:	608b      	str	r3, [r1, #8]
=======
 80011dc:	4b50      	ldr	r3, [pc, #320]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	494d      	ldr	r1, [pc, #308]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< Updated upstream
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b00      	cmp	r3, #0
 8001560:	d044      	beq.n	80015ec <HAL_RCC_ClockConfig+0x120>
=======
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d044      	beq.n	8001284 <HAL_RCC_ClockConfig+0x120>
>>>>>>> Stashed changes
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< Updated upstream
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d107      	bne.n	800157a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156a:	4b47      	ldr	r3, [pc, #284]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d119      	bne.n	80015aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e07f      	b.n	800167a <HAL_RCC_ClockConfig+0x1ae>
=======
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d107      	bne.n	8001212 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001202:	4b47      	ldr	r3, [pc, #284]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d119      	bne.n	8001242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e07f      	b.n	8001312 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< Updated upstream
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d003      	beq.n	800158a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001586:	2b03      	cmp	r3, #3
 8001588:	d107      	bne.n	800159a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800158a:	4b3f      	ldr	r3, [pc, #252]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d109      	bne.n	80015aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e06f      	b.n	800167a <HAL_RCC_ClockConfig+0x1ae>
=======
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d003      	beq.n	8001222 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800121e:	2b03      	cmp	r3, #3
 8001220:	d107      	bne.n	8001232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001222:	4b3f      	ldr	r3, [pc, #252]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d109      	bne.n	8001242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e06f      	b.n	8001312 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< Updated upstream
 800159a:	4b3b      	ldr	r3, [pc, #236]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e067      	b.n	800167a <HAL_RCC_ClockConfig+0x1ae>
=======
 8001232:	4b3b      	ldr	r3, [pc, #236]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e067      	b.n	8001312 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< Updated upstream
 80015aa:	4b37      	ldr	r3, [pc, #220]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f023 0203 	bic.w	r2, r3, #3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	4934      	ldr	r1, [pc, #208]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015bc:	f7ff fbf0 	bl	8000da0 <HAL_GetTick>
 80015c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c2:	e00a      	b.n	80015da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c4:	f7ff fbec 	bl	8000da0 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e04f      	b.n	800167a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015da:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 020c 	and.w	r2, r3, #12
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d1eb      	bne.n	80015c4 <HAL_RCC_ClockConfig+0xf8>
=======
 8001242:	4b37      	ldr	r3, [pc, #220]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f023 0203 	bic.w	r2, r3, #3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4934      	ldr	r1, [pc, #208]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 8001250:	4313      	orrs	r3, r2
 8001252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001254:	f7ff fbf0 	bl	8000a38 <HAL_GetTick>
 8001258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800125a:	e00a      	b.n	8001272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800125c:	f7ff fbec 	bl	8000a38 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	f241 3288 	movw	r2, #5000	; 0x1388
 800126a:	4293      	cmp	r3, r2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e04f      	b.n	8001312 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001272:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 020c 	and.w	r2, r3, #12
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	429a      	cmp	r2, r3
 8001282:	d1eb      	bne.n	800125c <HAL_RCC_ClockConfig+0xf8>
>>>>>>> Stashed changes
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 80015ec:	4b25      	ldr	r3, [pc, #148]	; (8001684 <HAL_RCC_ClockConfig+0x1b8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d20c      	bcs.n	8001614 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fa:	4b22      	ldr	r3, [pc, #136]	; (8001684 <HAL_RCC_ClockConfig+0x1b8>)
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	701a      	strb	r2, [r3, #0]
=======
 8001284:	4b25      	ldr	r3, [pc, #148]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0307 	and.w	r3, r3, #7
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	d20c      	bcs.n	80012ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001292:	4b22      	ldr	r3, [pc, #136]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8001602:	4b20      	ldr	r3, [pc, #128]	; (8001684 <HAL_RCC_ClockConfig+0x1b8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d001      	beq.n	8001614 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e032      	b.n	800167a <HAL_RCC_ClockConfig+0x1ae>
=======
 800129a:	4b20      	ldr	r3, [pc, #128]	; (800131c <HAL_RCC_ClockConfig+0x1b8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d001      	beq.n	80012ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e032      	b.n	8001312 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	d008      	beq.n	8001632 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001620:	4b19      	ldr	r3, [pc, #100]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	4916      	ldr	r1, [pc, #88]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	4313      	orrs	r3, r2
 8001630:	608b      	str	r3, [r1, #8]
=======
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d008      	beq.n	80012ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012b8:	4b19      	ldr	r3, [pc, #100]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	4916      	ldr	r1, [pc, #88]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< Updated upstream
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	2b00      	cmp	r3, #0
 800163c:	d009      	beq.n	8001652 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800163e:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	490e      	ldr	r1, [pc, #56]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	4313      	orrs	r3, r2
 8001650:	608b      	str	r3, [r1, #8]
=======
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d009      	beq.n	80012ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	490e      	ldr	r1, [pc, #56]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< Updated upstream
 8001652:	f000 f821 	bl	8001698 <HAL_RCC_GetSysClockFreq>
 8001656:	4602      	mov	r2, r0
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	091b      	lsrs	r3, r3, #4
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	490a      	ldr	r1, [pc, #40]	; (800168c <HAL_RCC_ClockConfig+0x1c0>)
 8001664:	5ccb      	ldrb	r3, [r1, r3]
 8001666:	fa22 f303 	lsr.w	r3, r2, r3
 800166a:	4a09      	ldr	r2, [pc, #36]	; (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_RCC_ClockConfig+0x1c8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fb50 	bl	8000d18 <HAL_InitTick>

  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023c00 	.word	0x40023c00
 8001688:	40023800 	.word	0x40023800
 800168c:	080021b8 	.word	0x080021b8
 8001690:	20000000 	.word	0x20000000
 8001694:	20000004 	.word	0x20000004

08001698 <HAL_RCC_GetSysClockFreq>:
=======
 80012ea:	f000 f821 	bl	8001330 <HAL_RCC_GetSysClockFreq>
 80012ee:	4602      	mov	r2, r0
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	490a      	ldr	r1, [pc, #40]	; (8001324 <HAL_RCC_ClockConfig+0x1c0>)
 80012fc:	5ccb      	ldrb	r3, [r1, r3]
 80012fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001302:	4a09      	ldr	r2, [pc, #36]	; (8001328 <HAL_RCC_ClockConfig+0x1c4>)
 8001304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <HAL_RCC_ClockConfig+0x1c8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fb50 	bl	80009b0 <HAL_InitTick>

  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023c00 	.word	0x40023c00
 8001320:	40023800 	.word	0x40023800
 8001324:	08001a14 	.word	0x08001a14
 8001328:	20000000 	.word	0x20000000
 800132c:	20000004 	.word	0x20000004

08001330 <HAL_RCC_GetSysClockFreq>:
>>>>>>> Stashed changes
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< Updated upstream
 8001698:	b5b0      	push	{r4, r5, r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800169e:	2100      	movs	r1, #0
 80016a0:	6079      	str	r1, [r7, #4]
 80016a2:	2100      	movs	r1, #0
 80016a4:	60f9      	str	r1, [r7, #12]
 80016a6:	2100      	movs	r1, #0
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80016aa:	2100      	movs	r1, #0
 80016ac:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016ae:	4952      	ldr	r1, [pc, #328]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80016b0:	6889      	ldr	r1, [r1, #8]
 80016b2:	f001 010c 	and.w	r1, r1, #12
 80016b6:	2908      	cmp	r1, #8
 80016b8:	d00d      	beq.n	80016d6 <HAL_RCC_GetSysClockFreq+0x3e>
 80016ba:	2908      	cmp	r1, #8
 80016bc:	f200 8094 	bhi.w	80017e8 <HAL_RCC_GetSysClockFreq+0x150>
 80016c0:	2900      	cmp	r1, #0
 80016c2:	d002      	beq.n	80016ca <HAL_RCC_GetSysClockFreq+0x32>
 80016c4:	2904      	cmp	r1, #4
 80016c6:	d003      	beq.n	80016d0 <HAL_RCC_GetSysClockFreq+0x38>
 80016c8:	e08e      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x150>
=======
 8001330:	b5b0      	push	{r4, r5, r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001336:	2100      	movs	r1, #0
 8001338:	6079      	str	r1, [r7, #4]
 800133a:	2100      	movs	r1, #0
 800133c:	60f9      	str	r1, [r7, #12]
 800133e:	2100      	movs	r1, #0
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001342:	2100      	movs	r1, #0
 8001344:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001346:	4952      	ldr	r1, [pc, #328]	; (8001490 <HAL_RCC_GetSysClockFreq+0x160>)
 8001348:	6889      	ldr	r1, [r1, #8]
 800134a:	f001 010c 	and.w	r1, r1, #12
 800134e:	2908      	cmp	r1, #8
 8001350:	d00d      	beq.n	800136e <HAL_RCC_GetSysClockFreq+0x3e>
 8001352:	2908      	cmp	r1, #8
 8001354:	f200 8094 	bhi.w	8001480 <HAL_RCC_GetSysClockFreq+0x150>
 8001358:	2900      	cmp	r1, #0
 800135a:	d002      	beq.n	8001362 <HAL_RCC_GetSysClockFreq+0x32>
 800135c:	2904      	cmp	r1, #4
 800135e:	d003      	beq.n	8001368 <HAL_RCC_GetSysClockFreq+0x38>
 8001360:	e08e      	b.n	8001480 <HAL_RCC_GetSysClockFreq+0x150>
>>>>>>> Stashed changes
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< Updated upstream
 80016ca:	4b4c      	ldr	r3, [pc, #304]	; (80017fc <HAL_RCC_GetSysClockFreq+0x164>)
 80016cc:	60bb      	str	r3, [r7, #8]
       break;
 80016ce:	e08e      	b.n	80017ee <HAL_RCC_GetSysClockFreq+0x156>
=======
 8001362:	4b4c      	ldr	r3, [pc, #304]	; (8001494 <HAL_RCC_GetSysClockFreq+0x164>)
 8001364:	60bb      	str	r3, [r7, #8]
       break;
 8001366:	e08e      	b.n	8001486 <HAL_RCC_GetSysClockFreq+0x156>
>>>>>>> Stashed changes
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< Updated upstream
 80016d0:	4b4b      	ldr	r3, [pc, #300]	; (8001800 <HAL_RCC_GetSysClockFreq+0x168>)
 80016d2:	60bb      	str	r3, [r7, #8]
      break;
 80016d4:	e08b      	b.n	80017ee <HAL_RCC_GetSysClockFreq+0x156>
=======
 8001368:	4b4b      	ldr	r3, [pc, #300]	; (8001498 <HAL_RCC_GetSysClockFreq+0x168>)
 800136a:	60bb      	str	r3, [r7, #8]
      break;
 800136c:	e08b      	b.n	8001486 <HAL_RCC_GetSysClockFreq+0x156>
>>>>>>> Stashed changes
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< Updated upstream
 80016d6:	4948      	ldr	r1, [pc, #288]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80016d8:	6849      	ldr	r1, [r1, #4]
 80016da:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80016de:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016e0:	4945      	ldr	r1, [pc, #276]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80016e2:	6849      	ldr	r1, [r1, #4]
 80016e4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80016e8:	2900      	cmp	r1, #0
 80016ea:	d024      	beq.n	8001736 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ec:	4942      	ldr	r1, [pc, #264]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80016ee:	6849      	ldr	r1, [r1, #4]
 80016f0:	0989      	lsrs	r1, r1, #6
 80016f2:	4608      	mov	r0, r1
 80016f4:	f04f 0100 	mov.w	r1, #0
 80016f8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80016fc:	f04f 0500 	mov.w	r5, #0
 8001700:	ea00 0204 	and.w	r2, r0, r4
 8001704:	ea01 0305 	and.w	r3, r1, r5
 8001708:	493d      	ldr	r1, [pc, #244]	; (8001800 <HAL_RCC_GetSysClockFreq+0x168>)
 800170a:	fb01 f003 	mul.w	r0, r1, r3
 800170e:	2100      	movs	r1, #0
 8001710:	fb01 f102 	mul.w	r1, r1, r2
 8001714:	1844      	adds	r4, r0, r1
 8001716:	493a      	ldr	r1, [pc, #232]	; (8001800 <HAL_RCC_GetSysClockFreq+0x168>)
 8001718:	fba2 0101 	umull	r0, r1, r2, r1
 800171c:	1863      	adds	r3, r4, r1
 800171e:	4619      	mov	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	461a      	mov	r2, r3
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	f7fe fd4e 	bl	80001c8 <__aeabi_uldivmod>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4613      	mov	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	e04a      	b.n	80017cc <HAL_RCC_GetSysClockFreq+0x134>
=======
 800136e:	4948      	ldr	r1, [pc, #288]	; (8001490 <HAL_RCC_GetSysClockFreq+0x160>)
 8001370:	6849      	ldr	r1, [r1, #4]
 8001372:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001376:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001378:	4945      	ldr	r1, [pc, #276]	; (8001490 <HAL_RCC_GetSysClockFreq+0x160>)
 800137a:	6849      	ldr	r1, [r1, #4]
 800137c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001380:	2900      	cmp	r1, #0
 8001382:	d024      	beq.n	80013ce <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001384:	4942      	ldr	r1, [pc, #264]	; (8001490 <HAL_RCC_GetSysClockFreq+0x160>)
 8001386:	6849      	ldr	r1, [r1, #4]
 8001388:	0989      	lsrs	r1, r1, #6
 800138a:	4608      	mov	r0, r1
 800138c:	f04f 0100 	mov.w	r1, #0
 8001390:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001394:	f04f 0500 	mov.w	r5, #0
 8001398:	ea00 0204 	and.w	r2, r0, r4
 800139c:	ea01 0305 	and.w	r3, r1, r5
 80013a0:	493d      	ldr	r1, [pc, #244]	; (8001498 <HAL_RCC_GetSysClockFreq+0x168>)
 80013a2:	fb01 f003 	mul.w	r0, r1, r3
 80013a6:	2100      	movs	r1, #0
 80013a8:	fb01 f102 	mul.w	r1, r1, r2
 80013ac:	1844      	adds	r4, r0, r1
 80013ae:	493a      	ldr	r1, [pc, #232]	; (8001498 <HAL_RCC_GetSysClockFreq+0x168>)
 80013b0:	fba2 0101 	umull	r0, r1, r2, r1
 80013b4:	1863      	adds	r3, r4, r1
 80013b6:	4619      	mov	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	461a      	mov	r2, r3
 80013bc:	f04f 0300 	mov.w	r3, #0
 80013c0:	f7fe ff02 	bl	80001c8 <__aeabi_uldivmod>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4613      	mov	r3, r2
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	e04a      	b.n	8001464 <HAL_RCC_GetSysClockFreq+0x134>
>>>>>>> Stashed changes
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< Updated upstream
 8001736:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	099b      	lsrs	r3, r3, #6
 800173c:	461a      	mov	r2, r3
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001746:	f04f 0100 	mov.w	r1, #0
 800174a:	ea02 0400 	and.w	r4, r2, r0
 800174e:	ea03 0501 	and.w	r5, r3, r1
 8001752:	4620      	mov	r0, r4
 8001754:	4629      	mov	r1, r5
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	014b      	lsls	r3, r1, #5
 8001760:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001764:	0142      	lsls	r2, r0, #5
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	1b00      	subs	r0, r0, r4
 800176c:	eb61 0105 	sbc.w	r1, r1, r5
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	018b      	lsls	r3, r1, #6
 800177a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800177e:	0182      	lsls	r2, r0, #6
 8001780:	1a12      	subs	r2, r2, r0
 8001782:	eb63 0301 	sbc.w	r3, r3, r1
 8001786:	f04f 0000 	mov.w	r0, #0
 800178a:	f04f 0100 	mov.w	r1, #0
 800178e:	00d9      	lsls	r1, r3, #3
 8001790:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001794:	00d0      	lsls	r0, r2, #3
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	1912      	adds	r2, r2, r4
 800179c:	eb45 0303 	adc.w	r3, r5, r3
 80017a0:	f04f 0000 	mov.w	r0, #0
 80017a4:	f04f 0100 	mov.w	r1, #0
 80017a8:	0299      	lsls	r1, r3, #10
 80017aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80017ae:	0290      	lsls	r0, r2, #10
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	461a      	mov	r2, r3
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	f7fe fd02 	bl	80001c8 <__aeabi_uldivmod>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4613      	mov	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	0c1b      	lsrs	r3, r3, #16
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	3301      	adds	r3, #1
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e4:	60bb      	str	r3, [r7, #8]
      break;
 80017e6:	e002      	b.n	80017ee <HAL_RCC_GetSysClockFreq+0x156>
=======
 80013ce:	4b30      	ldr	r3, [pc, #192]	; (8001490 <HAL_RCC_GetSysClockFreq+0x160>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	099b      	lsrs	r3, r3, #6
 80013d4:	461a      	mov	r2, r3
 80013d6:	f04f 0300 	mov.w	r3, #0
 80013da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80013de:	f04f 0100 	mov.w	r1, #0
 80013e2:	ea02 0400 	and.w	r4, r2, r0
 80013e6:	ea03 0501 	and.w	r5, r3, r1
 80013ea:	4620      	mov	r0, r4
 80013ec:	4629      	mov	r1, r5
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	f04f 0300 	mov.w	r3, #0
 80013f6:	014b      	lsls	r3, r1, #5
 80013f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80013fc:	0142      	lsls	r2, r0, #5
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	1b00      	subs	r0, r0, r4
 8001404:	eb61 0105 	sbc.w	r1, r1, r5
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	018b      	lsls	r3, r1, #6
 8001412:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001416:	0182      	lsls	r2, r0, #6
 8001418:	1a12      	subs	r2, r2, r0
 800141a:	eb63 0301 	sbc.w	r3, r3, r1
 800141e:	f04f 0000 	mov.w	r0, #0
 8001422:	f04f 0100 	mov.w	r1, #0
 8001426:	00d9      	lsls	r1, r3, #3
 8001428:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800142c:	00d0      	lsls	r0, r2, #3
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	1912      	adds	r2, r2, r4
 8001434:	eb45 0303 	adc.w	r3, r5, r3
 8001438:	f04f 0000 	mov.w	r0, #0
 800143c:	f04f 0100 	mov.w	r1, #0
 8001440:	0299      	lsls	r1, r3, #10
 8001442:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001446:	0290      	lsls	r0, r2, #10
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4610      	mov	r0, r2
 800144e:	4619      	mov	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	461a      	mov	r2, r3
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	f7fe feb6 	bl	80001c8 <__aeabi_uldivmod>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4613      	mov	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <HAL_RCC_GetSysClockFreq+0x160>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	0c1b      	lsrs	r3, r3, #16
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	3301      	adds	r3, #1
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	fbb2 f3f3 	udiv	r3, r2, r3
 800147c:	60bb      	str	r3, [r7, #8]
      break;
 800147e:	e002      	b.n	8001486 <HAL_RCC_GetSysClockFreq+0x156>
>>>>>>> Stashed changes
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< Updated upstream
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <HAL_RCC_GetSysClockFreq+0x164>)
 80017ea:	60bb      	str	r3, [r7, #8]
      break;
 80017ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ee:	68bb      	ldr	r3, [r7, #8]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bdb0      	pop	{r4, r5, r7, pc}
 80017f8:	40023800 	.word	0x40023800
 80017fc:	00f42400 	.word	0x00f42400
 8001800:	017d7840 	.word	0x017d7840

08001804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e041      	b.n	800189a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d106      	bne.n	8001830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff f9d4 	bl	8000bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2202      	movs	r2, #2
 8001834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3304      	adds	r3, #4
 8001840:	4619      	mov	r1, r3
 8001842:	4610      	mov	r0, r2
 8001844:	f000 f9ce 	bl	8001be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d001      	beq.n	80018bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e04e      	b.n	800195a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2202      	movs	r2, #2
 80018c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0201 	orr.w	r2, r2, #1
 80018d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a23      	ldr	r2, [pc, #140]	; (8001968 <HAL_TIM_Base_Start_IT+0xc4>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d022      	beq.n	8001924 <HAL_TIM_Base_Start_IT+0x80>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018e6:	d01d      	beq.n	8001924 <HAL_TIM_Base_Start_IT+0x80>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a1f      	ldr	r2, [pc, #124]	; (800196c <HAL_TIM_Base_Start_IT+0xc8>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d018      	beq.n	8001924 <HAL_TIM_Base_Start_IT+0x80>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a1e      	ldr	r2, [pc, #120]	; (8001970 <HAL_TIM_Base_Start_IT+0xcc>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d013      	beq.n	8001924 <HAL_TIM_Base_Start_IT+0x80>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a1c      	ldr	r2, [pc, #112]	; (8001974 <HAL_TIM_Base_Start_IT+0xd0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d00e      	beq.n	8001924 <HAL_TIM_Base_Start_IT+0x80>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a1b      	ldr	r2, [pc, #108]	; (8001978 <HAL_TIM_Base_Start_IT+0xd4>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d009      	beq.n	8001924 <HAL_TIM_Base_Start_IT+0x80>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a19      	ldr	r2, [pc, #100]	; (800197c <HAL_TIM_Base_Start_IT+0xd8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d004      	beq.n	8001924 <HAL_TIM_Base_Start_IT+0x80>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a18      	ldr	r2, [pc, #96]	; (8001980 <HAL_TIM_Base_Start_IT+0xdc>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d111      	bne.n	8001948 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2b06      	cmp	r3, #6
 8001934:	d010      	beq.n	8001958 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 0201 	orr.w	r2, r2, #1
 8001944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001946:	e007      	b.n	8001958 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0201 	orr.w	r2, r2, #1
 8001956:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40010000 	.word	0x40010000
 800196c:	40000400 	.word	0x40000400
 8001970:	40000800 	.word	0x40000800
 8001974:	40000c00 	.word	0x40000c00
 8001978:	40010400 	.word	0x40010400
 800197c:	40014000 	.word	0x40014000
 8001980:	40001800 	.word	0x40001800

08001984 <HAL_TIM_IRQHandler>:
=======
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <HAL_RCC_GetSysClockFreq+0x164>)
 8001482:	60bb      	str	r3, [r7, #8]
      break;
 8001484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001486:	68bb      	ldr	r3, [r7, #8]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bdb0      	pop	{r4, r5, r7, pc}
 8001490:	40023800 	.word	0x40023800
 8001494:	00f42400 	.word	0x00f42400
 8001498:	017d7840 	.word	0x017d7840

0800149c <HAL_TIM_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b02      	cmp	r3, #2
 8001998:	d122      	bne.n	80019e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d11b      	bne.n	80019e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f06f 0202 	mvn.w	r2, #2
 80019b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_TIM_IRQHandler+0x4a>
=======
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d122      	bne.n	80014f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d11b      	bne.n	80014f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f06f 0202 	mvn.w	r2, #2
 80014c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2201      	movs	r2, #1
 80014ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_TIM_IRQHandler+0x4a>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f8ee 	bl	8001ba8 <HAL_TIM_IC_CaptureCallback>
 80019cc:	e005      	b.n	80019da <HAL_TIM_IRQHandler+0x56>
=======
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 f8ee 	bl	80016c0 <HAL_TIM_IC_CaptureCallback>
 80014e4:	e005      	b.n	80014f2 <HAL_TIM_IRQHandler+0x56>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f8e0 	bl	8001b94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 f8f1 	bl	8001bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	771a      	strb	r2, [r3, #28]
=======
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 f8e0 	bl	80016ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 f8f1 	bl	80016d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< Updated upstream
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d122      	bne.n	8001a34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b04      	cmp	r3, #4
 80019fa:	d11b      	bne.n	8001a34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f06f 0204 	mvn.w	r2, #4
 8001a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2202      	movs	r2, #2
 8001a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_TIM_IRQHandler+0x9e>
=======
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	2b04      	cmp	r3, #4
 8001504:	d122      	bne.n	800154c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	2b04      	cmp	r3, #4
 8001512:	d11b      	bne.n	800154c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f06f 0204 	mvn.w	r2, #4
 800151c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2202      	movs	r2, #2
 8001522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_TIM_IRQHandler+0x9e>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f8c4 	bl	8001ba8 <HAL_TIM_IC_CaptureCallback>
 8001a20:	e005      	b.n	8001a2e <HAL_TIM_IRQHandler+0xaa>
=======
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f8c4 	bl	80016c0 <HAL_TIM_IC_CaptureCallback>
 8001538:	e005      	b.n	8001546 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f8b6 	bl	8001b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f8c7 	bl	8001bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	771a      	strb	r2, [r3, #28]
=======
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 f8b6 	bl	80016ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 f8c7 	bl	80016d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< Updated upstream
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d122      	bne.n	8001a88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d11b      	bne.n	8001a88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f06f 0208 	mvn.w	r2, #8
 8001a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_TIM_IRQHandler+0xf2>
=======
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b08      	cmp	r3, #8
 8001558:	d122      	bne.n	80015a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	2b08      	cmp	r3, #8
 8001566:	d11b      	bne.n	80015a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f06f 0208 	mvn.w	r2, #8
 8001570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2204      	movs	r2, #4
 8001576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_TIM_IRQHandler+0xf2>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 f89a 	bl	8001ba8 <HAL_TIM_IC_CaptureCallback>
 8001a74:	e005      	b.n	8001a82 <HAL_TIM_IRQHandler+0xfe>
=======
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f89a 	bl	80016c0 <HAL_TIM_IC_CaptureCallback>
 800158c:	e005      	b.n	800159a <HAL_TIM_IRQHandler+0xfe>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 f88c 	bl	8001b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f89d 	bl	8001bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	771a      	strb	r2, [r3, #28]
=======
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f88c 	bl	80016ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f89d 	bl	80016d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< Updated upstream
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	2b10      	cmp	r3, #16
 8001a94:	d122      	bne.n	8001adc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	2b10      	cmp	r3, #16
 8001aa2:	d11b      	bne.n	8001adc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f06f 0210 	mvn.w	r2, #16
 8001aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2208      	movs	r2, #8
 8001ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_TIM_IRQHandler+0x146>
=======
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	2b10      	cmp	r3, #16
 80015ac:	d122      	bne.n	80015f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	f003 0310 	and.w	r3, r3, #16
 80015b8:	2b10      	cmp	r3, #16
 80015ba:	d11b      	bne.n	80015f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f06f 0210 	mvn.w	r2, #16
 80015c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2208      	movs	r2, #8
 80015ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_TIM_IRQHandler+0x146>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f870 	bl	8001ba8 <HAL_TIM_IC_CaptureCallback>
 8001ac8:	e005      	b.n	8001ad6 <HAL_TIM_IRQHandler+0x152>
=======
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 f870 	bl	80016c0 <HAL_TIM_IC_CaptureCallback>
 80015e0:	e005      	b.n	80015ee <HAL_TIM_IRQHandler+0x152>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f862 	bl	8001b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f873 	bl	8001bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	771a      	strb	r2, [r3, #28]
=======
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f862 	bl	80016ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 f873 	bl	80016d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< Updated upstream
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d10e      	bne.n	8001b08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d107      	bne.n	8001b08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f06f 0201 	mvn.w	r2, #1
 8001b00:	611a      	str	r2, [r3, #16]
=======
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d10e      	bne.n	8001620 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b01      	cmp	r3, #1
 800160e:	d107      	bne.n	8001620 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f06f 0201 	mvn.w	r2, #1
 8001618:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< Updated upstream
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7fe ff1a 	bl	800093c <HAL_TIM_PeriodElapsedCallback>
=======
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff f8a6 	bl	800076c <HAL_TIM_PeriodElapsedCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< Updated upstream
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b12:	2b80      	cmp	r3, #128	; 0x80
 8001b14:	d10e      	bne.n	8001b34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b20:	2b80      	cmp	r3, #128	; 0x80
 8001b22:	d107      	bne.n	8001b34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b2c:	611a      	str	r2, [r3, #16]
=======
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162a:	2b80      	cmp	r3, #128	; 0x80
 800162c:	d10e      	bne.n	800164c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001638:	2b80      	cmp	r3, #128	; 0x80
 800163a:	d107      	bne.n	800164c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001644:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< Updated upstream
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f97e 	bl	8001e30 <HAL_TIMEx_BreakCallback>
=======
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 f862 	bl	8001710 <HAL_TIMEx_BreakCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< Updated upstream
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b3e:	2b40      	cmp	r3, #64	; 0x40
 8001b40:	d10e      	bne.n	8001b60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4c:	2b40      	cmp	r3, #64	; 0x40
 8001b4e:	d107      	bne.n	8001b60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b58:	611a      	str	r2, [r3, #16]
=======
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001656:	2b40      	cmp	r3, #64	; 0x40
 8001658:	d10e      	bne.n	8001678 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001664:	2b40      	cmp	r3, #64	; 0x40
 8001666:	d107      	bne.n	8001678 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001670:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< Updated upstream
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f838 	bl	8001bd0 <HAL_TIM_TriggerCallback>
=======
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 f838 	bl	80016e8 <HAL_TIM_TriggerCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< Updated upstream
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	f003 0320 	and.w	r3, r3, #32
 8001b6a:	2b20      	cmp	r3, #32
 8001b6c:	d10e      	bne.n	8001b8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f003 0320 	and.w	r3, r3, #32
 8001b78:	2b20      	cmp	r3, #32
 8001b7a:	d107      	bne.n	8001b8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f06f 0220 	mvn.w	r2, #32
 8001b84:	611a      	str	r2, [r3, #16]
=======
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	f003 0320 	and.w	r3, r3, #32
 8001682:	2b20      	cmp	r3, #32
 8001684:	d10e      	bne.n	80016a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	f003 0320 	and.w	r3, r3, #32
 8001690:	2b20      	cmp	r3, #32
 8001692:	d107      	bne.n	80016a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f06f 0220 	mvn.w	r2, #32
 800169c:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< Updated upstream
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f948 	bl	8001e1c <HAL_TIMEx_CommutCallback>
=======
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f82c 	bl	80016fc <HAL_TIMEx_CommutCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< Updated upstream
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> Stashed changes
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
=======
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_TIM_IC_CaptureCallback>:
=======
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> Stashed changes
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
=======
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> Stashed changes
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
=======
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_TIM_TriggerCallback>:
=======
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_TIM_TriggerCallback>:
>>>>>>> Stashed changes
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
=======
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a40      	ldr	r2, [pc, #256]	; (8001cf8 <TIM_Base_SetConfig+0x114>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d013      	beq.n	8001c24 <TIM_Base_SetConfig+0x40>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c02:	d00f      	beq.n	8001c24 <TIM_Base_SetConfig+0x40>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a3d      	ldr	r2, [pc, #244]	; (8001cfc <TIM_Base_SetConfig+0x118>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d00b      	beq.n	8001c24 <TIM_Base_SetConfig+0x40>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a3c      	ldr	r2, [pc, #240]	; (8001d00 <TIM_Base_SetConfig+0x11c>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d007      	beq.n	8001c24 <TIM_Base_SetConfig+0x40>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a3b      	ldr	r2, [pc, #236]	; (8001d04 <TIM_Base_SetConfig+0x120>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d003      	beq.n	8001c24 <TIM_Base_SetConfig+0x40>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a3a      	ldr	r2, [pc, #232]	; (8001d08 <TIM_Base_SetConfig+0x124>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d108      	bne.n	8001c36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a2f      	ldr	r2, [pc, #188]	; (8001cf8 <TIM_Base_SetConfig+0x114>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d02b      	beq.n	8001c96 <TIM_Base_SetConfig+0xb2>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c44:	d027      	beq.n	8001c96 <TIM_Base_SetConfig+0xb2>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a2c      	ldr	r2, [pc, #176]	; (8001cfc <TIM_Base_SetConfig+0x118>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d023      	beq.n	8001c96 <TIM_Base_SetConfig+0xb2>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a2b      	ldr	r2, [pc, #172]	; (8001d00 <TIM_Base_SetConfig+0x11c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d01f      	beq.n	8001c96 <TIM_Base_SetConfig+0xb2>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a2a      	ldr	r2, [pc, #168]	; (8001d04 <TIM_Base_SetConfig+0x120>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d01b      	beq.n	8001c96 <TIM_Base_SetConfig+0xb2>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a29      	ldr	r2, [pc, #164]	; (8001d08 <TIM_Base_SetConfig+0x124>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d017      	beq.n	8001c96 <TIM_Base_SetConfig+0xb2>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a28      	ldr	r2, [pc, #160]	; (8001d0c <TIM_Base_SetConfig+0x128>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d013      	beq.n	8001c96 <TIM_Base_SetConfig+0xb2>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a27      	ldr	r2, [pc, #156]	; (8001d10 <TIM_Base_SetConfig+0x12c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d00f      	beq.n	8001c96 <TIM_Base_SetConfig+0xb2>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a26      	ldr	r2, [pc, #152]	; (8001d14 <TIM_Base_SetConfig+0x130>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00b      	beq.n	8001c96 <TIM_Base_SetConfig+0xb2>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a25      	ldr	r2, [pc, #148]	; (8001d18 <TIM_Base_SetConfig+0x134>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d007      	beq.n	8001c96 <TIM_Base_SetConfig+0xb2>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a24      	ldr	r2, [pc, #144]	; (8001d1c <TIM_Base_SetConfig+0x138>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d003      	beq.n	8001c96 <TIM_Base_SetConfig+0xb2>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a23      	ldr	r2, [pc, #140]	; (8001d20 <TIM_Base_SetConfig+0x13c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d108      	bne.n	8001ca8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <TIM_Base_SetConfig+0x114>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d003      	beq.n	8001cdc <TIM_Base_SetConfig+0xf8>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a0c      	ldr	r2, [pc, #48]	; (8001d08 <TIM_Base_SetConfig+0x124>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d103      	bne.n	8001ce4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	615a      	str	r2, [r3, #20]
}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40010000 	.word	0x40010000
 8001cfc:	40000400 	.word	0x40000400
 8001d00:	40000800 	.word	0x40000800
 8001d04:	40000c00 	.word	0x40000c00
 8001d08:	40010400 	.word	0x40010400
 8001d0c:	40014000 	.word	0x40014000
 8001d10:	40014400 	.word	0x40014400
 8001d14:	40014800 	.word	0x40014800
 8001d18:	40001800 	.word	0x40001800
 8001d1c:	40001c00 	.word	0x40001c00
 8001d20:	40002000 	.word	0x40002000

08001d24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e05a      	b.n	8001df2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2202      	movs	r2, #2
 8001d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a21      	ldr	r2, [pc, #132]	; (8001e00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d022      	beq.n	8001dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d88:	d01d      	beq.n	8001dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1d      	ldr	r2, [pc, #116]	; (8001e04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d018      	beq.n	8001dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a1b      	ldr	r2, [pc, #108]	; (8001e08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d013      	beq.n	8001dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a1a      	ldr	r2, [pc, #104]	; (8001e0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d00e      	beq.n	8001dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a18      	ldr	r2, [pc, #96]	; (8001e10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d009      	beq.n	8001dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a17      	ldr	r2, [pc, #92]	; (8001e14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d004      	beq.n	8001dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a15      	ldr	r2, [pc, #84]	; (8001e18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d10c      	bne.n	8001de0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68ba      	ldr	r2, [r7, #8]
 8001dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40010000 	.word	0x40010000
 8001e04:	40000400 	.word	0x40000400
 8001e08:	40000800 	.word	0x40000800
 8001e0c:	40000c00 	.word	0x40000c00
 8001e10:	40010400 	.word	0x40010400
 8001e14:	40014000 	.word	0x40014000
 8001e18:	40001800 	.word	0x40001800

08001e1c <HAL_TIMEx_CommutCallback>:
=======
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_TIMEx_CommutCallback>:
>>>>>>> Stashed changes
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
=======
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_TIMEx_BreakCallback>:
=======
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_TIMEx_BreakCallback>:
>>>>>>> Stashed changes
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
=======
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <_ZN9Timer_PWMC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj>:
=======
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <_ZN5TimerC1EP17TIM_HandleTypeDefP11TIM_TypeDefhjj>:
>>>>>>> Stashed changes
 *      Author: Xunguo Zhu
 */
#include "tim.h"
#include "TIMER.hpp"

<<<<<<< Updated upstream
Timer_PWM::Timer_PWM(TIM_HandleTypeDef *tim, TIM_TypeDef *Tim_Num, u16 arr, u16 pcs)
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	603b      	str	r3, [r7, #0]
{
	this->arr = arr;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	601a      	str	r2, [r3, #0]
	this->pcs = pcs;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6a3a      	ldr	r2, [r7, #32]
 8001e5c:	605a      	str	r2, [r3, #4]
	this->tim = tim;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	609a      	str	r2, [r3, #8]
	this->tim->Instance = Tim_Num;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	601a      	str	r2, [r3, #0]

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e6c:	f107 0310 	add.w	r3, r7, #16
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
	this->tim->Init.Prescaler = this->pcs;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	6852      	ldr	r2, [r2, #4]
 8001e7e:	605a      	str	r2, [r3, #4]
	this->tim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
	this->tim->Init.Period = this->arr;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	60da      	str	r2, [r3, #12]
	this->tim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2280      	movs	r2, #128	; 0x80
 8001e98:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(this->tim) != HAL_OK)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fcb0 	bl	8001804 <HAL_TIM_Base_Init>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	bf14      	ite	ne
 8001eaa:	2301      	movne	r3, #1
 8001eac:	2300      	moveq	r3, #0
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <_ZN9Timer_PWMC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj+0x74>
	{
	Error_Handler();
 8001eb4:	f7fe fd5a 	bl	800096c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ec0:	f107 0310 	add.w	r3, r7, #16
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	480b      	ldr	r0, [pc, #44]	; (8001ef4 <_ZN9Timer_PWMC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj+0xb0>)
 8001ec8:	f7ff ff2c 	bl	8001d24 <HAL_TIMEx_MasterConfigSynchronization>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	bf14      	ite	ne
 8001ed2:	2301      	movne	r3, #1
 8001ed4:	2300      	moveq	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <_ZN9Timer_PWMC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj+0x9c>
	{
	Error_Handler();
 8001edc:	f7fe fd46 	bl	800096c <Error_Handler>
	}
	HAL_TIM_Base_Start_IT(this->tim);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fcdd 	bl	80018a4 <HAL_TIM_Base_Start_IT>
}
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	200000f0 	.word	0x200000f0

08001ef8 <_ZN9Timer_PWM7PWM_OutEhj>:
=======
Timer::Timer(TIM_HandleTypeDef *tim, TIM_TypeDef *Tim_Num, u8 mode, u16 arr, u16 pcs)
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	70fb      	strb	r3, [r7, #3]
{
	this->arr = arr;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	609a      	str	r2, [r3, #8]
	this->pcs = pcs;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	60da      	str	r2, [r3, #12]
	this->tim = tim;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	615a      	str	r2, [r3, #20]
	this->tim->Instance = Tim_Num;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	601a      	str	r2, [r3, #0]
}
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4618      	mov	r0, r3
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <_ZN5Timer7PWM_OutEhj>:
	  HAL_TIM_PWM_Start(this->tim, TIM_CHANNEL_4);
	  return Init_Success;
}

void Timer::PWM_Out(u8 n, u16 pwm)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	460b      	mov	r3, r1
 8001766:	607a      	str	r2, [r7, #4]
 8001768:	72fb      	strb	r3, [r7, #11]
	this->pwm = pwm;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	611a      	str	r2, [r3, #16]
	switch(n){
 8001770:	7afb      	ldrb	r3, [r7, #11]
 8001772:	3b01      	subs	r3, #1
 8001774:	2b03      	cmp	r3, #3
 8001776:	d827      	bhi.n	80017c8 <_ZN5Timer7PWM_OutEhj+0x6c>
 8001778:	a201      	add	r2, pc, #4	; (adr r2, 8001780 <_ZN5Timer7PWM_OutEhj+0x24>)
 800177a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177e:	bf00      	nop
 8001780:	08001791 	.word	0x08001791
 8001784:	0800179f 	.word	0x0800179f
 8001788:	080017ad 	.word	0x080017ad
 800178c:	080017bb 	.word	0x080017bb
	case 1:
		__HAL_TIM_SET_COMPARE(this->tim, TIM_CHANNEL_1, this->pwm);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	6912      	ldr	r2, [r2, #16]
 800179a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800179c:	e014      	b.n	80017c8 <_ZN5Timer7PWM_OutEhj+0x6c>
	case 2:
		__HAL_TIM_SET_COMPARE(this->tim, TIM_CHANNEL_2, this->pwm);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	6912      	ldr	r2, [r2, #16]
 80017a8:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80017aa:	e00d      	b.n	80017c8 <_ZN5Timer7PWM_OutEhj+0x6c>
	case 3:
		__HAL_TIM_SET_COMPARE(this->tim, TIM_CHANNEL_3, this->pwm);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	6912      	ldr	r2, [r2, #16]
 80017b6:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80017b8:	e006      	b.n	80017c8 <_ZN5Timer7PWM_OutEhj+0x6c>
	case 4:
		__HAL_TIM_SET_COMPARE(this->tim, TIM_CHANNEL_4, this->pwm);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	6912      	ldr	r2, [r2, #16]
 80017c4:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80017c6:	bf00      	nop
	}
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <_ZN5Timer15Timer_InterruptEv>:
	HAL_TIM_Base_Start_IT(this->tim);
	return Init_Success;
}
>>>>>>> Stashed changes

void Timer_PWM::PWM_Out(u8 n, u16 pwm)
{
<<<<<<< Updated upstream
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	460b      	mov	r3, r1
 8001f02:	607a      	str	r2, [r7, #4]
 8001f04:	72fb      	strb	r3, [r7, #11]
	this->pwm = pwm;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	60da      	str	r2, [r3, #12]
	switch(n){
 8001f0c:	7afb      	ldrb	r3, [r7, #11]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d827      	bhi.n	8001f64 <_ZN9Timer_PWM7PWM_OutEhj+0x6c>
 8001f14:	a201      	add	r2, pc, #4	; (adr r2, 8001f1c <_ZN9Timer_PWM7PWM_OutEhj+0x24>)
 8001f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1a:	bf00      	nop
 8001f1c:	08001f2d 	.word	0x08001f2d
 8001f20:	08001f3b 	.word	0x08001f3b
 8001f24:	08001f49 	.word	0x08001f49
 8001f28:	08001f57 	.word	0x08001f57
	case 1:
		__HAL_TIM_SET_COMPARE(this->tim, TIM_CHANNEL_1, this->pwm);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	68d2      	ldr	r2, [r2, #12]
 8001f36:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001f38:	e014      	b.n	8001f64 <_ZN9Timer_PWM7PWM_OutEhj+0x6c>
	case 2:
		__HAL_TIM_SET_COMPARE(this->tim, TIM_CHANNEL_2, this->pwm);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	68d2      	ldr	r2, [r2, #12]
 8001f44:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001f46:	e00d      	b.n	8001f64 <_ZN9Timer_PWM7PWM_OutEhj+0x6c>
	case 3:
		__HAL_TIM_SET_COMPARE(this->tim, TIM_CHANNEL_3, this->pwm);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	68d2      	ldr	r2, [r2, #12]
 8001f52:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8001f54:	e006      	b.n	8001f64 <_ZN9Timer_PWM7PWM_OutEhj+0x6c>
	case 4:
		__HAL_TIM_SET_COMPARE(this->tim, TIM_CHANNEL_4, this->pwm);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	68d2      	ldr	r2, [r2, #12]
 8001f60:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8001f62:	bf00      	nop
=======
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	this->count_1ms++;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	7e1b      	ldrb	r3, [r3, #24]
 80017e0:	3301      	adds	r3, #1
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	761a      	strb	r2, [r3, #24]
	this->count_2ms++;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7e5b      	ldrb	r3, [r3, #25]
 80017ec:	3301      	adds	r3, #1
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	765a      	strb	r2, [r3, #25]
	this->count_5ms++;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7e9b      	ldrb	r3, [r3, #26]
 80017f8:	3301      	adds	r3, #1
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	769a      	strb	r2, [r3, #26]
	this->count_10ms++;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	7edb      	ldrb	r3, [r3, #27]
 8001804:	3301      	adds	r3, #1
 8001806:	b2da      	uxtb	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	76da      	strb	r2, [r3, #27]
	this->count_100ms++;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	7f1b      	ldrb	r3, [r3, #28]
 8001810:	3301      	adds	r3, #1
 8001812:	b2da      	uxtb	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	771a      	strb	r2, [r3, #28]
	this->count_1s++;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	1c5a      	adds	r2, r3, #1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	621a      	str	r2, [r3, #32]
	if(this->count_1ms >= 1){
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	7e1b      	ldrb	r3, [r3, #24]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d005      	beq.n	8001836 <_ZN5Timer15Timer_InterruptEv+0x62>
		this->fre_1000hz = 1;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	701a      	strb	r2, [r3, #0]
		this->count_1ms = 0;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	761a      	strb	r2, [r3, #24]
	}
	if(this->count_2ms >= 2){
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	7e5b      	ldrb	r3, [r3, #25]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d905      	bls.n	800184a <_ZN5Timer15Timer_InterruptEv+0x76>
		this->fre_500hz = 1;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	705a      	strb	r2, [r3, #1]
		this->count_2ms = 0;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	765a      	strb	r2, [r3, #25]
	}
	if(this->count_5ms >= 5){
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	7e9b      	ldrb	r3, [r3, #26]
 800184e:	2b04      	cmp	r3, #4
 8001850:	d905      	bls.n	800185e <_ZN5Timer15Timer_InterruptEv+0x8a>
		this->fre_200hz = 1;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	709a      	strb	r2, [r3, #2]
		this->count_5ms = 0;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	769a      	strb	r2, [r3, #26]
	}
	if(this->count_10ms >= 10){
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	7edb      	ldrb	r3, [r3, #27]
 8001862:	2b09      	cmp	r3, #9
 8001864:	d905      	bls.n	8001872 <_ZN5Timer15Timer_InterruptEv+0x9e>
		this->fre_100hz = 1;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	70da      	strb	r2, [r3, #3]
		this->count_10ms = 0;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	76da      	strb	r2, [r3, #27]
	}
	if(this->count_100ms >= 100){
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	7f1b      	ldrb	r3, [r3, #28]
 8001876:	2b63      	cmp	r3, #99	; 0x63
 8001878:	d905      	bls.n	8001886 <_ZN5Timer15Timer_InterruptEv+0xb2>
		this->fre_10hz = 1;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	711a      	strb	r2, [r3, #4]
		this->count_100ms = 0;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	771a      	strb	r2, [r3, #28]
	}
	if(this->count_1s >= 1000){
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800188e:	d305      	bcc.n	800189c <_ZN5Timer15Timer_InterruptEv+0xc8>
		this->fre_1hz = 1;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	715a      	strb	r2, [r3, #5]
		this->count_1s = 0;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
	}
}
<<<<<<< Updated upstream
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <_Znwj>:
 8001f70:	2801      	cmp	r0, #1
 8001f72:	bf38      	it	cc
 8001f74:	2001      	movcc	r0, #1
 8001f76:	b510      	push	{r4, lr}
 8001f78:	4604      	mov	r4, r0
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	f000 f844 	bl	8002008 <malloc>
 8001f80:	b930      	cbnz	r0, 8001f90 <_Znwj+0x20>
 8001f82:	f000 f807 	bl	8001f94 <_ZSt15get_new_handlerv>
 8001f86:	b908      	cbnz	r0, 8001f8c <_Znwj+0x1c>
 8001f88:	f000 f80c 	bl	8001fa4 <abort>
 8001f8c:	4780      	blx	r0
 8001f8e:	e7f4      	b.n	8001f7a <_Znwj+0xa>
 8001f90:	bd10      	pop	{r4, pc}
	...

08001f94 <_ZSt15get_new_handlerv>:
 8001f94:	4b02      	ldr	r3, [pc, #8]	; (8001fa0 <_ZSt15get_new_handlerv+0xc>)
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	f3bf 8f5b 	dmb	ish
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	2000009c 	.word	0x2000009c

08001fa4 <abort>:
 8001fa4:	b508      	push	{r3, lr}
 8001fa6:	2006      	movs	r0, #6
 8001fa8:	f000 f8d0 	bl	800214c <raise>
 8001fac:	2001      	movs	r0, #1
 8001fae:	f7fe fdc1 	bl	8000b34 <_exit>
	...

08001fb4 <__errno>:
 8001fb4:	4b01      	ldr	r3, [pc, #4]	; (8001fbc <__errno+0x8>)
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	2000000c 	.word	0x2000000c

08001fc0 <__libc_init_array>:
 8001fc0:	b570      	push	{r4, r5, r6, lr}
 8001fc2:	4d0d      	ldr	r5, [pc, #52]	; (8001ff8 <__libc_init_array+0x38>)
 8001fc4:	4c0d      	ldr	r4, [pc, #52]	; (8001ffc <__libc_init_array+0x3c>)
 8001fc6:	1b64      	subs	r4, r4, r5
 8001fc8:	10a4      	asrs	r4, r4, #2
 8001fca:	2600      	movs	r6, #0
 8001fcc:	42a6      	cmp	r6, r4
 8001fce:	d109      	bne.n	8001fe4 <__libc_init_array+0x24>
 8001fd0:	4d0b      	ldr	r5, [pc, #44]	; (8002000 <__libc_init_array+0x40>)
 8001fd2:	4c0c      	ldr	r4, [pc, #48]	; (8002004 <__libc_init_array+0x44>)
 8001fd4:	f000 f8e4 	bl	80021a0 <_init>
 8001fd8:	1b64      	subs	r4, r4, r5
 8001fda:	10a4      	asrs	r4, r4, #2
 8001fdc:	2600      	movs	r6, #0
 8001fde:	42a6      	cmp	r6, r4
 8001fe0:	d105      	bne.n	8001fee <__libc_init_array+0x2e>
 8001fe2:	bd70      	pop	{r4, r5, r6, pc}
 8001fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fe8:	4798      	blx	r3
 8001fea:	3601      	adds	r6, #1
 8001fec:	e7ee      	b.n	8001fcc <__libc_init_array+0xc>
 8001fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ff2:	4798      	blx	r3
 8001ff4:	3601      	adds	r6, #1
 8001ff6:	e7f2      	b.n	8001fde <__libc_init_array+0x1e>
 8001ff8:	080021d0 	.word	0x080021d0
 8001ffc:	080021d0 	.word	0x080021d0
 8002000:	080021d0 	.word	0x080021d0
 8002004:	080021d8 	.word	0x080021d8

08002008 <malloc>:
 8002008:	4b02      	ldr	r3, [pc, #8]	; (8002014 <malloc+0xc>)
 800200a:	4601      	mov	r1, r0
 800200c:	6818      	ldr	r0, [r3, #0]
 800200e:	f000 b80b 	b.w	8002028 <_malloc_r>
 8002012:	bf00      	nop
 8002014:	2000000c 	.word	0x2000000c

08002018 <memset>:
 8002018:	4402      	add	r2, r0
 800201a:	4603      	mov	r3, r0
 800201c:	4293      	cmp	r3, r2
 800201e:	d100      	bne.n	8002022 <memset+0xa>
 8002020:	4770      	bx	lr
 8002022:	f803 1b01 	strb.w	r1, [r3], #1
 8002026:	e7f9      	b.n	800201c <memset+0x4>

08002028 <_malloc_r>:
 8002028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800202a:	1ccd      	adds	r5, r1, #3
 800202c:	f025 0503 	bic.w	r5, r5, #3
 8002030:	3508      	adds	r5, #8
 8002032:	2d0c      	cmp	r5, #12
 8002034:	bf38      	it	cc
 8002036:	250c      	movcc	r5, #12
 8002038:	2d00      	cmp	r5, #0
 800203a:	4606      	mov	r6, r0
 800203c:	db01      	blt.n	8002042 <_malloc_r+0x1a>
 800203e:	42a9      	cmp	r1, r5
 8002040:	d903      	bls.n	800204a <_malloc_r+0x22>
 8002042:	230c      	movs	r3, #12
 8002044:	6033      	str	r3, [r6, #0]
 8002046:	2000      	movs	r0, #0
 8002048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800204a:	f000 f89b 	bl	8002184 <__malloc_lock>
 800204e:	4921      	ldr	r1, [pc, #132]	; (80020d4 <_malloc_r+0xac>)
 8002050:	680a      	ldr	r2, [r1, #0]
 8002052:	4614      	mov	r4, r2
 8002054:	b99c      	cbnz	r4, 800207e <_malloc_r+0x56>
 8002056:	4f20      	ldr	r7, [pc, #128]	; (80020d8 <_malloc_r+0xb0>)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	b923      	cbnz	r3, 8002066 <_malloc_r+0x3e>
 800205c:	4621      	mov	r1, r4
 800205e:	4630      	mov	r0, r6
 8002060:	f000 f83c 	bl	80020dc <_sbrk_r>
 8002064:	6038      	str	r0, [r7, #0]
 8002066:	4629      	mov	r1, r5
 8002068:	4630      	mov	r0, r6
 800206a:	f000 f837 	bl	80020dc <_sbrk_r>
 800206e:	1c43      	adds	r3, r0, #1
 8002070:	d123      	bne.n	80020ba <_malloc_r+0x92>
 8002072:	230c      	movs	r3, #12
 8002074:	6033      	str	r3, [r6, #0]
 8002076:	4630      	mov	r0, r6
 8002078:	f000 f88a 	bl	8002190 <__malloc_unlock>
 800207c:	e7e3      	b.n	8002046 <_malloc_r+0x1e>
 800207e:	6823      	ldr	r3, [r4, #0]
 8002080:	1b5b      	subs	r3, r3, r5
 8002082:	d417      	bmi.n	80020b4 <_malloc_r+0x8c>
 8002084:	2b0b      	cmp	r3, #11
 8002086:	d903      	bls.n	8002090 <_malloc_r+0x68>
 8002088:	6023      	str	r3, [r4, #0]
 800208a:	441c      	add	r4, r3
 800208c:	6025      	str	r5, [r4, #0]
 800208e:	e004      	b.n	800209a <_malloc_r+0x72>
 8002090:	6863      	ldr	r3, [r4, #4]
 8002092:	42a2      	cmp	r2, r4
 8002094:	bf0c      	ite	eq
 8002096:	600b      	streq	r3, [r1, #0]
 8002098:	6053      	strne	r3, [r2, #4]
 800209a:	4630      	mov	r0, r6
 800209c:	f000 f878 	bl	8002190 <__malloc_unlock>
 80020a0:	f104 000b 	add.w	r0, r4, #11
 80020a4:	1d23      	adds	r3, r4, #4
 80020a6:	f020 0007 	bic.w	r0, r0, #7
 80020aa:	1ac2      	subs	r2, r0, r3
 80020ac:	d0cc      	beq.n	8002048 <_malloc_r+0x20>
 80020ae:	1a1b      	subs	r3, r3, r0
 80020b0:	50a3      	str	r3, [r4, r2]
 80020b2:	e7c9      	b.n	8002048 <_malloc_r+0x20>
 80020b4:	4622      	mov	r2, r4
 80020b6:	6864      	ldr	r4, [r4, #4]
 80020b8:	e7cc      	b.n	8002054 <_malloc_r+0x2c>
 80020ba:	1cc4      	adds	r4, r0, #3
 80020bc:	f024 0403 	bic.w	r4, r4, #3
 80020c0:	42a0      	cmp	r0, r4
 80020c2:	d0e3      	beq.n	800208c <_malloc_r+0x64>
 80020c4:	1a21      	subs	r1, r4, r0
 80020c6:	4630      	mov	r0, r6
 80020c8:	f000 f808 	bl	80020dc <_sbrk_r>
 80020cc:	3001      	adds	r0, #1
 80020ce:	d1dd      	bne.n	800208c <_malloc_r+0x64>
 80020d0:	e7cf      	b.n	8002072 <_malloc_r+0x4a>
 80020d2:	bf00      	nop
 80020d4:	200000a0 	.word	0x200000a0
 80020d8:	200000a4 	.word	0x200000a4

080020dc <_sbrk_r>:
 80020dc:	b538      	push	{r3, r4, r5, lr}
 80020de:	4d06      	ldr	r5, [pc, #24]	; (80020f8 <_sbrk_r+0x1c>)
 80020e0:	2300      	movs	r3, #0
 80020e2:	4604      	mov	r4, r0
 80020e4:	4608      	mov	r0, r1
 80020e6:	602b      	str	r3, [r5, #0]
 80020e8:	f7fe fd2e 	bl	8000b48 <_sbrk>
 80020ec:	1c43      	adds	r3, r0, #1
 80020ee:	d102      	bne.n	80020f6 <_sbrk_r+0x1a>
 80020f0:	682b      	ldr	r3, [r5, #0]
 80020f2:	b103      	cbz	r3, 80020f6 <_sbrk_r+0x1a>
 80020f4:	6023      	str	r3, [r4, #0]
 80020f6:	bd38      	pop	{r3, r4, r5, pc}
 80020f8:	20000184 	.word	0x20000184

080020fc <_raise_r>:
 80020fc:	291f      	cmp	r1, #31
 80020fe:	b538      	push	{r3, r4, r5, lr}
 8002100:	4604      	mov	r4, r0
 8002102:	460d      	mov	r5, r1
 8002104:	d904      	bls.n	8002110 <_raise_r+0x14>
 8002106:	2316      	movs	r3, #22
 8002108:	6003      	str	r3, [r0, #0]
 800210a:	f04f 30ff 	mov.w	r0, #4294967295
 800210e:	bd38      	pop	{r3, r4, r5, pc}
 8002110:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002112:	b112      	cbz	r2, 800211a <_raise_r+0x1e>
 8002114:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002118:	b94b      	cbnz	r3, 800212e <_raise_r+0x32>
 800211a:	4620      	mov	r0, r4
 800211c:	f000 f830 	bl	8002180 <_getpid_r>
 8002120:	462a      	mov	r2, r5
 8002122:	4601      	mov	r1, r0
 8002124:	4620      	mov	r0, r4
 8002126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800212a:	f000 b817 	b.w	800215c <_kill_r>
 800212e:	2b01      	cmp	r3, #1
 8002130:	d00a      	beq.n	8002148 <_raise_r+0x4c>
 8002132:	1c59      	adds	r1, r3, #1
 8002134:	d103      	bne.n	800213e <_raise_r+0x42>
 8002136:	2316      	movs	r3, #22
 8002138:	6003      	str	r3, [r0, #0]
 800213a:	2001      	movs	r0, #1
 800213c:	e7e7      	b.n	800210e <_raise_r+0x12>
 800213e:	2400      	movs	r4, #0
 8002140:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002144:	4628      	mov	r0, r5
 8002146:	4798      	blx	r3
 8002148:	2000      	movs	r0, #0
 800214a:	e7e0      	b.n	800210e <_raise_r+0x12>

0800214c <raise>:
 800214c:	4b02      	ldr	r3, [pc, #8]	; (8002158 <raise+0xc>)
 800214e:	4601      	mov	r1, r0
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	f7ff bfd3 	b.w	80020fc <_raise_r>
 8002156:	bf00      	nop
 8002158:	2000000c 	.word	0x2000000c

0800215c <_kill_r>:
 800215c:	b538      	push	{r3, r4, r5, lr}
 800215e:	4d07      	ldr	r5, [pc, #28]	; (800217c <_kill_r+0x20>)
 8002160:	2300      	movs	r3, #0
 8002162:	4604      	mov	r4, r0
 8002164:	4608      	mov	r0, r1
 8002166:	4611      	mov	r1, r2
 8002168:	602b      	str	r3, [r5, #0]
 800216a:	f7fe fcd3 	bl	8000b14 <_kill>
 800216e:	1c43      	adds	r3, r0, #1
 8002170:	d102      	bne.n	8002178 <_kill_r+0x1c>
 8002172:	682b      	ldr	r3, [r5, #0]
 8002174:	b103      	cbz	r3, 8002178 <_kill_r+0x1c>
 8002176:	6023      	str	r3, [r4, #0]
 8002178:	bd38      	pop	{r3, r4, r5, pc}
 800217a:	bf00      	nop
 800217c:	20000184 	.word	0x20000184

08002180 <_getpid_r>:
 8002180:	f7fe bcc0 	b.w	8000b04 <_getpid>

08002184 <__malloc_lock>:
 8002184:	4801      	ldr	r0, [pc, #4]	; (800218c <__malloc_lock+0x8>)
 8002186:	f000 b809 	b.w	800219c <__retarget_lock_acquire_recursive>
 800218a:	bf00      	nop
 800218c:	2000018c 	.word	0x2000018c

08002190 <__malloc_unlock>:
 8002190:	4801      	ldr	r0, [pc, #4]	; (8002198 <__malloc_unlock+0x8>)
 8002192:	f000 b804 	b.w	800219e <__retarget_lock_release_recursive>
 8002196:	bf00      	nop
 8002198:	2000018c 	.word	0x2000018c

0800219c <__retarget_lock_acquire_recursive>:
 800219c:	4770      	bx	lr

0800219e <__retarget_lock_release_recursive>:
 800219e:	4770      	bx	lr

080021a0 <_init>:
 80021a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021a2:	bf00      	nop
 80021a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021a6:	bc08      	pop	{r3}
 80021a8:	469e      	mov	lr, r3
 80021aa:	4770      	bx	lr

080021ac <_fini>:
 80021ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ae:	bf00      	nop
 80021b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021b2:	bc08      	pop	{r3}
 80021b4:	469e      	mov	lr, r3
 80021b6:	4770      	bx	lr
=======
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <_ZN5TimerD1Ev>:


Timer::~Timer()
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
{
	delete this;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d006      	beq.n	80018c4 <_ZN5TimerD1Ev+0x1c>
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff fff6 	bl	80018a8 <_ZN5TimerD1Ev>
 80018bc:	2124      	movs	r1, #36	; 0x24
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f805 	bl	80018ce <_ZdlPvj>
}
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <_ZdlPvj>:
 80018ce:	f000 b800 	b.w	80018d2 <_ZdlPv>

080018d2 <_ZdlPv>:
 80018d2:	f000 b825 	b.w	8001920 <free>
	...

080018d8 <__libc_init_array>:
 80018d8:	b570      	push	{r4, r5, r6, lr}
 80018da:	4d0d      	ldr	r5, [pc, #52]	; (8001910 <__libc_init_array+0x38>)
 80018dc:	4c0d      	ldr	r4, [pc, #52]	; (8001914 <__libc_init_array+0x3c>)
 80018de:	1b64      	subs	r4, r4, r5
 80018e0:	10a4      	asrs	r4, r4, #2
 80018e2:	2600      	movs	r6, #0
 80018e4:	42a6      	cmp	r6, r4
 80018e6:	d109      	bne.n	80018fc <__libc_init_array+0x24>
 80018e8:	4d0b      	ldr	r5, [pc, #44]	; (8001918 <__libc_init_array+0x40>)
 80018ea:	4c0c      	ldr	r4, [pc, #48]	; (800191c <__libc_init_array+0x44>)
 80018ec:	f000 f886 	bl	80019fc <_init>
 80018f0:	1b64      	subs	r4, r4, r5
 80018f2:	10a4      	asrs	r4, r4, #2
 80018f4:	2600      	movs	r6, #0
 80018f6:	42a6      	cmp	r6, r4
 80018f8:	d105      	bne.n	8001906 <__libc_init_array+0x2e>
 80018fa:	bd70      	pop	{r4, r5, r6, pc}
 80018fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001900:	4798      	blx	r3
 8001902:	3601      	adds	r6, #1
 8001904:	e7ee      	b.n	80018e4 <__libc_init_array+0xc>
 8001906:	f855 3b04 	ldr.w	r3, [r5], #4
 800190a:	4798      	blx	r3
 800190c:	3601      	adds	r6, #1
 800190e:	e7f2      	b.n	80018f6 <__libc_init_array+0x1e>
 8001910:	08001a2c 	.word	0x08001a2c
 8001914:	08001a2c 	.word	0x08001a2c
 8001918:	08001a2c 	.word	0x08001a2c
 800191c:	08001a34 	.word	0x08001a34

08001920 <free>:
 8001920:	4b02      	ldr	r3, [pc, #8]	; (800192c <free+0xc>)
 8001922:	4601      	mov	r1, r0
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	f000 b80b 	b.w	8001940 <_free_r>
 800192a:	bf00      	nop
 800192c:	2000000c 	.word	0x2000000c

08001930 <memset>:
 8001930:	4402      	add	r2, r0
 8001932:	4603      	mov	r3, r0
 8001934:	4293      	cmp	r3, r2
 8001936:	d100      	bne.n	800193a <memset+0xa>
 8001938:	4770      	bx	lr
 800193a:	f803 1b01 	strb.w	r1, [r3], #1
 800193e:	e7f9      	b.n	8001934 <memset+0x4>

08001940 <_free_r>:
 8001940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001942:	2900      	cmp	r1, #0
 8001944:	d048      	beq.n	80019d8 <_free_r+0x98>
 8001946:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800194a:	9001      	str	r0, [sp, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	f1a1 0404 	sub.w	r4, r1, #4
 8001952:	bfb8      	it	lt
 8001954:	18e4      	addlt	r4, r4, r3
 8001956:	f000 f843 	bl	80019e0 <__malloc_lock>
 800195a:	4a20      	ldr	r2, [pc, #128]	; (80019dc <_free_r+0x9c>)
 800195c:	9801      	ldr	r0, [sp, #4]
 800195e:	6813      	ldr	r3, [r2, #0]
 8001960:	4615      	mov	r5, r2
 8001962:	b933      	cbnz	r3, 8001972 <_free_r+0x32>
 8001964:	6063      	str	r3, [r4, #4]
 8001966:	6014      	str	r4, [r2, #0]
 8001968:	b003      	add	sp, #12
 800196a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800196e:	f000 b83d 	b.w	80019ec <__malloc_unlock>
 8001972:	42a3      	cmp	r3, r4
 8001974:	d90b      	bls.n	800198e <_free_r+0x4e>
 8001976:	6821      	ldr	r1, [r4, #0]
 8001978:	1862      	adds	r2, r4, r1
 800197a:	4293      	cmp	r3, r2
 800197c:	bf04      	itt	eq
 800197e:	681a      	ldreq	r2, [r3, #0]
 8001980:	685b      	ldreq	r3, [r3, #4]
 8001982:	6063      	str	r3, [r4, #4]
 8001984:	bf04      	itt	eq
 8001986:	1852      	addeq	r2, r2, r1
 8001988:	6022      	streq	r2, [r4, #0]
 800198a:	602c      	str	r4, [r5, #0]
 800198c:	e7ec      	b.n	8001968 <_free_r+0x28>
 800198e:	461a      	mov	r2, r3
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	b10b      	cbz	r3, 8001998 <_free_r+0x58>
 8001994:	42a3      	cmp	r3, r4
 8001996:	d9fa      	bls.n	800198e <_free_r+0x4e>
 8001998:	6811      	ldr	r1, [r2, #0]
 800199a:	1855      	adds	r5, r2, r1
 800199c:	42a5      	cmp	r5, r4
 800199e:	d10b      	bne.n	80019b8 <_free_r+0x78>
 80019a0:	6824      	ldr	r4, [r4, #0]
 80019a2:	4421      	add	r1, r4
 80019a4:	1854      	adds	r4, r2, r1
 80019a6:	42a3      	cmp	r3, r4
 80019a8:	6011      	str	r1, [r2, #0]
 80019aa:	d1dd      	bne.n	8001968 <_free_r+0x28>
 80019ac:	681c      	ldr	r4, [r3, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	6053      	str	r3, [r2, #4]
 80019b2:	4421      	add	r1, r4
 80019b4:	6011      	str	r1, [r2, #0]
 80019b6:	e7d7      	b.n	8001968 <_free_r+0x28>
 80019b8:	d902      	bls.n	80019c0 <_free_r+0x80>
 80019ba:	230c      	movs	r3, #12
 80019bc:	6003      	str	r3, [r0, #0]
 80019be:	e7d3      	b.n	8001968 <_free_r+0x28>
 80019c0:	6825      	ldr	r5, [r4, #0]
 80019c2:	1961      	adds	r1, r4, r5
 80019c4:	428b      	cmp	r3, r1
 80019c6:	bf04      	itt	eq
 80019c8:	6819      	ldreq	r1, [r3, #0]
 80019ca:	685b      	ldreq	r3, [r3, #4]
 80019cc:	6063      	str	r3, [r4, #4]
 80019ce:	bf04      	itt	eq
 80019d0:	1949      	addeq	r1, r1, r5
 80019d2:	6021      	streq	r1, [r4, #0]
 80019d4:	6054      	str	r4, [r2, #4]
 80019d6:	e7c7      	b.n	8001968 <_free_r+0x28>
 80019d8:	b003      	add	sp, #12
 80019da:	bd30      	pop	{r4, r5, pc}
 80019dc:	200000b0 	.word	0x200000b0

080019e0 <__malloc_lock>:
 80019e0:	4801      	ldr	r0, [pc, #4]	; (80019e8 <__malloc_lock+0x8>)
 80019e2:	f000 b809 	b.w	80019f8 <__retarget_lock_acquire_recursive>
 80019e6:	bf00      	nop
 80019e8:	20000194 	.word	0x20000194

080019ec <__malloc_unlock>:
 80019ec:	4801      	ldr	r0, [pc, #4]	; (80019f4 <__malloc_unlock+0x8>)
 80019ee:	f000 b804 	b.w	80019fa <__retarget_lock_release_recursive>
 80019f2:	bf00      	nop
 80019f4:	20000194 	.word	0x20000194

080019f8 <__retarget_lock_acquire_recursive>:
 80019f8:	4770      	bx	lr

080019fa <__retarget_lock_release_recursive>:
 80019fa:	4770      	bx	lr

080019fc <_init>:
 80019fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019fe:	bf00      	nop
 8001a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a02:	bc08      	pop	{r3}
 8001a04:	469e      	mov	lr, r3
 8001a06:	4770      	bx	lr

08001a08 <_fini>:
 8001a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a0a:	bf00      	nop
 8001a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a0e:	bc08      	pop	{r3}
 8001a10:	469e      	mov	lr, r3
 8001a12:	4770      	bx	lr
>>>>>>> Stashed changes
