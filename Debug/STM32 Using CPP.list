
STM32 Using CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003abc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003c44  08003c44  00013c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cb4  08003cb4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003cb4  08003cb4  00013cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cbc  08003cbc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cbc  08003cbc  00013cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cc0  08003cc0  00013cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003cc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001fc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000026c  2000026c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e587  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002364  00000000  00000000  0002e627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b90  00000000  00000000  00030990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a88  00000000  00000000  00031520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a35  00000000  00000000  00031fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000daa7  00000000  00000000  000559dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc17f  00000000  00000000  00063484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012f603  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032c8  00000000  00000000  0012f658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003c2c 	.word	0x08003c2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003c2c 	.word	0x08003c2c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <_ZN14Task_Scheduler4TaskEv>:

extern Timer_PWM *Timer1;
extern Timer_PWM *Timer8;

void Task_Scheduler::Task()
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	if(this->fre_1000hz == 1){
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	7d1b      	ldrb	r3, [r3, #20]
 80004cc:	2b01      	cmp	r3, #1
 80004ce:	d105      	bne.n	80004dc <_ZN14Task_Scheduler4TaskEv+0x1c>
		this->Task_1000hz();
 80004d0:	6878      	ldr	r0, [r7, #4]
 80004d2:	f000 f839 	bl	8000548 <_ZN14Task_Scheduler11Task_1000hzEv>
		this->fre_1000hz = 0;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2200      	movs	r2, #0
 80004da:	751a      	strb	r2, [r3, #20]
	}
	if(this->fre_500hz == 1){
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	7d5b      	ldrb	r3, [r3, #21]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d105      	bne.n	80004f0 <_ZN14Task_Scheduler4TaskEv+0x30>
		this->Task_500hz();
 80004e4:	6878      	ldr	r0, [r7, #4]
 80004e6:	f000 f841 	bl	800056c <_ZN14Task_Scheduler10Task_500hzEv>
		this->fre_500hz = 0;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2200      	movs	r2, #0
 80004ee:	755a      	strb	r2, [r3, #21]
	}
	if(this->fre_200hz == 1){
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	7d9b      	ldrb	r3, [r3, #22]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d105      	bne.n	8000504 <_ZN14Task_Scheduler4TaskEv+0x44>
		this->Task_200hz();
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f000 f849 	bl	8000590 <_ZN14Task_Scheduler10Task_200hzEv>
		this->fre_200hz = 0;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2200      	movs	r2, #0
 8000502:	759a      	strb	r2, [r3, #22]
	}
	if(this->fre_100hz == 1){
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	7ddb      	ldrb	r3, [r3, #23]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d105      	bne.n	8000518 <_ZN14Task_Scheduler4TaskEv+0x58>
		this->Task_100hz();
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f000 f851 	bl	80005b4 <_ZN14Task_Scheduler10Task_100hzEv>
		this->fre_100hz = 0;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2200      	movs	r2, #0
 8000516:	75da      	strb	r2, [r3, #23]
	}
	if(this->fre_10hz == 1){
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	7e1b      	ldrb	r3, [r3, #24]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d105      	bne.n	800052c <_ZN14Task_Scheduler4TaskEv+0x6c>
		this->Task_10hz();
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f000 f859 	bl	80005d8 <_ZN14Task_Scheduler9Task_10hzEv>
		this->fre_10hz = 0;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2200      	movs	r2, #0
 800052a:	761a      	strb	r2, [r3, #24]
	}
	if(this->fre_1hz == 1){
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	7e5b      	ldrb	r3, [r3, #25]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d105      	bne.n	8000540 <_ZN14Task_Scheduler4TaskEv+0x80>
		this->Task_1hz();
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f000 f861 	bl	80005fc <_ZN14Task_Scheduler8Task_1hzEv>
		this->fre_1hz = 0;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2200      	movs	r2, #0
 800053e:	765a      	strb	r2, [r3, #25]
	}
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <_ZN14Task_Scheduler11Task_1000hzEv>:
void Task_Scheduler::Task_1000hz()
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	Timer1->PWM_Out(1, 100);
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <_ZN14Task_Scheduler11Task_1000hzEv+0x20>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2264      	movs	r2, #100	; 0x64
 8000556:	2101      	movs	r1, #1
 8000558:	4618      	mov	r0, r3
 800055a:	f003 f9b7 	bl	80038cc <_ZN9Timer_PWM7PWM_OutEhj>
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	2000008c 	.word	0x2000008c

0800056c <_ZN14Task_Scheduler10Task_500hzEv>:
void Task_Scheduler::Task_500hz()
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	Timer1->PWM_Out(2, 200);
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <_ZN14Task_Scheduler10Task_500hzEv+0x20>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	22c8      	movs	r2, #200	; 0xc8
 800057a:	2102      	movs	r1, #2
 800057c:	4618      	mov	r0, r3
 800057e:	f003 f9a5 	bl	80038cc <_ZN9Timer_PWM7PWM_OutEhj>
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	2000008c 	.word	0x2000008c

08000590 <_ZN14Task_Scheduler10Task_200hzEv>:
void Task_Scheduler::Task_200hz()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	Timer1->PWM_Out(3, 300);
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <_ZN14Task_Scheduler10Task_200hzEv+0x20>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80005a0:	2103      	movs	r1, #3
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 f992 	bl	80038cc <_ZN9Timer_PWM7PWM_OutEhj>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	2000008c 	.word	0x2000008c

080005b4 <_ZN14Task_Scheduler10Task_100hzEv>:
void Task_Scheduler::Task_100hz()
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	Timer1->PWM_Out(4, 400);
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <_ZN14Task_Scheduler10Task_100hzEv+0x20>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80005c4:	2104      	movs	r1, #4
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 f980 	bl	80038cc <_ZN9Timer_PWM7PWM_OutEhj>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	2000008c 	.word	0x2000008c

080005d8 <_ZN14Task_Scheduler9Task_10hzEv>:
void Task_Scheduler::Task_10hz()
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	Timer8->PWM_Out(1, 500);
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <_ZN14Task_Scheduler9Task_10hzEv+0x20>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005e8:	2101      	movs	r1, #1
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 f96e 	bl	80038cc <_ZN9Timer_PWM7PWM_OutEhj>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000090 	.word	0x20000090

080005fc <_ZN14Task_Scheduler8Task_1hzEv>:
void Task_Scheduler::Task_1hz()
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	Timer8->PWM_Out(2, 600);
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <_ZN14Task_Scheduler8Task_1hzEv+0x20>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f44f 7216 	mov.w	r2, #600	; 0x258
 800060c:	2102      	movs	r1, #2
 800060e:	4618      	mov	r0, r3
 8000610:	f003 f95c 	bl	80038cc <_ZN9Timer_PWM7PWM_OutEhj>
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000090 	.word	0x20000090

08000620 <_ZN14Task_SchedulerC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj>:

Task_Scheduler::Task_Scheduler(TIM_HandleTypeDef *tim, TIM_TypeDef *Tim_Num, u16 arr, u16 pcs):Timer(tim, Tim_Num, arr, pcs)
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af02      	add	r7, sp, #8
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	68f8      	ldr	r0, [r7, #12]
 8000630:	6a3b      	ldr	r3, [r7, #32]
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	68b9      	ldr	r1, [r7, #8]
 800063a:	f002 fd59 	bl	80030f0 <_ZN5TimerC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj>
 800063e:	4a23      	ldr	r2, [pc, #140]	; (80006cc <_ZN14Task_SchedulerC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj+0xac>)
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	601a      	str	r2, [r3, #0]
{
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000644:	f107 0310 	add.w	r3, r7, #16
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]

	this->tim->Init.Prescaler = this->pcs;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	68db      	ldr	r3, [r3, #12]
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	6892      	ldr	r2, [r2, #8]
 8000656:	605a      	str	r2, [r3, #4]
	this->tim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
	this->tim->Init.Period = this->arr;
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	6852      	ldr	r2, [r2, #4]
 8000668:	60da      	str	r2, [r3, #12]
	this->tim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	68db      	ldr	r3, [r3, #12]
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(this->tim) != HAL_OK){
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	68db      	ldr	r3, [r3, #12]
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fcac 	bl	8001fd4 <HAL_TIM_Base_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	bf14      	ite	ne
 8000682:	2301      	movne	r3, #1
 8000684:	2300      	moveq	r3, #0
 8000686:	b2db      	uxtb	r3, r3
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <_ZN14Task_SchedulerC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj+0x70>
		Error_Handler();
 800068c:	f000 fa08 	bl	8000aa0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK){
 8000698:	f107 0310 	add.w	r3, r7, #16
 800069c:	4619      	mov	r1, r3
 800069e:	480c      	ldr	r0, [pc, #48]	; (80006d0 <_ZN14Task_SchedulerC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj+0xb0>)
 80006a0:	f002 fc44 	bl	8002f2c <HAL_TIMEx_MasterConfigSynchronization>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	bf14      	ite	ne
 80006aa:	2301      	movne	r3, #1
 80006ac:	2300      	moveq	r3, #0
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <_ZN14Task_SchedulerC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj+0x98>
		Error_Handler();
 80006b4:	f000 f9f4 	bl	8000aa0 <Error_Handler>
	}
	HAL_TIM_Base_Start_IT(this->tim);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 fcd9 	bl	8002074 <HAL_TIM_Base_Start_IT>
}
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	4618      	mov	r0, r3
 80006c6:	3718      	adds	r7, #24
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	08003c4c 	.word	0x08003c4c
 80006d0:	20000180 	.word	0x20000180

080006d4 <_ZN14Task_Scheduler15Timer_InterruptEv>:

void Task_Scheduler::Timer_Interrupt()
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	this->count_1ms++;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	7e9b      	ldrb	r3, [r3, #26]
 80006e0:	3301      	adds	r3, #1
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	769a      	strb	r2, [r3, #26]
	this->count_2ms++;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	7edb      	ldrb	r3, [r3, #27]
 80006ec:	3301      	adds	r3, #1
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	76da      	strb	r2, [r3, #27]
	this->count_5ms++;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	7f1b      	ldrb	r3, [r3, #28]
 80006f8:	3301      	adds	r3, #1
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	771a      	strb	r2, [r3, #28]
	this->count_10ms++;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	7f5b      	ldrb	r3, [r3, #29]
 8000704:	3301      	adds	r3, #1
 8000706:	b2da      	uxtb	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	775a      	strb	r2, [r3, #29]
	this->count_100ms++;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	7f9b      	ldrb	r3, [r3, #30]
 8000710:	3301      	adds	r3, #1
 8000712:	b2da      	uxtb	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	779a      	strb	r2, [r3, #30]
	this->count_1s++;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6a1b      	ldr	r3, [r3, #32]
 800071c:	1c5a      	adds	r2, r3, #1
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	621a      	str	r2, [r3, #32]
	if(this->count_1ms >= 1){
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	7e9b      	ldrb	r3, [r3, #26]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d005      	beq.n	8000736 <_ZN14Task_Scheduler15Timer_InterruptEv+0x62>
		this->fre_1000hz = 1;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2201      	movs	r2, #1
 800072e:	751a      	strb	r2, [r3, #20]
		this->count_1ms = 0;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2200      	movs	r2, #0
 8000734:	769a      	strb	r2, [r3, #26]
	}
	if(this->count_2ms >= 2){
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	7edb      	ldrb	r3, [r3, #27]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d905      	bls.n	800074a <_ZN14Task_Scheduler15Timer_InterruptEv+0x76>
		this->fre_500hz = 1;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2201      	movs	r2, #1
 8000742:	755a      	strb	r2, [r3, #21]
		this->count_2ms = 0;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2200      	movs	r2, #0
 8000748:	76da      	strb	r2, [r3, #27]
	}
	if(this->count_5ms >= 5){
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	7f1b      	ldrb	r3, [r3, #28]
 800074e:	2b04      	cmp	r3, #4
 8000750:	d905      	bls.n	800075e <_ZN14Task_Scheduler15Timer_InterruptEv+0x8a>
		this->fre_200hz = 1;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2201      	movs	r2, #1
 8000756:	759a      	strb	r2, [r3, #22]
		this->count_5ms = 0;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2200      	movs	r2, #0
 800075c:	771a      	strb	r2, [r3, #28]
	}
	if(this->count_10ms >= 10){
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	7f5b      	ldrb	r3, [r3, #29]
 8000762:	2b09      	cmp	r3, #9
 8000764:	d905      	bls.n	8000772 <_ZN14Task_Scheduler15Timer_InterruptEv+0x9e>
		this->fre_100hz = 1;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2201      	movs	r2, #1
 800076a:	75da      	strb	r2, [r3, #23]
		this->count_10ms = 0;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2200      	movs	r2, #0
 8000770:	775a      	strb	r2, [r3, #29]
	}
	if(this->count_100ms >= 100){
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	7f9b      	ldrb	r3, [r3, #30]
 8000776:	2b63      	cmp	r3, #99	; 0x63
 8000778:	d905      	bls.n	8000786 <_ZN14Task_Scheduler15Timer_InterruptEv+0xb2>
		this->fre_10hz = 1;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2201      	movs	r2, #1
 800077e:	761a      	strb	r2, [r3, #24]
		this->count_100ms = 0;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2200      	movs	r2, #0
 8000784:	779a      	strb	r2, [r3, #30]
	}
	if(this->count_1s >= 1000){
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6a1b      	ldr	r3, [r3, #32]
 800078a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800078e:	d305      	bcc.n	800079c <_ZN14Task_Scheduler15Timer_InterruptEv+0xc8>
		this->fre_1hz = 1;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2201      	movs	r2, #1
 8000794:	765a      	strb	r2, [r3, #25]
		this->count_1s = 0;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
	}
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <_ZN14Task_SchedulerD1Ev>:

Task_Scheduler::~Task_Scheduler()
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	4a05      	ldr	r2, [pc, #20]	; (80007c8 <_ZN14Task_SchedulerD1Ev+0x20>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f002 fcb9 	bl	8003130 <_ZN5TimerD1Ev>
{

}
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	08003c4c 	.word	0x08003c4c

080007cc <_ZN14Task_SchedulerD0Ev>:
Task_Scheduler::~Task_Scheduler()
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
}
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff ffe7 	bl	80007a8 <_ZN14Task_SchedulerD1Ev>
 80007da:	2124      	movs	r1, #36	; 0x24
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f003 f8b1 	bl	8003944 <_ZdlPvj>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4618      	mov	r0, r3
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08c      	sub	sp, #48	; 0x30
 80007f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
 8000806:	4b35      	ldr	r3, [pc, #212]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a34      	ldr	r2, [pc, #208]	; (80008dc <MX_GPIO_Init+0xf0>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b32      	ldr	r3, [pc, #200]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a2d      	ldr	r2, [pc, #180]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	4b27      	ldr	r3, [pc, #156]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a26      	ldr	r2, [pc, #152]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b24      	ldr	r3, [pc, #144]	; (80008dc <MX_GPIO_Init+0xf0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <MX_GPIO_Init+0xf0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a1f      	ldr	r2, [pc, #124]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000860:	f043 0310 	orr.w	r3, r3, #16
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0310 	and.w	r3, r3, #16
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	4b19      	ldr	r3, [pc, #100]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a18      	ldr	r2, [pc, #96]	; (80008dc <MX_GPIO_Init+0xf0>)
 800087c:	f043 0308 	orr.w	r3, r3, #8
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b16      	ldr	r3, [pc, #88]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0308 	and.w	r3, r3, #8
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a11      	ldr	r2, [pc, #68]	; (80008dc <MX_GPIO_Init+0xf0>)
 8000898:	f043 0304 	orr.w	r3, r3, #4
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_GPIO_Init+0xf0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b0:	480b      	ldr	r0, [pc, #44]	; (80008e0 <MX_GPIO_Init+0xf4>)
 80008b2:	f000 ff61 	bl	8001778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_GPIO_Init+0xf4>)
 80008d0:	f000 fcba 	bl	8001248 <HAL_GPIO_Init>

}
 80008d4:	bf00      	nop
 80008d6:	3730      	adds	r7, #48	; 0x30
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020000 	.word	0x40020000

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ea:	f000 faf7 	bl	8000edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ee:	f000 f84b 	bl	8000988 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f2:	f7ff ff7b 	bl	80007ec <MX_GPIO_Init>

  /* USER CODE BEGIN 2 */
  Timer1 = new Timer_PWM(&htim1, TIM1, 1000 - 1, 168 - 1);
 80008f6:	2018      	movs	r0, #24
 80008f8:	f003 f826 	bl	8003948 <_Znwj>
 80008fc:	4603      	mov	r3, r0
 80008fe:	461c      	mov	r4, r3
 8000900:	23a7      	movs	r3, #167	; 0xa7
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000908:	4a16      	ldr	r2, [pc, #88]	; (8000964 <main+0x80>)
 800090a:	4917      	ldr	r1, [pc, #92]	; (8000968 <main+0x84>)
 800090c:	4620      	mov	r0, r4
 800090e:	f002 fe8d 	bl	800362c <_ZN9Timer_PWMC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj>
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <main+0x88>)
 8000914:	601c      	str	r4, [r3, #0]
  Timer8 = new Timer_PWM(&htim8, TIM8, 1000 - 1, 168 - 1);
 8000916:	2018      	movs	r0, #24
 8000918:	f003 f816 	bl	8003948 <_Znwj>
 800091c:	4603      	mov	r3, r0
 800091e:	461c      	mov	r4, r3
 8000920:	23a7      	movs	r3, #167	; 0xa7
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000928:	4a11      	ldr	r2, [pc, #68]	; (8000970 <main+0x8c>)
 800092a:	4912      	ldr	r1, [pc, #72]	; (8000974 <main+0x90>)
 800092c:	4620      	mov	r0, r4
 800092e:	f002 fe7d 	bl	800362c <_ZN9Timer_PWMC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj>
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <main+0x94>)
 8000934:	601c      	str	r4, [r3, #0]
  Timer6 = new Task_Scheduler(&htim6, TIM6, 1000 - 1, 84 - 1);
 8000936:	2024      	movs	r0, #36	; 0x24
 8000938:	f003 f806 	bl	8003948 <_Znwj>
 800093c:	4603      	mov	r3, r0
 800093e:	461c      	mov	r4, r3
 8000940:	2353      	movs	r3, #83	; 0x53
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000948:	4a0c      	ldr	r2, [pc, #48]	; (800097c <main+0x98>)
 800094a:	490d      	ldr	r1, [pc, #52]	; (8000980 <main+0x9c>)
 800094c:	4620      	mov	r0, r4
 800094e:	f7ff fe67 	bl	8000620 <_ZN14Task_SchedulerC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj>
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <main+0xa0>)
 8000954:	601c      	str	r4, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Timer6->Task();
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <main+0xa0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fdb0 	bl	80004c0 <_ZN14Task_Scheduler4TaskEv>
 8000960:	e7f9      	b.n	8000956 <main+0x72>
 8000962:	bf00      	nop
 8000964:	40010000 	.word	0x40010000
 8000968:	200001c8 	.word	0x200001c8
 800096c:	2000008c 	.word	0x2000008c
 8000970:	40010400 	.word	0x40010400
 8000974:	200000a8 	.word	0x200000a8
 8000978:	20000090 	.word	0x20000090
 800097c:	40001000 	.word	0x40001000
 8000980:	20000180 	.word	0x20000180
 8000984:	20000094 	.word	0x20000094

08000988 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b094      	sub	sp, #80	; 0x50
 800098c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098e:	f107 0320 	add.w	r3, r7, #32
 8000992:	2230      	movs	r2, #48	; 0x30
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f003 f834 	bl	8003a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <_Z18SystemClock_Configv+0xe0>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	4a2c      	ldr	r2, [pc, #176]	; (8000a68 <_Z18SystemClock_Configv+0xe0>)
 80009b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ba:	6413      	str	r3, [r2, #64]	; 0x40
 80009bc:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <_Z18SystemClock_Configv+0xe0>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	4b27      	ldr	r3, [pc, #156]	; (8000a6c <_Z18SystemClock_Configv+0xe4>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a26      	ldr	r2, [pc, #152]	; (8000a6c <_Z18SystemClock_Configv+0xe4>)
 80009d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d6:	6013      	str	r3, [r2, #0]
 80009d8:	4b24      	ldr	r3, [pc, #144]	; (8000a6c <_Z18SystemClock_Configv+0xe4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e4:	2301      	movs	r3, #1
 80009e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ee:	2302      	movs	r3, #2
 80009f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80009f8:	2319      	movs	r3, #25
 80009fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a02:	2302      	movs	r3, #2
 8000a04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a06:	2304      	movs	r3, #4
 8000a08:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0a:	f107 0320 	add.w	r3, r7, #32
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 fecc 	bl	80017ac <HAL_RCC_OscConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	bf14      	ite	ne
 8000a1a:	2301      	movne	r3, #1
 8000a1c:	2300      	moveq	r3, #0
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 8000a24:	f000 f83c 	bl	8000aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a28:	230f      	movs	r3, #15
 8000a2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	2105      	movs	r1, #5
 8000a46:	4618      	mov	r0, r3
 8000a48:	f001 f928 	bl	8001c9c <HAL_RCC_ClockConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	bf14      	ite	ne
 8000a52:	2301      	movne	r3, #1
 8000a54:	2300      	moveq	r3, #0
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8000a5c:	f000 f820 	bl	8000aa0 <Error_Handler>
  }
}
 8000a60:	bf00      	nop
 8000a62:	3750      	adds	r7, #80	; 0x50
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40007000 	.word	0x40007000

08000a70 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
    if(htim->Instance == htim6.Instance){
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d104      	bne.n	8000a8e <HAL_TIM_PeriodElapsedCallback+0x1e>
    	Timer6->Timer_Interrupt();
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fe23 	bl	80006d4 <_ZN14Task_Scheduler15Timer_InterruptEv>
    }
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000180 	.word	0x20000180
 8000a9c:	20000094 	.word	0x20000094

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <HAL_MspInit+0x58>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <HAL_MspInit+0x58>)
 8000abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <HAL_MspInit+0x58>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <HAL_MspInit+0x58>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <HAL_MspInit+0x58>)
 8000ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_MspInit+0x58>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	2005      	movs	r0, #5
 8000af0:	f000 fb65 	bl	80011be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000af4:	2005      	movs	r0, #5
 8000af6:	f000 fb7e 	bl	80011f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <NMI_Handler+0x4>

08000b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b54:	f000 fa14 	bl	8000f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
	...

08000b6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <TIM6_DAC_IRQHandler+0x10>)
 8000b72:	f001 fc11 	bl	8002398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000180 	.word	0x20000180

08000b80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
	return 1;
 8000b84:	2301      	movs	r3, #1
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_kill>:

int _kill(int pid, int sig)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b9a:	f002 fef9 	bl	8003990 <__errno>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2216      	movs	r2, #22
 8000ba2:	601a      	str	r2, [r3, #0]
	return -1;
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <_exit>:

void _exit (int status)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f7ff ffe7 	bl	8000b90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000bc2:	e7fe      	b.n	8000bc2 <_exit+0x12>

08000bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bcc:	4a14      	ldr	r2, [pc, #80]	; (8000c20 <_sbrk+0x5c>)
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <_sbrk+0x60>)
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d102      	bne.n	8000be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <_sbrk+0x64>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <_sbrk+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d207      	bcs.n	8000c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf4:	f002 fecc 	bl	8003990 <__errno>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	e009      	b.n	8000c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <_sbrk+0x64>)
 8000c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20020000 	.word	0x20020000
 8000c24:	00000400 	.word	0x00000400
 8000c28:	20000098 	.word	0x20000098
 8000c2c:	20000270 	.word	0x20000270

08000c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <SystemInit+0x20>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3a:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <SystemInit+0x20>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim8);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b092      	sub	sp, #72	; 0x48
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a7c      	ldr	r2, [pc, #496]	; (8000e64 <HAL_TIM_Base_MspInit+0x210>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d10e      	bne.n	8000c94 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	633b      	str	r3, [r7, #48]	; 0x30
 8000c7a:	4b7b      	ldr	r3, [pc, #492]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a7a      	ldr	r2, [pc, #488]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b78      	ldr	r3, [pc, #480]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	633b      	str	r3, [r7, #48]	; 0x30
 8000c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000c92:	e0e3      	b.n	8000e5c <HAL_TIM_Base_MspInit+0x208>
  else if(tim_baseHandle->Instance==TIM2)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c9c:	d12c      	bne.n	8000cf8 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ca2:	4b71      	ldr	r3, [pc, #452]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a70      	ldr	r2, [pc, #448]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
 8000cae:	4b6e      	ldr	r3, [pc, #440]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cbe:	4b6a      	ldr	r3, [pc, #424]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a69      	ldr	r2, [pc, #420]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b67      	ldr	r3, [pc, #412]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000cd6:	230f      	movs	r3, #15
 8000cd8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cee:	4619      	mov	r1, r3
 8000cf0:	485e      	ldr	r0, [pc, #376]	; (8000e6c <HAL_TIM_Base_MspInit+0x218>)
 8000cf2:	f000 faa9 	bl	8001248 <HAL_GPIO_Init>
}
 8000cf6:	e0b1      	b.n	8000e5c <HAL_TIM_Base_MspInit+0x208>
  else if(tim_baseHandle->Instance==TIM3)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a5c      	ldr	r2, [pc, #368]	; (8000e70 <HAL_TIM_Base_MspInit+0x21c>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d14a      	bne.n	8000d98 <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
 8000d06:	4b58      	ldr	r3, [pc, #352]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a57      	ldr	r2, [pc, #348]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	4b55      	ldr	r3, [pc, #340]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
 8000d22:	4b51      	ldr	r3, [pc, #324]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a50      	ldr	r2, [pc, #320]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b4e      	ldr	r3, [pc, #312]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	623b      	str	r3, [r7, #32]
 8000d38:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
 8000d3e:	4b4a      	ldr	r3, [pc, #296]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a49      	ldr	r2, [pc, #292]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b47      	ldr	r3, [pc, #284]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	61fb      	str	r3, [r7, #28]
 8000d54:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d56:	23c0      	movs	r3, #192	; 0xc0
 8000d58:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d66:	2302      	movs	r3, #2
 8000d68:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d6e:	4619      	mov	r1, r3
 8000d70:	483e      	ldr	r0, [pc, #248]	; (8000e6c <HAL_TIM_Base_MspInit+0x218>)
 8000d72:	f000 fa69 	bl	8001248 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d76:	2303      	movs	r3, #3
 8000d78:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d86:	2302      	movs	r3, #2
 8000d88:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4838      	ldr	r0, [pc, #224]	; (8000e74 <HAL_TIM_Base_MspInit+0x220>)
 8000d92:	f000 fa59 	bl	8001248 <HAL_GPIO_Init>
}
 8000d96:	e061      	b.n	8000e5c <HAL_TIM_Base_MspInit+0x208>
  else if(tim_baseHandle->Instance==TIM4)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a36      	ldr	r2, [pc, #216]	; (8000e78 <HAL_TIM_Base_MspInit+0x224>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d12d      	bne.n	8000dfe <HAL_TIM_Base_MspInit+0x1aa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
 8000da6:	4b30      	ldr	r3, [pc, #192]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a2f      	ldr	r2, [pc, #188]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	61bb      	str	r3, [r7, #24]
 8000dbc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	4b29      	ldr	r3, [pc, #164]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a28      	ldr	r2, [pc, #160]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000dc8:	f043 0308 	orr.w	r3, r3, #8
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000dda:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000dde:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000dec:	2302      	movs	r3, #2
 8000dee:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000df4:	4619      	mov	r1, r3
 8000df6:	4821      	ldr	r0, [pc, #132]	; (8000e7c <HAL_TIM_Base_MspInit+0x228>)
 8000df8:	f000 fa26 	bl	8001248 <HAL_GPIO_Init>
}
 8000dfc:	e02e      	b.n	8000e5c <HAL_TIM_Base_MspInit+0x208>
  else if(tim_baseHandle->Instance==TIM6)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a1f      	ldr	r2, [pc, #124]	; (8000e80 <HAL_TIM_Base_MspInit+0x22c>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d116      	bne.n	8000e36 <HAL_TIM_Base_MspInit+0x1e2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e08:	2300      	movs	r3, #0
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	4a15      	ldr	r2, [pc, #84]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000e12:	f043 0310 	orr.w	r3, r3, #16
 8000e16:	6413      	str	r3, [r2, #64]	; 0x40
 8000e18:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	f003 0310 	and.w	r3, r3, #16
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2100      	movs	r1, #0
 8000e28:	2036      	movs	r0, #54	; 0x36
 8000e2a:	f000 f9c8 	bl	80011be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e2e:	2036      	movs	r0, #54	; 0x36
 8000e30:	f000 f9e1 	bl	80011f6 <HAL_NVIC_EnableIRQ>
}
 8000e34:	e012      	b.n	8000e5c <HAL_TIM_Base_MspInit+0x208>
  else if(tim_baseHandle->Instance==TIM8)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a12      	ldr	r2, [pc, #72]	; (8000e84 <HAL_TIM_Base_MspInit+0x230>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d10d      	bne.n	8000e5c <HAL_TIM_Base_MspInit+0x208>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e48:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000e4a:	f043 0302 	orr.w	r3, r3, #2
 8000e4e:	6453      	str	r3, [r2, #68]	; 0x44
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <HAL_TIM_Base_MspInit+0x214>)
 8000e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	3748      	adds	r7, #72	; 0x48
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40010000 	.word	0x40010000
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020000 	.word	0x40020000
 8000e70:	40000400 	.word	0x40000400
 8000e74:	40020400 	.word	0x40020400
 8000e78:	40000800 	.word	0x40000800
 8000e7c:	40020c00 	.word	0x40020c00
 8000e80:	40001000 	.word	0x40001000
 8000e84:	40010400 	.word	0x40010400

08000e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e8c:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e8e:	490e      	ldr	r1, [pc, #56]	; (8000ec8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e90:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e94:	e002      	b.n	8000e9c <LoopCopyDataInit>

08000e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9a:	3304      	adds	r3, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea0:	d3f9      	bcc.n	8000e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea2:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ea4:	4c0b      	ldr	r4, [pc, #44]	; (8000ed4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea8:	e001      	b.n	8000eae <LoopFillZerobss>

08000eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eac:	3204      	adds	r2, #4

08000eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eb2:	f7ff febd 	bl	8000c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eb6:	f002 fd71 	bl	800399c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eba:	f7ff fd13 	bl	80008e4 <main>
  bx  lr    
 8000ebe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ec0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ecc:	08003cc4 	.word	0x08003cc4
  ldr r2, =_sbss
 8000ed0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ed4:	2000026c 	.word	0x2000026c

08000ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC_IRQHandler>
	...

08000edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	; (8000f1c <HAL_Init+0x40>)
 8000ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eec:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <HAL_Init+0x40>)
 8000ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a07      	ldr	r2, [pc, #28]	; (8000f1c <HAL_Init+0x40>)
 8000efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f04:	2003      	movs	r0, #3
 8000f06:	f000 f94f 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0a:	200f      	movs	r0, #15
 8000f0c:	f000 f808 	bl	8000f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f10:	f7ff fdcc 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023c00 	.word	0x40023c00

08000f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_InitTick+0x54>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_InitTick+0x58>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f975 	bl	800122e <HAL_SYSTICK_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00e      	b.n	8000f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d80a      	bhi.n	8000f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f54:	2200      	movs	r2, #0
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f000 f92f 	bl	80011be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f60:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <HAL_InitTick+0x5c>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e000      	b.n	8000f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000000 	.word	0x20000000
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	20000004 	.word	0x20000004

08000f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_IncTick+0x20>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x24>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <HAL_IncTick+0x24>)
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20000258 	.word	0x20000258

08000fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <HAL_GetTick+0x14>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000258 	.word	0x20000258

08000fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff2:	4a04      	ldr	r2, [pc, #16]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	60d3      	str	r3, [r2, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	db0b      	blt.n	800104e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 021f 	and.w	r2, r3, #31
 800103c:	4907      	ldr	r1, [pc, #28]	; (800105c <__NVIC_EnableIRQ+0x38>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	2001      	movs	r0, #1
 8001046:	fa00 f202 	lsl.w	r2, r0, r2
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e100 	.word	0xe000e100

08001060 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	2b00      	cmp	r3, #0
 8001070:	db12      	blt.n	8001098 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	f003 021f 	and.w	r2, r3, #31
 8001078:	490a      	ldr	r1, [pc, #40]	; (80010a4 <__NVIC_DisableIRQ+0x44>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	095b      	lsrs	r3, r3, #5
 8001080:	2001      	movs	r0, #1
 8001082:	fa00 f202 	lsl.w	r2, r0, r2
 8001086:	3320      	adds	r3, #32
 8001088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800108c:	f3bf 8f4f 	dsb	sy
}
 8001090:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001092:	f3bf 8f6f 	isb	sy
}
 8001096:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000e100 	.word	0xe000e100

080010a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db0a      	blt.n	80010d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	490c      	ldr	r1, [pc, #48]	; (80010f4 <__NVIC_SetPriority+0x4c>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	0112      	lsls	r2, r2, #4
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	440b      	add	r3, r1
 80010cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d0:	e00a      	b.n	80010e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4908      	ldr	r1, [pc, #32]	; (80010f8 <__NVIC_SetPriority+0x50>)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	3b04      	subs	r3, #4
 80010e0:	0112      	lsls	r2, r2, #4
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	440b      	add	r3, r1
 80010e6:	761a      	strb	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000e100 	.word	0xe000e100
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f1c3 0307 	rsb	r3, r3, #7
 8001116:	2b04      	cmp	r3, #4
 8001118:	bf28      	it	cs
 800111a:	2304      	movcs	r3, #4
 800111c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3304      	adds	r3, #4
 8001122:	2b06      	cmp	r3, #6
 8001124:	d902      	bls.n	800112c <NVIC_EncodePriority+0x30>
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3b03      	subs	r3, #3
 800112a:	e000      	b.n	800112e <NVIC_EncodePriority+0x32>
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	f04f 32ff 	mov.w	r2, #4294967295
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	401a      	ands	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001144:	f04f 31ff 	mov.w	r1, #4294967295
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43d9      	mvns	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	4313      	orrs	r3, r2
         );
}
 8001156:	4618      	mov	r0, r3
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001174:	d301      	bcc.n	800117a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001176:	2301      	movs	r3, #1
 8001178:	e00f      	b.n	800119a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <SysTick_Config+0x40>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001182:	210f      	movs	r1, #15
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	f7ff ff8e 	bl	80010a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <SysTick_Config+0x40>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <SysTick_Config+0x40>)
 8001194:	2207      	movs	r2, #7
 8001196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	e000e010 	.word	0xe000e010

080011a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff05 	bl	8000fc0 <__NVIC_SetPriorityGrouping>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d0:	f7ff ff1a 	bl	8001008 <__NVIC_GetPriorityGrouping>
 80011d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	68b9      	ldr	r1, [r7, #8]
 80011da:	6978      	ldr	r0, [r7, #20]
 80011dc:	f7ff ff8e 	bl	80010fc <NVIC_EncodePriority>
 80011e0:	4602      	mov	r2, r0
 80011e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff5d 	bl	80010a8 <__NVIC_SetPriority>
}
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff0d 	bl	8001024 <__NVIC_EnableIRQ>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff1d 	bl	8001060 <__NVIC_DisableIRQ>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ff94 	bl	8001164 <SysTick_Config>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	e16b      	b.n	800153c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001264:	2201      	movs	r2, #1
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	429a      	cmp	r2, r3
 800127e:	f040 815a 	bne.w	8001536 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	2b01      	cmp	r3, #1
 800128c:	d005      	beq.n	800129a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001296:	2b02      	cmp	r3, #2
 8001298:	d130      	bne.n	80012fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	2203      	movs	r2, #3
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	68da      	ldr	r2, [r3, #12]
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d0:	2201      	movs	r2, #1
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	091b      	lsrs	r3, r3, #4
 80012e6:	f003 0201 	and.w	r2, r3, #1
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b03      	cmp	r3, #3
 8001306:	d017      	beq.n	8001338 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	2203      	movs	r2, #3
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d123      	bne.n	800138c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	08da      	lsrs	r2, r3, #3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3208      	adds	r2, #8
 800134c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	220f      	movs	r2, #15
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	691a      	ldr	r2, [r3, #16]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	08da      	lsrs	r2, r3, #3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3208      	adds	r2, #8
 8001386:	69b9      	ldr	r1, [r7, #24]
 8001388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0203 	and.w	r2, r3, #3
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 80b4 	beq.w	8001536 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b60      	ldr	r3, [pc, #384]	; (8001554 <HAL_GPIO_Init+0x30c>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a5f      	ldr	r2, [pc, #380]	; (8001554 <HAL_GPIO_Init+0x30c>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b5d      	ldr	r3, [pc, #372]	; (8001554 <HAL_GPIO_Init+0x30c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ea:	4a5b      	ldr	r2, [pc, #364]	; (8001558 <HAL_GPIO_Init+0x310>)
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	3302      	adds	r3, #2
 80013f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	220f      	movs	r2, #15
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a52      	ldr	r2, [pc, #328]	; (800155c <HAL_GPIO_Init+0x314>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d02b      	beq.n	800146e <HAL_GPIO_Init+0x226>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a51      	ldr	r2, [pc, #324]	; (8001560 <HAL_GPIO_Init+0x318>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d025      	beq.n	800146a <HAL_GPIO_Init+0x222>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a50      	ldr	r2, [pc, #320]	; (8001564 <HAL_GPIO_Init+0x31c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d01f      	beq.n	8001466 <HAL_GPIO_Init+0x21e>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4f      	ldr	r2, [pc, #316]	; (8001568 <HAL_GPIO_Init+0x320>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d019      	beq.n	8001462 <HAL_GPIO_Init+0x21a>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4e      	ldr	r2, [pc, #312]	; (800156c <HAL_GPIO_Init+0x324>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d013      	beq.n	800145e <HAL_GPIO_Init+0x216>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4d      	ldr	r2, [pc, #308]	; (8001570 <HAL_GPIO_Init+0x328>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d00d      	beq.n	800145a <HAL_GPIO_Init+0x212>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4c      	ldr	r2, [pc, #304]	; (8001574 <HAL_GPIO_Init+0x32c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d007      	beq.n	8001456 <HAL_GPIO_Init+0x20e>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4b      	ldr	r2, [pc, #300]	; (8001578 <HAL_GPIO_Init+0x330>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d101      	bne.n	8001452 <HAL_GPIO_Init+0x20a>
 800144e:	2307      	movs	r3, #7
 8001450:	e00e      	b.n	8001470 <HAL_GPIO_Init+0x228>
 8001452:	2308      	movs	r3, #8
 8001454:	e00c      	b.n	8001470 <HAL_GPIO_Init+0x228>
 8001456:	2306      	movs	r3, #6
 8001458:	e00a      	b.n	8001470 <HAL_GPIO_Init+0x228>
 800145a:	2305      	movs	r3, #5
 800145c:	e008      	b.n	8001470 <HAL_GPIO_Init+0x228>
 800145e:	2304      	movs	r3, #4
 8001460:	e006      	b.n	8001470 <HAL_GPIO_Init+0x228>
 8001462:	2303      	movs	r3, #3
 8001464:	e004      	b.n	8001470 <HAL_GPIO_Init+0x228>
 8001466:	2302      	movs	r3, #2
 8001468:	e002      	b.n	8001470 <HAL_GPIO_Init+0x228>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <HAL_GPIO_Init+0x228>
 800146e:	2300      	movs	r3, #0
 8001470:	69fa      	ldr	r2, [r7, #28]
 8001472:	f002 0203 	and.w	r2, r2, #3
 8001476:	0092      	lsls	r2, r2, #2
 8001478:	4093      	lsls	r3, r2
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001480:	4935      	ldr	r1, [pc, #212]	; (8001558 <HAL_GPIO_Init+0x310>)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	3302      	adds	r3, #2
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800148e:	4b3b      	ldr	r3, [pc, #236]	; (800157c <HAL_GPIO_Init+0x334>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014b2:	4a32      	ldr	r2, [pc, #200]	; (800157c <HAL_GPIO_Init+0x334>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014b8:	4b30      	ldr	r3, [pc, #192]	; (800157c <HAL_GPIO_Init+0x334>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014dc:	4a27      	ldr	r2, [pc, #156]	; (800157c <HAL_GPIO_Init+0x334>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <HAL_GPIO_Init+0x334>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001506:	4a1d      	ldr	r2, [pc, #116]	; (800157c <HAL_GPIO_Init+0x334>)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <HAL_GPIO_Init+0x334>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001530:	4a12      	ldr	r2, [pc, #72]	; (800157c <HAL_GPIO_Init+0x334>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3301      	adds	r3, #1
 800153a:	61fb      	str	r3, [r7, #28]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	2b0f      	cmp	r3, #15
 8001540:	f67f ae90 	bls.w	8001264 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3724      	adds	r7, #36	; 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	40013800 	.word	0x40013800
 800155c:	40020000 	.word	0x40020000
 8001560:	40020400 	.word	0x40020400
 8001564:	40020800 	.word	0x40020800
 8001568:	40020c00 	.word	0x40020c00
 800156c:	40021000 	.word	0x40021000
 8001570:	40021400 	.word	0x40021400
 8001574:	40021800 	.word	0x40021800
 8001578:	40021c00 	.word	0x40021c00
 800157c:	40013c00 	.word	0x40013c00

08001580 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001580:	b480      	push	{r7}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	e0cd      	b.n	8001738 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800159c:	2201      	movs	r2, #1
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	f040 80bd 	bne.w	8001732 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80015b8:	4a65      	ldr	r2, [pc, #404]	; (8001750 <HAL_GPIO_DeInit+0x1d0>)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	3302      	adds	r3, #2
 80015c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	220f      	movs	r2, #15
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	68ba      	ldr	r2, [r7, #8]
 80015d6:	4013      	ands	r3, r2
 80015d8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a5d      	ldr	r2, [pc, #372]	; (8001754 <HAL_GPIO_DeInit+0x1d4>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d02b      	beq.n	800163a <HAL_GPIO_DeInit+0xba>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a5c      	ldr	r2, [pc, #368]	; (8001758 <HAL_GPIO_DeInit+0x1d8>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d025      	beq.n	8001636 <HAL_GPIO_DeInit+0xb6>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a5b      	ldr	r2, [pc, #364]	; (800175c <HAL_GPIO_DeInit+0x1dc>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d01f      	beq.n	8001632 <HAL_GPIO_DeInit+0xb2>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a5a      	ldr	r2, [pc, #360]	; (8001760 <HAL_GPIO_DeInit+0x1e0>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d019      	beq.n	800162e <HAL_GPIO_DeInit+0xae>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a59      	ldr	r2, [pc, #356]	; (8001764 <HAL_GPIO_DeInit+0x1e4>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d013      	beq.n	800162a <HAL_GPIO_DeInit+0xaa>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a58      	ldr	r2, [pc, #352]	; (8001768 <HAL_GPIO_DeInit+0x1e8>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d00d      	beq.n	8001626 <HAL_GPIO_DeInit+0xa6>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a57      	ldr	r2, [pc, #348]	; (800176c <HAL_GPIO_DeInit+0x1ec>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d007      	beq.n	8001622 <HAL_GPIO_DeInit+0xa2>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a56      	ldr	r2, [pc, #344]	; (8001770 <HAL_GPIO_DeInit+0x1f0>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d101      	bne.n	800161e <HAL_GPIO_DeInit+0x9e>
 800161a:	2307      	movs	r3, #7
 800161c:	e00e      	b.n	800163c <HAL_GPIO_DeInit+0xbc>
 800161e:	2308      	movs	r3, #8
 8001620:	e00c      	b.n	800163c <HAL_GPIO_DeInit+0xbc>
 8001622:	2306      	movs	r3, #6
 8001624:	e00a      	b.n	800163c <HAL_GPIO_DeInit+0xbc>
 8001626:	2305      	movs	r3, #5
 8001628:	e008      	b.n	800163c <HAL_GPIO_DeInit+0xbc>
 800162a:	2304      	movs	r3, #4
 800162c:	e006      	b.n	800163c <HAL_GPIO_DeInit+0xbc>
 800162e:	2303      	movs	r3, #3
 8001630:	e004      	b.n	800163c <HAL_GPIO_DeInit+0xbc>
 8001632:	2302      	movs	r3, #2
 8001634:	e002      	b.n	800163c <HAL_GPIO_DeInit+0xbc>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <HAL_GPIO_DeInit+0xbc>
 800163a:	2300      	movs	r3, #0
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	f002 0203 	and.w	r2, r2, #3
 8001642:	0092      	lsls	r2, r2, #2
 8001644:	4093      	lsls	r3, r2
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	429a      	cmp	r2, r3
 800164a:	d132      	bne.n	80016b2 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800164c:	4b49      	ldr	r3, [pc, #292]	; (8001774 <HAL_GPIO_DeInit+0x1f4>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	43db      	mvns	r3, r3
 8001654:	4947      	ldr	r1, [pc, #284]	; (8001774 <HAL_GPIO_DeInit+0x1f4>)
 8001656:	4013      	ands	r3, r2
 8001658:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800165a:	4b46      	ldr	r3, [pc, #280]	; (8001774 <HAL_GPIO_DeInit+0x1f4>)
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	43db      	mvns	r3, r3
 8001662:	4944      	ldr	r1, [pc, #272]	; (8001774 <HAL_GPIO_DeInit+0x1f4>)
 8001664:	4013      	ands	r3, r2
 8001666:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001668:	4b42      	ldr	r3, [pc, #264]	; (8001774 <HAL_GPIO_DeInit+0x1f4>)
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	43db      	mvns	r3, r3
 8001670:	4940      	ldr	r1, [pc, #256]	; (8001774 <HAL_GPIO_DeInit+0x1f4>)
 8001672:	4013      	ands	r3, r2
 8001674:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001676:	4b3f      	ldr	r3, [pc, #252]	; (8001774 <HAL_GPIO_DeInit+0x1f4>)
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	43db      	mvns	r3, r3
 800167e:	493d      	ldr	r1, [pc, #244]	; (8001774 <HAL_GPIO_DeInit+0x1f4>)
 8001680:	4013      	ands	r3, r2
 8001682:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	220f      	movs	r2, #15
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001694:	4a2e      	ldr	r2, [pc, #184]	; (8001750 <HAL_GPIO_DeInit+0x1d0>)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	089b      	lsrs	r3, r3, #2
 800169a:	3302      	adds	r3, #2
 800169c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	43da      	mvns	r2, r3
 80016a4:	482a      	ldr	r0, [pc, #168]	; (8001750 <HAL_GPIO_DeInit+0x1d0>)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	089b      	lsrs	r3, r3, #2
 80016aa:	400a      	ands	r2, r1
 80016ac:	3302      	adds	r3, #2
 80016ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	2103      	movs	r1, #3
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	401a      	ands	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	08da      	lsrs	r2, r3, #3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3208      	adds	r2, #8
 80016d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	220f      	movs	r2, #15
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	08d2      	lsrs	r2, r2, #3
 80016e8:	4019      	ands	r1, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3208      	adds	r2, #8
 80016ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	2103      	movs	r1, #3
 80016fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	401a      	ands	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	2101      	movs	r1, #1
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	fa01 f303 	lsl.w	r3, r1, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	401a      	ands	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	2103      	movs	r1, #3
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	401a      	ands	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	3301      	adds	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	2b0f      	cmp	r3, #15
 800173c:	f67f af2e 	bls.w	800159c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	371c      	adds	r7, #28
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40013800 	.word	0x40013800
 8001754:	40020000 	.word	0x40020000
 8001758:	40020400 	.word	0x40020400
 800175c:	40020800 	.word	0x40020800
 8001760:	40020c00 	.word	0x40020c00
 8001764:	40021000 	.word	0x40021000
 8001768:	40021400 	.word	0x40021400
 800176c:	40021800 	.word	0x40021800
 8001770:	40021c00 	.word	0x40021c00
 8001774:	40013c00 	.word	0x40013c00

08001778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	807b      	strh	r3, [r7, #2]
 8001784:	4613      	mov	r3, r2
 8001786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001788:	787b      	ldrb	r3, [r7, #1]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800178e:	887a      	ldrh	r2, [r7, #2]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001794:	e003      	b.n	800179e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001796:	887b      	ldrh	r3, [r7, #2]
 8001798:	041a      	lsls	r2, r3, #16
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	619a      	str	r2, [r3, #24]
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e264      	b.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d075      	beq.n	80018b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017ca:	4ba3      	ldr	r3, [pc, #652]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d00c      	beq.n	80017f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017d6:	4ba0      	ldr	r3, [pc, #640]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d112      	bne.n	8001808 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017e2:	4b9d      	ldr	r3, [pc, #628]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017ee:	d10b      	bne.n	8001808 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f0:	4b99      	ldr	r3, [pc, #612]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d05b      	beq.n	80018b4 <HAL_RCC_OscConfig+0x108>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d157      	bne.n	80018b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e23f      	b.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001810:	d106      	bne.n	8001820 <HAL_RCC_OscConfig+0x74>
 8001812:	4b91      	ldr	r3, [pc, #580]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a90      	ldr	r2, [pc, #576]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 8001818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e01d      	b.n	800185c <HAL_RCC_OscConfig+0xb0>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001828:	d10c      	bne.n	8001844 <HAL_RCC_OscConfig+0x98>
 800182a:	4b8b      	ldr	r3, [pc, #556]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a8a      	ldr	r2, [pc, #552]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 8001830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	4b88      	ldr	r3, [pc, #544]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a87      	ldr	r2, [pc, #540]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 800183c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	e00b      	b.n	800185c <HAL_RCC_OscConfig+0xb0>
 8001844:	4b84      	ldr	r3, [pc, #528]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a83      	ldr	r2, [pc, #524]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 800184a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	4b81      	ldr	r3, [pc, #516]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a80      	ldr	r2, [pc, #512]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 8001856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d013      	beq.n	800188c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001864:	f7ff fba0 	bl	8000fa8 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800186c:	f7ff fb9c 	bl	8000fa8 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b64      	cmp	r3, #100	; 0x64
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e204      	b.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187e:	4b76      	ldr	r3, [pc, #472]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0xc0>
 800188a:	e014      	b.n	80018b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff fb8c 	bl	8000fa8 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001894:	f7ff fb88 	bl	8000fa8 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	; 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e1f0      	b.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a6:	4b6c      	ldr	r3, [pc, #432]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0xe8>
 80018b2:	e000      	b.n	80018b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d063      	beq.n	800198a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018c2:	4b65      	ldr	r3, [pc, #404]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00b      	beq.n	80018e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ce:	4b62      	ldr	r3, [pc, #392]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	d11c      	bne.n	8001914 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018da:	4b5f      	ldr	r3, [pc, #380]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d116      	bne.n	8001914 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e6:	4b5c      	ldr	r3, [pc, #368]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d005      	beq.n	80018fe <HAL_RCC_OscConfig+0x152>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d001      	beq.n	80018fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e1c4      	b.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fe:	4b56      	ldr	r3, [pc, #344]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4952      	ldr	r1, [pc, #328]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 800190e:	4313      	orrs	r3, r2
 8001910:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001912:	e03a      	b.n	800198a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d020      	beq.n	800195e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800191c:	4b4f      	ldr	r3, [pc, #316]	; (8001a5c <HAL_RCC_OscConfig+0x2b0>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001922:	f7ff fb41 	bl	8000fa8 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800192a:	f7ff fb3d 	bl	8000fa8 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e1a5      	b.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193c:	4b46      	ldr	r3, [pc, #280]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001948:	4b43      	ldr	r3, [pc, #268]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4940      	ldr	r1, [pc, #256]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 8001958:	4313      	orrs	r3, r2
 800195a:	600b      	str	r3, [r1, #0]
 800195c:	e015      	b.n	800198a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800195e:	4b3f      	ldr	r3, [pc, #252]	; (8001a5c <HAL_RCC_OscConfig+0x2b0>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff fb20 	bl	8000fa8 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800196c:	f7ff fb1c 	bl	8000fa8 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e184      	b.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800197e:	4b36      	ldr	r3, [pc, #216]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d030      	beq.n	80019f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d016      	beq.n	80019cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800199e:	4b30      	ldr	r3, [pc, #192]	; (8001a60 <HAL_RCC_OscConfig+0x2b4>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a4:	f7ff fb00 	bl	8000fa8 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ac:	f7ff fafc 	bl	8000fa8 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e164      	b.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019be:	4b26      	ldr	r3, [pc, #152]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 80019c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCC_OscConfig+0x200>
 80019ca:	e015      	b.n	80019f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019cc:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <HAL_RCC_OscConfig+0x2b4>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d2:	f7ff fae9 	bl	8000fa8 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019da:	f7ff fae5 	bl	8000fa8 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e14d      	b.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ec:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 80019ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f0      	bne.n	80019da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 80a0 	beq.w	8001b46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a0a:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10f      	bne.n	8001a36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	4a0e      	ldr	r2, [pc, #56]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a24:	6413      	str	r3, [r2, #64]	; 0x40
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <HAL_RCC_OscConfig+0x2ac>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a32:	2301      	movs	r3, #1
 8001a34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_RCC_OscConfig+0x2b8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d121      	bne.n	8001a86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <HAL_RCC_OscConfig+0x2b8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <HAL_RCC_OscConfig+0x2b8>)
 8001a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a4e:	f7ff faab 	bl	8000fa8 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a54:	e011      	b.n	8001a7a <HAL_RCC_OscConfig+0x2ce>
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	42470000 	.word	0x42470000
 8001a60:	42470e80 	.word	0x42470e80
 8001a64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a68:	f7ff fa9e 	bl	8000fa8 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e106      	b.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7a:	4b85      	ldr	r3, [pc, #532]	; (8001c90 <HAL_RCC_OscConfig+0x4e4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d106      	bne.n	8001a9c <HAL_RCC_OscConfig+0x2f0>
 8001a8e:	4b81      	ldr	r3, [pc, #516]	; (8001c94 <HAL_RCC_OscConfig+0x4e8>)
 8001a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a92:	4a80      	ldr	r2, [pc, #512]	; (8001c94 <HAL_RCC_OscConfig+0x4e8>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6713      	str	r3, [r2, #112]	; 0x70
 8001a9a:	e01c      	b.n	8001ad6 <HAL_RCC_OscConfig+0x32a>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b05      	cmp	r3, #5
 8001aa2:	d10c      	bne.n	8001abe <HAL_RCC_OscConfig+0x312>
 8001aa4:	4b7b      	ldr	r3, [pc, #492]	; (8001c94 <HAL_RCC_OscConfig+0x4e8>)
 8001aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa8:	4a7a      	ldr	r2, [pc, #488]	; (8001c94 <HAL_RCC_OscConfig+0x4e8>)
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab0:	4b78      	ldr	r3, [pc, #480]	; (8001c94 <HAL_RCC_OscConfig+0x4e8>)
 8001ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab4:	4a77      	ldr	r2, [pc, #476]	; (8001c94 <HAL_RCC_OscConfig+0x4e8>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6713      	str	r3, [r2, #112]	; 0x70
 8001abc:	e00b      	b.n	8001ad6 <HAL_RCC_OscConfig+0x32a>
 8001abe:	4b75      	ldr	r3, [pc, #468]	; (8001c94 <HAL_RCC_OscConfig+0x4e8>)
 8001ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac2:	4a74      	ldr	r2, [pc, #464]	; (8001c94 <HAL_RCC_OscConfig+0x4e8>)
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8001aca:	4b72      	ldr	r3, [pc, #456]	; (8001c94 <HAL_RCC_OscConfig+0x4e8>)
 8001acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ace:	4a71      	ldr	r2, [pc, #452]	; (8001c94 <HAL_RCC_OscConfig+0x4e8>)
 8001ad0:	f023 0304 	bic.w	r3, r3, #4
 8001ad4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d015      	beq.n	8001b0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ade:	f7ff fa63 	bl	8000fa8 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae4:	e00a      	b.n	8001afc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae6:	f7ff fa5f 	bl	8000fa8 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e0c5      	b.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001afc:	4b65      	ldr	r3, [pc, #404]	; (8001c94 <HAL_RCC_OscConfig+0x4e8>)
 8001afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0ee      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x33a>
 8001b08:	e014      	b.n	8001b34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0a:	f7ff fa4d 	bl	8000fa8 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b10:	e00a      	b.n	8001b28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b12:	f7ff fa49 	bl	8000fa8 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e0af      	b.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b28:	4b5a      	ldr	r3, [pc, #360]	; (8001c94 <HAL_RCC_OscConfig+0x4e8>)
 8001b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1ee      	bne.n	8001b12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b34:	7dfb      	ldrb	r3, [r7, #23]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d105      	bne.n	8001b46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b3a:	4b56      	ldr	r3, [pc, #344]	; (8001c94 <HAL_RCC_OscConfig+0x4e8>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	4a55      	ldr	r2, [pc, #340]	; (8001c94 <HAL_RCC_OscConfig+0x4e8>)
 8001b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 809b 	beq.w	8001c86 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b50:	4b50      	ldr	r3, [pc, #320]	; (8001c94 <HAL_RCC_OscConfig+0x4e8>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 030c 	and.w	r3, r3, #12
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d05c      	beq.n	8001c16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d141      	bne.n	8001be8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b64:	4b4c      	ldr	r3, [pc, #304]	; (8001c98 <HAL_RCC_OscConfig+0x4ec>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7ff fa1d 	bl	8000fa8 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b72:	f7ff fa19 	bl	8000fa8 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e081      	b.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b84:	4b43      	ldr	r3, [pc, #268]	; (8001c94 <HAL_RCC_OscConfig+0x4e8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f0      	bne.n	8001b72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69da      	ldr	r2, [r3, #28]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	019b      	lsls	r3, r3, #6
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba6:	085b      	lsrs	r3, r3, #1
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	041b      	lsls	r3, r3, #16
 8001bac:	431a      	orrs	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb2:	061b      	lsls	r3, r3, #24
 8001bb4:	4937      	ldr	r1, [pc, #220]	; (8001c94 <HAL_RCC_OscConfig+0x4e8>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bba:	4b37      	ldr	r3, [pc, #220]	; (8001c98 <HAL_RCC_OscConfig+0x4ec>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff f9f2 	bl	8000fa8 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc8:	f7ff f9ee 	bl	8000fa8 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e056      	b.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bda:	4b2e      	ldr	r3, [pc, #184]	; (8001c94 <HAL_RCC_OscConfig+0x4e8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x41c>
 8001be6:	e04e      	b.n	8001c86 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be8:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <HAL_RCC_OscConfig+0x4ec>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bee:	f7ff f9db 	bl	8000fa8 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf6:	f7ff f9d7 	bl	8000fa8 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e03f      	b.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c08:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <HAL_RCC_OscConfig+0x4e8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1f0      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x44a>
 8001c14:	e037      	b.n	8001c86 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d101      	bne.n	8001c22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e032      	b.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c22:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <HAL_RCC_OscConfig+0x4e8>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d028      	beq.n	8001c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d121      	bne.n	8001c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d11a      	bne.n	8001c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c52:	4013      	ands	r3, r2
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c58:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d111      	bne.n	8001c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c68:	085b      	lsrs	r3, r3, #1
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d001      	beq.n	8001c86 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40007000 	.word	0x40007000
 8001c94:	40023800 	.word	0x40023800
 8001c98:	42470060 	.word	0x42470060

08001c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0cc      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb0:	4b68      	ldr	r3, [pc, #416]	; (8001e54 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d90c      	bls.n	8001cd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cbe:	4b65      	ldr	r3, [pc, #404]	; (8001e54 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc6:	4b63      	ldr	r3, [pc, #396]	; (8001e54 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0b8      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d020      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cf0:	4b59      	ldr	r3, [pc, #356]	; (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	4a58      	ldr	r2, [pc, #352]	; (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d08:	4b53      	ldr	r3, [pc, #332]	; (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	4a52      	ldr	r2, [pc, #328]	; (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d14:	4b50      	ldr	r3, [pc, #320]	; (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	494d      	ldr	r1, [pc, #308]	; (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d044      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d107      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3a:	4b47      	ldr	r3, [pc, #284]	; (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d119      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e07f      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d003      	beq.n	8001d5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d107      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d5a:	4b3f      	ldr	r3, [pc, #252]	; (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d109      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e06f      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6a:	4b3b      	ldr	r3, [pc, #236]	; (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e067      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d7a:	4b37      	ldr	r3, [pc, #220]	; (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f023 0203 	bic.w	r2, r3, #3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	4934      	ldr	r1, [pc, #208]	; (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d8c:	f7ff f90c 	bl	8000fa8 <HAL_GetTick>
 8001d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d92:	e00a      	b.n	8001daa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d94:	f7ff f908 	bl	8000fa8 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e04f      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001daa:	4b2b      	ldr	r3, [pc, #172]	; (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 020c 	and.w	r2, r3, #12
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d1eb      	bne.n	8001d94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dbc:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <HAL_RCC_ClockConfig+0x1b8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d20c      	bcs.n	8001de4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dca:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <HAL_RCC_ClockConfig+0x1b8>)
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd2:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e032      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d008      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001df0:	4b19      	ldr	r3, [pc, #100]	; (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	4916      	ldr	r1, [pc, #88]	; (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d009      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e0e:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	490e      	ldr	r1, [pc, #56]	; (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e22:	f000 f821 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 8001e26:	4602      	mov	r2, r0
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	091b      	lsrs	r3, r3, #4
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	490a      	ldr	r1, [pc, #40]	; (8001e5c <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	5ccb      	ldrb	r3, [r1, r3]
 8001e36:	fa22 f303 	lsr.w	r3, r2, r3
 8001e3a:	4a09      	ldr	r2, [pc, #36]	; (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <HAL_RCC_ClockConfig+0x1c8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff f86c 	bl	8000f20 <HAL_InitTick>

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40023c00 	.word	0x40023c00
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	08003c64 	.word	0x08003c64
 8001e60:	20000000 	.word	0x20000000
 8001e64:	20000004 	.word	0x20000004

08001e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e68:	b5b0      	push	{r4, r5, r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e6e:	2100      	movs	r1, #0
 8001e70:	6079      	str	r1, [r7, #4]
 8001e72:	2100      	movs	r1, #0
 8001e74:	60f9      	str	r1, [r7, #12]
 8001e76:	2100      	movs	r1, #0
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e7e:	4952      	ldr	r1, [pc, #328]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e80:	6889      	ldr	r1, [r1, #8]
 8001e82:	f001 010c 	and.w	r1, r1, #12
 8001e86:	2908      	cmp	r1, #8
 8001e88:	d00d      	beq.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x3e>
 8001e8a:	2908      	cmp	r1, #8
 8001e8c:	f200 8094 	bhi.w	8001fb8 <HAL_RCC_GetSysClockFreq+0x150>
 8001e90:	2900      	cmp	r1, #0
 8001e92:	d002      	beq.n	8001e9a <HAL_RCC_GetSysClockFreq+0x32>
 8001e94:	2904      	cmp	r1, #4
 8001e96:	d003      	beq.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x38>
 8001e98:	e08e      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e9a:	4b4c      	ldr	r3, [pc, #304]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x164>)
 8001e9c:	60bb      	str	r3, [r7, #8]
       break;
 8001e9e:	e08e      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ea0:	4b4b      	ldr	r3, [pc, #300]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001ea2:	60bb      	str	r3, [r7, #8]
      break;
 8001ea4:	e08b      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ea6:	4948      	ldr	r1, [pc, #288]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ea8:	6849      	ldr	r1, [r1, #4]
 8001eaa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001eae:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eb0:	4945      	ldr	r1, [pc, #276]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001eb2:	6849      	ldr	r1, [r1, #4]
 8001eb4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001eb8:	2900      	cmp	r1, #0
 8001eba:	d024      	beq.n	8001f06 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ebc:	4942      	ldr	r1, [pc, #264]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ebe:	6849      	ldr	r1, [r1, #4]
 8001ec0:	0989      	lsrs	r1, r1, #6
 8001ec2:	4608      	mov	r0, r1
 8001ec4:	f04f 0100 	mov.w	r1, #0
 8001ec8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001ecc:	f04f 0500 	mov.w	r5, #0
 8001ed0:	ea00 0204 	and.w	r2, r0, r4
 8001ed4:	ea01 0305 	and.w	r3, r1, r5
 8001ed8:	493d      	ldr	r1, [pc, #244]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001eda:	fb01 f003 	mul.w	r0, r1, r3
 8001ede:	2100      	movs	r1, #0
 8001ee0:	fb01 f102 	mul.w	r1, r1, r2
 8001ee4:	1844      	adds	r4, r0, r1
 8001ee6:	493a      	ldr	r1, [pc, #232]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001ee8:	fba2 0101 	umull	r0, r1, r2, r1
 8001eec:	1863      	adds	r3, r4, r1
 8001eee:	4619      	mov	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	f7fe f966 	bl	80001c8 <__aeabi_uldivmod>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4613      	mov	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	e04a      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f06:	4b30      	ldr	r3, [pc, #192]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	099b      	lsrs	r3, r3, #6
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f16:	f04f 0100 	mov.w	r1, #0
 8001f1a:	ea02 0400 	and.w	r4, r2, r0
 8001f1e:	ea03 0501 	and.w	r5, r3, r1
 8001f22:	4620      	mov	r0, r4
 8001f24:	4629      	mov	r1, r5
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	014b      	lsls	r3, r1, #5
 8001f30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f34:	0142      	lsls	r2, r0, #5
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	1b00      	subs	r0, r0, r4
 8001f3c:	eb61 0105 	sbc.w	r1, r1, r5
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	018b      	lsls	r3, r1, #6
 8001f4a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f4e:	0182      	lsls	r2, r0, #6
 8001f50:	1a12      	subs	r2, r2, r0
 8001f52:	eb63 0301 	sbc.w	r3, r3, r1
 8001f56:	f04f 0000 	mov.w	r0, #0
 8001f5a:	f04f 0100 	mov.w	r1, #0
 8001f5e:	00d9      	lsls	r1, r3, #3
 8001f60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f64:	00d0      	lsls	r0, r2, #3
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	1912      	adds	r2, r2, r4
 8001f6c:	eb45 0303 	adc.w	r3, r5, r3
 8001f70:	f04f 0000 	mov.w	r0, #0
 8001f74:	f04f 0100 	mov.w	r1, #0
 8001f78:	0299      	lsls	r1, r3, #10
 8001f7a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f7e:	0290      	lsls	r0, r2, #10
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	f7fe f91a 	bl	80001c8 <__aeabi_uldivmod>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4613      	mov	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	0c1b      	lsrs	r3, r3, #16
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb4:	60bb      	str	r3, [r7, #8]
      break;
 8001fb6:	e002      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x164>)
 8001fba:	60bb      	str	r3, [r7, #8]
      break;
 8001fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fbe:	68bb      	ldr	r3, [r7, #8]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	00f42400 	.word	0x00f42400
 8001fd0:	017d7840 	.word	0x017d7840

08001fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e041      	b.n	800206a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d106      	bne.n	8002000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7fe fe2a 	bl	8000c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2202      	movs	r2, #2
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3304      	adds	r3, #4
 8002010:	4619      	mov	r1, r3
 8002012:	4610      	mov	r0, r2
 8002014:	f000 fc7a 	bl	800290c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b01      	cmp	r3, #1
 8002086:	d001      	beq.n	800208c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e04e      	b.n	800212a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2202      	movs	r2, #2
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0201 	orr.w	r2, r2, #1
 80020a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a23      	ldr	r2, [pc, #140]	; (8002138 <HAL_TIM_Base_Start_IT+0xc4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d022      	beq.n	80020f4 <HAL_TIM_Base_Start_IT+0x80>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b6:	d01d      	beq.n	80020f4 <HAL_TIM_Base_Start_IT+0x80>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a1f      	ldr	r2, [pc, #124]	; (800213c <HAL_TIM_Base_Start_IT+0xc8>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d018      	beq.n	80020f4 <HAL_TIM_Base_Start_IT+0x80>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a1e      	ldr	r2, [pc, #120]	; (8002140 <HAL_TIM_Base_Start_IT+0xcc>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d013      	beq.n	80020f4 <HAL_TIM_Base_Start_IT+0x80>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a1c      	ldr	r2, [pc, #112]	; (8002144 <HAL_TIM_Base_Start_IT+0xd0>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00e      	beq.n	80020f4 <HAL_TIM_Base_Start_IT+0x80>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a1b      	ldr	r2, [pc, #108]	; (8002148 <HAL_TIM_Base_Start_IT+0xd4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d009      	beq.n	80020f4 <HAL_TIM_Base_Start_IT+0x80>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a19      	ldr	r2, [pc, #100]	; (800214c <HAL_TIM_Base_Start_IT+0xd8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d004      	beq.n	80020f4 <HAL_TIM_Base_Start_IT+0x80>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a18      	ldr	r2, [pc, #96]	; (8002150 <HAL_TIM_Base_Start_IT+0xdc>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d111      	bne.n	8002118 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b06      	cmp	r3, #6
 8002104:	d010      	beq.n	8002128 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f042 0201 	orr.w	r2, r2, #1
 8002114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002116:	e007      	b.n	8002128 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0201 	orr.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40010000 	.word	0x40010000
 800213c:	40000400 	.word	0x40000400
 8002140:	40000800 	.word	0x40000800
 8002144:	40000c00 	.word	0x40000c00
 8002148:	40010400 	.word	0x40010400
 800214c:	40014000 	.word	0x40014000
 8002150:	40001800 	.word	0x40001800

08002154 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e041      	b.n	80021ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d106      	bne.n	8002180 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f839 	bl	80021f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2202      	movs	r2, #2
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3304      	adds	r3, #4
 8002190:	4619      	mov	r1, r3
 8002192:	4610      	mov	r0, r2
 8002194:	f000 fbba 	bl	800290c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d109      	bne.n	800222c <HAL_TIM_PWM_Start+0x24>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b01      	cmp	r3, #1
 8002222:	bf14      	ite	ne
 8002224:	2301      	movne	r3, #1
 8002226:	2300      	moveq	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	e022      	b.n	8002272 <HAL_TIM_PWM_Start+0x6a>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2b04      	cmp	r3, #4
 8002230:	d109      	bne.n	8002246 <HAL_TIM_PWM_Start+0x3e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b01      	cmp	r3, #1
 800223c:	bf14      	ite	ne
 800223e:	2301      	movne	r3, #1
 8002240:	2300      	moveq	r3, #0
 8002242:	b2db      	uxtb	r3, r3
 8002244:	e015      	b.n	8002272 <HAL_TIM_PWM_Start+0x6a>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b08      	cmp	r3, #8
 800224a:	d109      	bne.n	8002260 <HAL_TIM_PWM_Start+0x58>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b01      	cmp	r3, #1
 8002256:	bf14      	ite	ne
 8002258:	2301      	movne	r3, #1
 800225a:	2300      	moveq	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	e008      	b.n	8002272 <HAL_TIM_PWM_Start+0x6a>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b01      	cmp	r3, #1
 800226a:	bf14      	ite	ne
 800226c:	2301      	movne	r3, #1
 800226e:	2300      	moveq	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e07c      	b.n	8002374 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d104      	bne.n	800228a <HAL_TIM_PWM_Start+0x82>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002288:	e013      	b.n	80022b2 <HAL_TIM_PWM_Start+0xaa>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	2b04      	cmp	r3, #4
 800228e:	d104      	bne.n	800229a <HAL_TIM_PWM_Start+0x92>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002298:	e00b      	b.n	80022b2 <HAL_TIM_PWM_Start+0xaa>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2b08      	cmp	r3, #8
 800229e:	d104      	bne.n	80022aa <HAL_TIM_PWM_Start+0xa2>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2202      	movs	r2, #2
 80022a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022a8:	e003      	b.n	80022b2 <HAL_TIM_PWM_Start+0xaa>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2202      	movs	r2, #2
 80022ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2201      	movs	r2, #1
 80022b8:	6839      	ldr	r1, [r7, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fe10 	bl	8002ee0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a2d      	ldr	r2, [pc, #180]	; (800237c <HAL_TIM_PWM_Start+0x174>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d004      	beq.n	80022d4 <HAL_TIM_PWM_Start+0xcc>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a2c      	ldr	r2, [pc, #176]	; (8002380 <HAL_TIM_PWM_Start+0x178>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d101      	bne.n	80022d8 <HAL_TIM_PWM_Start+0xd0>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <HAL_TIM_PWM_Start+0xd2>
 80022d8:	2300      	movs	r3, #0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d007      	beq.n	80022ee <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a22      	ldr	r2, [pc, #136]	; (800237c <HAL_TIM_PWM_Start+0x174>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d022      	beq.n	800233e <HAL_TIM_PWM_Start+0x136>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002300:	d01d      	beq.n	800233e <HAL_TIM_PWM_Start+0x136>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a1f      	ldr	r2, [pc, #124]	; (8002384 <HAL_TIM_PWM_Start+0x17c>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d018      	beq.n	800233e <HAL_TIM_PWM_Start+0x136>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a1d      	ldr	r2, [pc, #116]	; (8002388 <HAL_TIM_PWM_Start+0x180>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d013      	beq.n	800233e <HAL_TIM_PWM_Start+0x136>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a1c      	ldr	r2, [pc, #112]	; (800238c <HAL_TIM_PWM_Start+0x184>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d00e      	beq.n	800233e <HAL_TIM_PWM_Start+0x136>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a16      	ldr	r2, [pc, #88]	; (8002380 <HAL_TIM_PWM_Start+0x178>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d009      	beq.n	800233e <HAL_TIM_PWM_Start+0x136>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a18      	ldr	r2, [pc, #96]	; (8002390 <HAL_TIM_PWM_Start+0x188>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d004      	beq.n	800233e <HAL_TIM_PWM_Start+0x136>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a16      	ldr	r2, [pc, #88]	; (8002394 <HAL_TIM_PWM_Start+0x18c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d111      	bne.n	8002362 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2b06      	cmp	r3, #6
 800234e:	d010      	beq.n	8002372 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002360:	e007      	b.n	8002372 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f042 0201 	orr.w	r2, r2, #1
 8002370:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40010000 	.word	0x40010000
 8002380:	40010400 	.word	0x40010400
 8002384:	40000400 	.word	0x40000400
 8002388:	40000800 	.word	0x40000800
 800238c:	40000c00 	.word	0x40000c00
 8002390:	40014000 	.word	0x40014000
 8002394:	40001800 	.word	0x40001800

08002398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d122      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d11b      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f06f 0202 	mvn.w	r2, #2
 80023c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 fa77 	bl	80028ce <HAL_TIM_IC_CaptureCallback>
 80023e0:	e005      	b.n	80023ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 fa69 	bl	80028ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 fa7a 	bl	80028e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f003 0304 	and.w	r3, r3, #4
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d122      	bne.n	8002448 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b04      	cmp	r3, #4
 800240e:	d11b      	bne.n	8002448 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f06f 0204 	mvn.w	r2, #4
 8002418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2202      	movs	r2, #2
 800241e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 fa4d 	bl	80028ce <HAL_TIM_IC_CaptureCallback>
 8002434:	e005      	b.n	8002442 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 fa3f 	bl	80028ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 fa50 	bl	80028e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b08      	cmp	r3, #8
 8002454:	d122      	bne.n	800249c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b08      	cmp	r3, #8
 8002462:	d11b      	bne.n	800249c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f06f 0208 	mvn.w	r2, #8
 800246c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2204      	movs	r2, #4
 8002472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 fa23 	bl	80028ce <HAL_TIM_IC_CaptureCallback>
 8002488:	e005      	b.n	8002496 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 fa15 	bl	80028ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 fa26 	bl	80028e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b10      	cmp	r3, #16
 80024a8:	d122      	bne.n	80024f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	2b10      	cmp	r3, #16
 80024b6:	d11b      	bne.n	80024f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0210 	mvn.w	r2, #16
 80024c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2208      	movs	r2, #8
 80024c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f9f9 	bl	80028ce <HAL_TIM_IC_CaptureCallback>
 80024dc:	e005      	b.n	80024ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f9eb 	bl	80028ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f9fc 	bl	80028e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d10e      	bne.n	800251c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b01      	cmp	r3, #1
 800250a:	d107      	bne.n	800251c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0201 	mvn.w	r2, #1
 8002514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7fe faaa 	bl	8000a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002526:	2b80      	cmp	r3, #128	; 0x80
 8002528:	d10e      	bne.n	8002548 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002534:	2b80      	cmp	r3, #128	; 0x80
 8002536:	d107      	bne.n	8002548 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fdca 	bl	80030dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002552:	2b40      	cmp	r3, #64	; 0x40
 8002554:	d10e      	bne.n	8002574 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002560:	2b40      	cmp	r3, #64	; 0x40
 8002562:	d107      	bne.n	8002574 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800256c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f9c1 	bl	80028f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f003 0320 	and.w	r3, r3, #32
 800257e:	2b20      	cmp	r3, #32
 8002580:	d10e      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f003 0320 	and.w	r3, r3, #32
 800258c:	2b20      	cmp	r3, #32
 800258e:	d107      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0220 	mvn.w	r2, #32
 8002598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 fd94 	bl	80030c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025a0:	bf00      	nop
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e0ae      	b.n	8002724 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b0c      	cmp	r3, #12
 80025d2:	f200 809f 	bhi.w	8002714 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80025d6:	a201      	add	r2, pc, #4	; (adr r2, 80025dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80025d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025dc:	08002611 	.word	0x08002611
 80025e0:	08002715 	.word	0x08002715
 80025e4:	08002715 	.word	0x08002715
 80025e8:	08002715 	.word	0x08002715
 80025ec:	08002651 	.word	0x08002651
 80025f0:	08002715 	.word	0x08002715
 80025f4:	08002715 	.word	0x08002715
 80025f8:	08002715 	.word	0x08002715
 80025fc:	08002693 	.word	0x08002693
 8002600:	08002715 	.word	0x08002715
 8002604:	08002715 	.word	0x08002715
 8002608:	08002715 	.word	0x08002715
 800260c:	080026d3 	.word	0x080026d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68b9      	ldr	r1, [r7, #8]
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fa18 	bl	8002a4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699a      	ldr	r2, [r3, #24]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0208 	orr.w	r2, r2, #8
 800262a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699a      	ldr	r2, [r3, #24]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0204 	bic.w	r2, r2, #4
 800263a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6999      	ldr	r1, [r3, #24]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	691a      	ldr	r2, [r3, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	619a      	str	r2, [r3, #24]
      break;
 800264e:	e064      	b.n	800271a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68b9      	ldr	r1, [r7, #8]
 8002656:	4618      	mov	r0, r3
 8002658:	f000 fa68 	bl	8002b2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699a      	ldr	r2, [r3, #24]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800266a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800267a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6999      	ldr	r1, [r3, #24]
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	021a      	lsls	r2, r3, #8
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	619a      	str	r2, [r3, #24]
      break;
 8002690:	e043      	b.n	800271a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68b9      	ldr	r1, [r7, #8]
 8002698:	4618      	mov	r0, r3
 800269a:	f000 fabd 	bl	8002c18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	69da      	ldr	r2, [r3, #28]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 0208 	orr.w	r2, r2, #8
 80026ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	69da      	ldr	r2, [r3, #28]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0204 	bic.w	r2, r2, #4
 80026bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	69d9      	ldr	r1, [r3, #28]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	61da      	str	r2, [r3, #28]
      break;
 80026d0:	e023      	b.n	800271a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68b9      	ldr	r1, [r7, #8]
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fb11 	bl	8002d00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	69da      	ldr	r2, [r3, #28]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	69da      	ldr	r2, [r3, #28]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	69d9      	ldr	r1, [r3, #28]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	021a      	lsls	r2, r3, #8
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	61da      	str	r2, [r3, #28]
      break;
 8002712:	e002      	b.n	800271a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	75fb      	strb	r3, [r7, #23]
      break;
 8002718:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002722:	7dfb      	ldrb	r3, [r7, #23]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_TIM_ConfigClockSource+0x1c>
 8002744:	2302      	movs	r3, #2
 8002746:	e0b4      	b.n	80028b2 <HAL_TIM_ConfigClockSource+0x186>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002766:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800276e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68ba      	ldr	r2, [r7, #8]
 8002776:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002780:	d03e      	beq.n	8002800 <HAL_TIM_ConfigClockSource+0xd4>
 8002782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002786:	f200 8087 	bhi.w	8002898 <HAL_TIM_ConfigClockSource+0x16c>
 800278a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278e:	f000 8086 	beq.w	800289e <HAL_TIM_ConfigClockSource+0x172>
 8002792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002796:	d87f      	bhi.n	8002898 <HAL_TIM_ConfigClockSource+0x16c>
 8002798:	2b70      	cmp	r3, #112	; 0x70
 800279a:	d01a      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0xa6>
 800279c:	2b70      	cmp	r3, #112	; 0x70
 800279e:	d87b      	bhi.n	8002898 <HAL_TIM_ConfigClockSource+0x16c>
 80027a0:	2b60      	cmp	r3, #96	; 0x60
 80027a2:	d050      	beq.n	8002846 <HAL_TIM_ConfigClockSource+0x11a>
 80027a4:	2b60      	cmp	r3, #96	; 0x60
 80027a6:	d877      	bhi.n	8002898 <HAL_TIM_ConfigClockSource+0x16c>
 80027a8:	2b50      	cmp	r3, #80	; 0x50
 80027aa:	d03c      	beq.n	8002826 <HAL_TIM_ConfigClockSource+0xfa>
 80027ac:	2b50      	cmp	r3, #80	; 0x50
 80027ae:	d873      	bhi.n	8002898 <HAL_TIM_ConfigClockSource+0x16c>
 80027b0:	2b40      	cmp	r3, #64	; 0x40
 80027b2:	d058      	beq.n	8002866 <HAL_TIM_ConfigClockSource+0x13a>
 80027b4:	2b40      	cmp	r3, #64	; 0x40
 80027b6:	d86f      	bhi.n	8002898 <HAL_TIM_ConfigClockSource+0x16c>
 80027b8:	2b30      	cmp	r3, #48	; 0x30
 80027ba:	d064      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0x15a>
 80027bc:	2b30      	cmp	r3, #48	; 0x30
 80027be:	d86b      	bhi.n	8002898 <HAL_TIM_ConfigClockSource+0x16c>
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d060      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0x15a>
 80027c4:	2b20      	cmp	r3, #32
 80027c6:	d867      	bhi.n	8002898 <HAL_TIM_ConfigClockSource+0x16c>
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d05c      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0x15a>
 80027cc:	2b10      	cmp	r3, #16
 80027ce:	d05a      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0x15a>
 80027d0:	e062      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6899      	ldr	r1, [r3, #8]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f000 fb5d 	bl	8002ea0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	609a      	str	r2, [r3, #8]
      break;
 80027fe:	e04f      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6818      	ldr	r0, [r3, #0]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	6899      	ldr	r1, [r3, #8]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f000 fb46 	bl	8002ea0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002822:	609a      	str	r2, [r3, #8]
      break;
 8002824:	e03c      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	6859      	ldr	r1, [r3, #4]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	461a      	mov	r2, r3
 8002834:	f000 faba 	bl	8002dac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2150      	movs	r1, #80	; 0x50
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fb13 	bl	8002e6a <TIM_ITRx_SetConfig>
      break;
 8002844:	e02c      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	6859      	ldr	r1, [r3, #4]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	461a      	mov	r2, r3
 8002854:	f000 fad9 	bl	8002e0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2160      	movs	r1, #96	; 0x60
 800285e:	4618      	mov	r0, r3
 8002860:	f000 fb03 	bl	8002e6a <TIM_ITRx_SetConfig>
      break;
 8002864:	e01c      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6859      	ldr	r1, [r3, #4]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	461a      	mov	r2, r3
 8002874:	f000 fa9a 	bl	8002dac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2140      	movs	r1, #64	; 0x40
 800287e:	4618      	mov	r0, r3
 8002880:	f000 faf3 	bl	8002e6a <TIM_ITRx_SetConfig>
      break;
 8002884:	e00c      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4619      	mov	r1, r3
 8002890:	4610      	mov	r0, r2
 8002892:	f000 faea 	bl	8002e6a <TIM_ITRx_SetConfig>
      break;
 8002896:	e003      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
      break;
 800289c:	e000      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800289e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a40      	ldr	r2, [pc, #256]	; (8002a20 <TIM_Base_SetConfig+0x114>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d013      	beq.n	800294c <TIM_Base_SetConfig+0x40>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800292a:	d00f      	beq.n	800294c <TIM_Base_SetConfig+0x40>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a3d      	ldr	r2, [pc, #244]	; (8002a24 <TIM_Base_SetConfig+0x118>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d00b      	beq.n	800294c <TIM_Base_SetConfig+0x40>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a3c      	ldr	r2, [pc, #240]	; (8002a28 <TIM_Base_SetConfig+0x11c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d007      	beq.n	800294c <TIM_Base_SetConfig+0x40>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a3b      	ldr	r2, [pc, #236]	; (8002a2c <TIM_Base_SetConfig+0x120>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d003      	beq.n	800294c <TIM_Base_SetConfig+0x40>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a3a      	ldr	r2, [pc, #232]	; (8002a30 <TIM_Base_SetConfig+0x124>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d108      	bne.n	800295e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a2f      	ldr	r2, [pc, #188]	; (8002a20 <TIM_Base_SetConfig+0x114>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d02b      	beq.n	80029be <TIM_Base_SetConfig+0xb2>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800296c:	d027      	beq.n	80029be <TIM_Base_SetConfig+0xb2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a2c      	ldr	r2, [pc, #176]	; (8002a24 <TIM_Base_SetConfig+0x118>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d023      	beq.n	80029be <TIM_Base_SetConfig+0xb2>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a2b      	ldr	r2, [pc, #172]	; (8002a28 <TIM_Base_SetConfig+0x11c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d01f      	beq.n	80029be <TIM_Base_SetConfig+0xb2>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a2a      	ldr	r2, [pc, #168]	; (8002a2c <TIM_Base_SetConfig+0x120>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d01b      	beq.n	80029be <TIM_Base_SetConfig+0xb2>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a29      	ldr	r2, [pc, #164]	; (8002a30 <TIM_Base_SetConfig+0x124>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d017      	beq.n	80029be <TIM_Base_SetConfig+0xb2>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a28      	ldr	r2, [pc, #160]	; (8002a34 <TIM_Base_SetConfig+0x128>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d013      	beq.n	80029be <TIM_Base_SetConfig+0xb2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a27      	ldr	r2, [pc, #156]	; (8002a38 <TIM_Base_SetConfig+0x12c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d00f      	beq.n	80029be <TIM_Base_SetConfig+0xb2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a26      	ldr	r2, [pc, #152]	; (8002a3c <TIM_Base_SetConfig+0x130>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00b      	beq.n	80029be <TIM_Base_SetConfig+0xb2>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a25      	ldr	r2, [pc, #148]	; (8002a40 <TIM_Base_SetConfig+0x134>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d007      	beq.n	80029be <TIM_Base_SetConfig+0xb2>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a24      	ldr	r2, [pc, #144]	; (8002a44 <TIM_Base_SetConfig+0x138>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d003      	beq.n	80029be <TIM_Base_SetConfig+0xb2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a23      	ldr	r2, [pc, #140]	; (8002a48 <TIM_Base_SetConfig+0x13c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d108      	bne.n	80029d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a0a      	ldr	r2, [pc, #40]	; (8002a20 <TIM_Base_SetConfig+0x114>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d003      	beq.n	8002a04 <TIM_Base_SetConfig+0xf8>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a0c      	ldr	r2, [pc, #48]	; (8002a30 <TIM_Base_SetConfig+0x124>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d103      	bne.n	8002a0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	615a      	str	r2, [r3, #20]
}
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40010000 	.word	0x40010000
 8002a24:	40000400 	.word	0x40000400
 8002a28:	40000800 	.word	0x40000800
 8002a2c:	40000c00 	.word	0x40000c00
 8002a30:	40010400 	.word	0x40010400
 8002a34:	40014000 	.word	0x40014000
 8002a38:	40014400 	.word	0x40014400
 8002a3c:	40014800 	.word	0x40014800
 8002a40:	40001800 	.word	0x40001800
 8002a44:	40001c00 	.word	0x40001c00
 8002a48:	40002000 	.word	0x40002000

08002a4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	f023 0201 	bic.w	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f023 0303 	bic.w	r3, r3, #3
 8002a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f023 0302 	bic.w	r3, r3, #2
 8002a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a20      	ldr	r2, [pc, #128]	; (8002b24 <TIM_OC1_SetConfig+0xd8>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d003      	beq.n	8002ab0 <TIM_OC1_SetConfig+0x64>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a1f      	ldr	r2, [pc, #124]	; (8002b28 <TIM_OC1_SetConfig+0xdc>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d10c      	bne.n	8002aca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f023 0308 	bic.w	r3, r3, #8
 8002ab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f023 0304 	bic.w	r3, r3, #4
 8002ac8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a15      	ldr	r2, [pc, #84]	; (8002b24 <TIM_OC1_SetConfig+0xd8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d003      	beq.n	8002ada <TIM_OC1_SetConfig+0x8e>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a14      	ldr	r2, [pc, #80]	; (8002b28 <TIM_OC1_SetConfig+0xdc>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d111      	bne.n	8002afe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	621a      	str	r2, [r3, #32]
}
 8002b18:	bf00      	nop
 8002b1a:	371c      	adds	r7, #28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	40010000 	.word	0x40010000
 8002b28:	40010400 	.word	0x40010400

08002b2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f023 0210 	bic.w	r2, r3, #16
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	021b      	lsls	r3, r3, #8
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f023 0320 	bic.w	r3, r3, #32
 8002b76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a22      	ldr	r2, [pc, #136]	; (8002c10 <TIM_OC2_SetConfig+0xe4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d003      	beq.n	8002b94 <TIM_OC2_SetConfig+0x68>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a21      	ldr	r2, [pc, #132]	; (8002c14 <TIM_OC2_SetConfig+0xe8>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d10d      	bne.n	8002bb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a17      	ldr	r2, [pc, #92]	; (8002c10 <TIM_OC2_SetConfig+0xe4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d003      	beq.n	8002bc0 <TIM_OC2_SetConfig+0x94>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a16      	ldr	r2, [pc, #88]	; (8002c14 <TIM_OC2_SetConfig+0xe8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d113      	bne.n	8002be8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	621a      	str	r2, [r3, #32]
}
 8002c02:	bf00      	nop
 8002c04:	371c      	adds	r7, #28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40010000 	.word	0x40010000
 8002c14:	40010400 	.word	0x40010400

08002c18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f023 0303 	bic.w	r3, r3, #3
 8002c4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	021b      	lsls	r3, r3, #8
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a21      	ldr	r2, [pc, #132]	; (8002cf8 <TIM_OC3_SetConfig+0xe0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d003      	beq.n	8002c7e <TIM_OC3_SetConfig+0x66>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a20      	ldr	r2, [pc, #128]	; (8002cfc <TIM_OC3_SetConfig+0xe4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d10d      	bne.n	8002c9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	021b      	lsls	r3, r3, #8
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a16      	ldr	r2, [pc, #88]	; (8002cf8 <TIM_OC3_SetConfig+0xe0>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d003      	beq.n	8002caa <TIM_OC3_SetConfig+0x92>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a15      	ldr	r2, [pc, #84]	; (8002cfc <TIM_OC3_SetConfig+0xe4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d113      	bne.n	8002cd2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	621a      	str	r2, [r3, #32]
}
 8002cec:	bf00      	nop
 8002cee:	371c      	adds	r7, #28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	40010000 	.word	0x40010000
 8002cfc:	40010400 	.word	0x40010400

08002d00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	021b      	lsls	r3, r3, #8
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	031b      	lsls	r3, r3, #12
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a12      	ldr	r2, [pc, #72]	; (8002da4 <TIM_OC4_SetConfig+0xa4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d003      	beq.n	8002d68 <TIM_OC4_SetConfig+0x68>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a11      	ldr	r2, [pc, #68]	; (8002da8 <TIM_OC4_SetConfig+0xa8>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d109      	bne.n	8002d7c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	019b      	lsls	r3, r3, #6
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	621a      	str	r2, [r3, #32]
}
 8002d96:	bf00      	nop
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40010000 	.word	0x40010000
 8002da8:	40010400 	.word	0x40010400

08002dac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	f023 0201 	bic.w	r2, r3, #1
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f023 030a 	bic.w	r3, r3, #10
 8002de8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	621a      	str	r2, [r3, #32]
}
 8002dfe:	bf00      	nop
 8002e00:	371c      	adds	r7, #28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b087      	sub	sp, #28
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	f023 0210 	bic.w	r2, r3, #16
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	031b      	lsls	r3, r3, #12
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	621a      	str	r2, [r3, #32]
}
 8002e5e:	bf00      	nop
 8002e60:	371c      	adds	r7, #28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b085      	sub	sp, #20
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f043 0307 	orr.w	r3, r3, #7
 8002e8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	609a      	str	r2, [r3, #8]
}
 8002e94:	bf00      	nop
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	021a      	lsls	r2, r3, #8
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	609a      	str	r2, [r3, #8]
}
 8002ed4:	bf00      	nop
 8002ed6:	371c      	adds	r7, #28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f003 031f 	and.w	r3, r3, #31
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a1a      	ldr	r2, [r3, #32]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	401a      	ands	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a1a      	ldr	r2, [r3, #32]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f003 031f 	and.w	r3, r3, #31
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	fa01 f303 	lsl.w	r3, r1, r3
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	621a      	str	r2, [r3, #32]
}
 8002f1e:	bf00      	nop
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e05a      	b.n	8002ffa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a21      	ldr	r2, [pc, #132]	; (8003008 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d022      	beq.n	8002fce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f90:	d01d      	beq.n	8002fce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1d      	ldr	r2, [pc, #116]	; (800300c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d018      	beq.n	8002fce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1b      	ldr	r2, [pc, #108]	; (8003010 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1a      	ldr	r2, [pc, #104]	; (8003014 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d00e      	beq.n	8002fce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a18      	ldr	r2, [pc, #96]	; (8003018 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d009      	beq.n	8002fce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a17      	ldr	r2, [pc, #92]	; (800301c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d004      	beq.n	8002fce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a15      	ldr	r2, [pc, #84]	; (8003020 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40010000 	.word	0x40010000
 800300c:	40000400 	.word	0x40000400
 8003010:	40000800 	.word	0x40000800
 8003014:	40000c00 	.word	0x40000c00
 8003018:	40010400 	.word	0x40010400
 800301c:	40014000 	.word	0x40014000
 8003020:	40001800 	.word	0x40001800

08003024 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800303c:	2302      	movs	r3, #2
 800303e:	e03d      	b.n	80030bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	4313      	orrs	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	4313      	orrs	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	4313      	orrs	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4313      	orrs	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	4313      	orrs	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <_ZN5TimerC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj>:
 *  Created on: Aug 31, 2021
 *      Author: Xunguo Zhu
 */
#include "TIMER.hpp"

Timer::Timer(TIM_HandleTypeDef *tim, TIM_TypeDef *Tim_Num, u16 arr, u16 pcs)
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	603b      	str	r3, [r7, #0]
 80030fe:	4a0b      	ldr	r2, [pc, #44]	; (800312c <_ZN5TimerC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj+0x3c>)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	601a      	str	r2, [r3, #0]
{
	this->arr = arr;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	605a      	str	r2, [r3, #4]
	this->pcs = pcs;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	609a      	str	r2, [r3, #8]
	this->tim = tim;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	60da      	str	r2, [r3, #12]
	this->tim->Instance = Tim_Num;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	601a      	str	r2, [r3, #0]
}
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	08003c9c 	.word	0x08003c9c

08003130 <_ZN5TimerD1Ev>:

Timer::~Timer()
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	4a06      	ldr	r2, [pc, #24]	; (8003154 <_ZN5TimerD1Ev+0x24>)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	601a      	str	r2, [r3, #0]
{
	TIM_Base_MspDeInit(this->tim);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	4619      	mov	r1, r3
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f9fb 	bl	8003540 <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef>
}
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	08003c9c 	.word	0x08003c9c

08003158 <_ZN5TimerD0Ev>:
Timer::~Timer()
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
}
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff ffe5 	bl	8003130 <_ZN5TimerD1Ev>
 8003166:	2114      	movs	r1, #20
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 fbeb 	bl	8003944 <_ZdlPvj>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4618      	mov	r0, r3
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <_ZN5Timer13TIM_Base_InitEv>:

HAL_StatusTypeDef Timer::TIM_Base_Init()
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
	/* Check the TIM handle allocation */
	if (this->tim == NULL){
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <_ZN5Timer13TIM_Base_InitEv+0x14>
		return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e05b      	b.n	8003244 <_ZN5Timer13TIM_Base_InitEv+0xcc>
	assert_param(IS_TIM_INSTANCE(this->tim->Instance));
	assert_param(IS_TIM_COUNTER_MODE(this->tim->Init.CounterMode));
	assert_param(IS_TIM_CLOCKDIVISION_DIV(this->tim->Init.ClockDivision));
	assert_param(IS_TIM_AUTORELOAD_PRELOAD(this->tim->Init.AutoReloadPreload));

	if (this->tim->State == HAL_TIM_STATE_RESET){
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	bf0c      	ite	eq
 800319a:	2301      	moveq	r3, #1
 800319c:	2300      	movne	r3, #0
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00d      	beq.n	80031c0 <_ZN5Timer13TIM_Base_InitEv+0x48>
		/* Allocate lock resource and initialize it */
		this->tim->Lock = HAL_UNLOCKED;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		this->TIM_Base_MspInit(this->tim);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3314      	adds	r3, #20
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	68d2      	ldr	r2, [r2, #12]
 80031ba:	4611      	mov	r1, r2
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	4798      	blx	r3
	}
	/* Set the TIM state */
	this->tim->State = HAL_TIM_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	2202      	movs	r2, #2
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	/* Set the Time Base configuration */
	TIM_Base_SetConfig(this->tim->Instance, &this->tim->Init);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	3304      	adds	r3, #4
 80031d6:	4619      	mov	r1, r3
 80031d8:	4610      	mov	r0, r2
 80031da:	f7ff fb97 	bl	800290c <TIM_Base_SetConfig>
	/* Initialize the DMA burst operation state */
	this->tim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	/* Initialize the TIM channels state */
	TIM_CHANNEL_STATE_SET_ALL(this->tim, HAL_TIM_CHANNEL_STATE_READY);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	TIM_CHANNEL_N_STATE_SET_ALL(this->tim, HAL_TIM_CHANNEL_STATE_READY);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	/* Initialize the TIM state*/
	this->tim->State = HAL_TIM_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef>:

void Timer::TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b092      	sub	sp, #72	; 0x48
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003256:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	609a      	str	r2, [r3, #8]
 8003262:	60da      	str	r2, [r3, #12]
 8003264:	611a      	str	r2, [r3, #16]
	if(tim_baseHandle->Instance==TIM1){
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a7a      	ldr	r2, [pc, #488]	; (8003454 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x208>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d10e      	bne.n	800328e <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x42>
		__HAL_RCC_TIM1_CLK_ENABLE();
 8003270:	2300      	movs	r3, #0
 8003272:	633b      	str	r3, [r7, #48]	; 0x30
 8003274:	4b78      	ldr	r3, [pc, #480]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 8003276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003278:	4a77      	ldr	r2, [pc, #476]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 800327a:	f043 0301 	orr.w	r3, r3, #1
 800327e:	6453      	str	r3, [r2, #68]	; 0x44
 8003280:	4b75      	ldr	r3, [pc, #468]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 8003282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	633b      	str	r3, [r7, #48]	; 0x30
 800328a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	}
	else if(tim_baseHandle->Instance == TIM8){
		/* TIM8 clock enable */
		__HAL_RCC_TIM8_CLK_ENABLE();
	}
}
 800328c:	e0dd      	b.n	800344a <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x1fe>
	else if(tim_baseHandle->Instance == TIM2){
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003296:	d126      	bne.n	80032e6 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x9a>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8003298:	2300      	movs	r3, #0
 800329a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800329c:	4b6e      	ldr	r3, [pc, #440]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	4a6d      	ldr	r2, [pc, #436]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	6413      	str	r3, [r2, #64]	; 0x40
 80032a8:	4b6b      	ldr	r3, [pc, #428]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80032b4:	2300      	movs	r3, #0
 80032b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80032b8:	4b67      	ldr	r3, [pc, #412]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	4a66      	ldr	r2, [pc, #408]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	6313      	str	r3, [r2, #48]	; 0x30
 80032c4:	4b64      	ldr	r3, [pc, #400]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80032d0:	230f      	movs	r3, #15
 80032d2:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d4:	2302      	movs	r3, #2
 80032d6:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	63fb      	str	r3, [r7, #60]	; 0x3c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032dc:	2300      	movs	r3, #0
 80032de:	643b      	str	r3, [r7, #64]	; 0x40
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032e0:	2301      	movs	r3, #1
 80032e2:	647b      	str	r3, [r7, #68]	; 0x44
}
 80032e4:	e0b1      	b.n	800344a <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x1fe>
	else if(tim_baseHandle->Instance == TIM3){
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a5c      	ldr	r2, [pc, #368]	; (800345c <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x210>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d14a      	bne.n	8003386 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x13a>
		__HAL_RCC_TIM3_CLK_ENABLE();
 80032f0:	2300      	movs	r3, #0
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
 80032f4:	4b58      	ldr	r3, [pc, #352]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	4a57      	ldr	r2, [pc, #348]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 80032fa:	f043 0302 	orr.w	r3, r3, #2
 80032fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003300:	4b55      	ldr	r3, [pc, #340]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800330c:	2300      	movs	r3, #0
 800330e:	623b      	str	r3, [r7, #32]
 8003310:	4b51      	ldr	r3, [pc, #324]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	4a50      	ldr	r2, [pc, #320]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	6313      	str	r3, [r2, #48]	; 0x30
 800331c:	4b4e      	ldr	r3, [pc, #312]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 800331e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	623b      	str	r3, [r7, #32]
 8003326:	6a3b      	ldr	r3, [r7, #32]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8003328:	2300      	movs	r3, #0
 800332a:	61fb      	str	r3, [r7, #28]
 800332c:	4b4a      	ldr	r3, [pc, #296]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	4a49      	ldr	r2, [pc, #292]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 8003332:	f043 0302 	orr.w	r3, r3, #2
 8003336:	6313      	str	r3, [r2, #48]	; 0x30
 8003338:	4b47      	ldr	r3, [pc, #284]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	61fb      	str	r3, [r7, #28]
 8003342:	69fb      	ldr	r3, [r7, #28]
		GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003344:	23c0      	movs	r3, #192	; 0xc0
 8003346:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003348:	2302      	movs	r3, #2
 800334a:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334c:	2300      	movs	r3, #0
 800334e:	63fb      	str	r3, [r7, #60]	; 0x3c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003350:	2300      	movs	r3, #0
 8003352:	643b      	str	r3, [r7, #64]	; 0x40
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003354:	2302      	movs	r3, #2
 8003356:	647b      	str	r3, [r7, #68]	; 0x44
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003358:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800335c:	4619      	mov	r1, r3
 800335e:	4840      	ldr	r0, [pc, #256]	; (8003460 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x214>)
 8003360:	f7fd ff72 	bl	8001248 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003364:	2303      	movs	r3, #3
 8003366:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003368:	2302      	movs	r3, #2
 800336a:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	2300      	movs	r3, #0
 800336e:	63fb      	str	r3, [r7, #60]	; 0x3c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003370:	2300      	movs	r3, #0
 8003372:	643b      	str	r3, [r7, #64]	; 0x40
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003374:	2302      	movs	r3, #2
 8003376:	647b      	str	r3, [r7, #68]	; 0x44
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003378:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800337c:	4619      	mov	r1, r3
 800337e:	4839      	ldr	r0, [pc, #228]	; (8003464 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x218>)
 8003380:	f7fd ff62 	bl	8001248 <HAL_GPIO_Init>
}
 8003384:	e061      	b.n	800344a <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x1fe>
	else if(tim_baseHandle->Instance == TIM4){
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a37      	ldr	r2, [pc, #220]	; (8003468 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x21c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d12d      	bne.n	80033ec <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x1a0>
		__HAL_RCC_TIM4_CLK_ENABLE();
 8003390:	2300      	movs	r3, #0
 8003392:	61bb      	str	r3, [r7, #24]
 8003394:	4b30      	ldr	r3, [pc, #192]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	4a2f      	ldr	r2, [pc, #188]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 800339a:	f043 0304 	orr.w	r3, r3, #4
 800339e:	6413      	str	r3, [r2, #64]	; 0x40
 80033a0:	4b2d      	ldr	r3, [pc, #180]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	4b29      	ldr	r3, [pc, #164]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	4a28      	ldr	r2, [pc, #160]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 80033b6:	f043 0308 	orr.w	r3, r3, #8
 80033ba:	6313      	str	r3, [r2, #48]	; 0x30
 80033bc:	4b26      	ldr	r3, [pc, #152]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 80033be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	697b      	ldr	r3, [r7, #20]
		GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80033c8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80033cc:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ce:	2302      	movs	r3, #2
 80033d0:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d6:	2300      	movs	r3, #0
 80033d8:	643b      	str	r3, [r7, #64]	; 0x40
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033da:	2302      	movs	r3, #2
 80033dc:	647b      	str	r3, [r7, #68]	; 0x44
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80033e2:	4619      	mov	r1, r3
 80033e4:	4821      	ldr	r0, [pc, #132]	; (800346c <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x220>)
 80033e6:	f7fd ff2f 	bl	8001248 <HAL_GPIO_Init>
}
 80033ea:	e02e      	b.n	800344a <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x1fe>
	else if(tim_baseHandle->Instance == TIM6){
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a1f      	ldr	r2, [pc, #124]	; (8003470 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x224>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d116      	bne.n	8003424 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x1d8>
		__HAL_RCC_TIM6_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	4b17      	ldr	r3, [pc, #92]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	4a16      	ldr	r2, [pc, #88]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 8003400:	f043 0310 	orr.w	r3, r3, #16
 8003404:	6413      	str	r3, [r2, #64]	; 0x40
 8003406:	4b14      	ldr	r3, [pc, #80]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f003 0310 	and.w	r3, r3, #16
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	693b      	ldr	r3, [r7, #16]
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003412:	2200      	movs	r2, #0
 8003414:	2100      	movs	r1, #0
 8003416:	2036      	movs	r0, #54	; 0x36
 8003418:	f7fd fed1 	bl	80011be <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800341c:	2036      	movs	r0, #54	; 0x36
 800341e:	f7fd feea 	bl	80011f6 <HAL_NVIC_EnableIRQ>
}
 8003422:	e012      	b.n	800344a <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x1fe>
	else if(tim_baseHandle->Instance == TIM8){
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a12      	ldr	r2, [pc, #72]	; (8003474 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x228>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d10d      	bne.n	800344a <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x1fe>
		__HAL_RCC_TIM8_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	4b09      	ldr	r3, [pc, #36]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	4a08      	ldr	r2, [pc, #32]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 8003438:	f043 0302 	orr.w	r3, r3, #2
 800343c:	6453      	str	r3, [r2, #68]	; 0x44
 800343e:	4b06      	ldr	r3, [pc, #24]	; (8003458 <_ZN5Timer16TIM_Base_MspInitEP17TIM_HandleTypeDef+0x20c>)
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
}
 800344a:	bf00      	nop
 800344c:	3748      	adds	r7, #72	; 0x48
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40010000 	.word	0x40010000
 8003458:	40023800 	.word	0x40023800
 800345c:	40000400 	.word	0x40000400
 8003460:	40020000 	.word	0x40020000
 8003464:	40020400 	.word	0x40020400
 8003468:	40000800 	.word	0x40000800
 800346c:	40020c00 	.word	0x40020c00
 8003470:	40001000 	.word	0x40001000
 8003474:	40010400 	.word	0x40010400

08003478 <_ZN5Timer15TIM_MspPostInitEP17TIM_HandleTypeDef>:

void Timer::TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08a      	sub	sp, #40	; 0x28
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003482:	f107 0314 	add.w	r3, r7, #20
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	605a      	str	r2, [r3, #4]
 800348c:	609a      	str	r2, [r3, #8]
 800348e:	60da      	str	r2, [r3, #12]
 8003490:	611a      	str	r2, [r3, #16]
	if(timHandle->Instance==TIM1){
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a25      	ldr	r2, [pc, #148]	; (800352c <_ZN5Timer15TIM_MspPostInitEP17TIM_HandleTypeDef+0xb4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d11f      	bne.n	80034dc <_ZN5Timer15TIM_MspPostInitEP17TIM_HandleTypeDef+0x64>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 800349c:	2300      	movs	r3, #0
 800349e:	613b      	str	r3, [r7, #16]
 80034a0:	4b23      	ldr	r3, [pc, #140]	; (8003530 <_ZN5Timer15TIM_MspPostInitEP17TIM_HandleTypeDef+0xb8>)
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	4a22      	ldr	r2, [pc, #136]	; (8003530 <_ZN5Timer15TIM_MspPostInitEP17TIM_HandleTypeDef+0xb8>)
 80034a6:	f043 0310 	orr.w	r3, r3, #16
 80034aa:	6313      	str	r3, [r2, #48]	; 0x30
 80034ac:	4b20      	ldr	r3, [pc, #128]	; (8003530 <_ZN5Timer15TIM_MspPostInitEP17TIM_HandleTypeDef+0xb8>)
 80034ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	693b      	ldr	r3, [r7, #16]
		PE9     ------> TIM1_CH1
		PE11     ------> TIM1_CH2
		PE13     ------> TIM1_CH3
		PE14     ------> TIM1_CH4
		*/
		GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80034b8:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80034bc:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034be:	2302      	movs	r3, #2
 80034c0:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c6:	2300      	movs	r3, #0
 80034c8:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034ca:	2301      	movs	r3, #1
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034ce:	f107 0314 	add.w	r3, r7, #20
 80034d2:	4619      	mov	r1, r3
 80034d4:	4817      	ldr	r0, [pc, #92]	; (8003534 <_ZN5Timer15TIM_MspPostInitEP17TIM_HandleTypeDef+0xbc>)
 80034d6:	f7fd feb7 	bl	8001248 <HAL_GPIO_Init>
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
	}

}
 80034da:	e023      	b.n	8003524 <_ZN5Timer15TIM_MspPostInitEP17TIM_HandleTypeDef+0xac>
	else if(timHandle->Instance==TIM8){
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a15      	ldr	r2, [pc, #84]	; (8003538 <_ZN5Timer15TIM_MspPostInitEP17TIM_HandleTypeDef+0xc0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d11e      	bne.n	8003524 <_ZN5Timer15TIM_MspPostInitEP17TIM_HandleTypeDef+0xac>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	4b11      	ldr	r3, [pc, #68]	; (8003530 <_ZN5Timer15TIM_MspPostInitEP17TIM_HandleTypeDef+0xb8>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	4a10      	ldr	r2, [pc, #64]	; (8003530 <_ZN5Timer15TIM_MspPostInitEP17TIM_HandleTypeDef+0xb8>)
 80034f0:	f043 0304 	orr.w	r3, r3, #4
 80034f4:	6313      	str	r3, [r2, #48]	; 0x30
 80034f6:	4b0e      	ldr	r3, [pc, #56]	; (8003530 <_ZN5Timer15TIM_MspPostInitEP17TIM_HandleTypeDef+0xb8>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003502:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003506:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003508:	2302      	movs	r3, #2
 800350a:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	2300      	movs	r3, #0
 800350e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003510:	2300      	movs	r3, #0
 8003512:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003514:	2303      	movs	r3, #3
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003518:	f107 0314 	add.w	r3, r7, #20
 800351c:	4619      	mov	r1, r3
 800351e:	4807      	ldr	r0, [pc, #28]	; (800353c <_ZN5Timer15TIM_MspPostInitEP17TIM_HandleTypeDef+0xc4>)
 8003520:	f7fd fe92 	bl	8001248 <HAL_GPIO_Init>
}
 8003524:	bf00      	nop
 8003526:	3728      	adds	r7, #40	; 0x28
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40010000 	.word	0x40010000
 8003530:	40023800 	.word	0x40023800
 8003534:	40021000 	.word	0x40021000
 8003538:	40010400 	.word	0x40010400
 800353c:	40020800 	.word	0x40020800

08003540 <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef>:

void Timer::TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]

	if(tim_baseHandle->Instance==TIM1){
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a2e      	ldr	r2, [pc, #184]	; (8003608 <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xc8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d106      	bne.n	8003562 <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0x22>
		/* Peripheral clock disable */
		__HAL_RCC_TIM1_CLK_DISABLE();
 8003554:	4b2d      	ldr	r3, [pc, #180]	; (800360c <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xcc>)
 8003556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003558:	4a2c      	ldr	r2, [pc, #176]	; (800360c <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xcc>)
 800355a:	f023 0301 	bic.w	r3, r3, #1
 800355e:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else if(tim_baseHandle->Instance==TIM8){
		/* Peripheral clock disable */
		__HAL_RCC_TIM8_CLK_DISABLE();
	}
}
 8003560:	e04e      	b.n	8003600 <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xc0>
	else if(tim_baseHandle->Instance==TIM2)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356a:	d10a      	bne.n	8003582 <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0x42>
		__HAL_RCC_TIM2_CLK_DISABLE();
 800356c:	4b27      	ldr	r3, [pc, #156]	; (800360c <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xcc>)
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	4a26      	ldr	r2, [pc, #152]	; (800360c <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xcc>)
 8003572:	f023 0301 	bic.w	r3, r3, #1
 8003576:	6413      	str	r3, [r2, #64]	; 0x40
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8003578:	210f      	movs	r1, #15
 800357a:	4825      	ldr	r0, [pc, #148]	; (8003610 <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xd0>)
 800357c:	f7fe f800 	bl	8001580 <HAL_GPIO_DeInit>
}
 8003580:	e03e      	b.n	8003600 <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xc0>
	else if(tim_baseHandle->Instance==TIM3)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a23      	ldr	r2, [pc, #140]	; (8003614 <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xd4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d10e      	bne.n	80035aa <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0x6a>
		__HAL_RCC_TIM3_CLK_DISABLE();
 800358c:	4b1f      	ldr	r3, [pc, #124]	; (800360c <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xcc>)
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	4a1e      	ldr	r2, [pc, #120]	; (800360c <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xcc>)
 8003592:	f023 0302 	bic.w	r3, r3, #2
 8003596:	6413      	str	r3, [r2, #64]	; 0x40
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6|GPIO_PIN_7);
 8003598:	21c0      	movs	r1, #192	; 0xc0
 800359a:	481d      	ldr	r0, [pc, #116]	; (8003610 <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xd0>)
 800359c:	f7fd fff0 	bl	8001580 <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_1);
 80035a0:	2103      	movs	r1, #3
 80035a2:	481d      	ldr	r0, [pc, #116]	; (8003618 <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xd8>)
 80035a4:	f7fd ffec 	bl	8001580 <HAL_GPIO_DeInit>
}
 80035a8:	e02a      	b.n	8003600 <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xc0>
	else if(tim_baseHandle->Instance==TIM4){
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a1b      	ldr	r2, [pc, #108]	; (800361c <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xdc>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d10b      	bne.n	80035cc <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0x8c>
		__HAL_RCC_TIM4_CLK_DISABLE();
 80035b4:	4b15      	ldr	r3, [pc, #84]	; (800360c <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xcc>)
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	4a14      	ldr	r2, [pc, #80]	; (800360c <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xcc>)
 80035ba:	f023 0304 	bic.w	r3, r3, #4
 80035be:	6413      	str	r3, [r2, #64]	; 0x40
		HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 80035c0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80035c4:	4816      	ldr	r0, [pc, #88]	; (8003620 <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xe0>)
 80035c6:	f7fd ffdb 	bl	8001580 <HAL_GPIO_DeInit>
}
 80035ca:	e019      	b.n	8003600 <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xc0>
	else if(tim_baseHandle->Instance==TIM6){
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a14      	ldr	r2, [pc, #80]	; (8003624 <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xe4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d109      	bne.n	80035ea <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xaa>
		__HAL_RCC_TIM6_CLK_DISABLE();
 80035d6:	4b0d      	ldr	r3, [pc, #52]	; (800360c <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xcc>)
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	4a0c      	ldr	r2, [pc, #48]	; (800360c <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xcc>)
 80035dc:	f023 0310 	bic.w	r3, r3, #16
 80035e0:	6413      	str	r3, [r2, #64]	; 0x40
		HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);
 80035e2:	2036      	movs	r0, #54	; 0x36
 80035e4:	f7fd fe15 	bl	8001212 <HAL_NVIC_DisableIRQ>
}
 80035e8:	e00a      	b.n	8003600 <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xc0>
	else if(tim_baseHandle->Instance==TIM8){
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a0e      	ldr	r2, [pc, #56]	; (8003628 <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xe8>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d105      	bne.n	8003600 <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xc0>
		__HAL_RCC_TIM8_CLK_DISABLE();
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xcc>)
 80035f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f8:	4a04      	ldr	r2, [pc, #16]	; (800360c <_ZN5Timer18TIM_Base_MspDeInitEP17TIM_HandleTypeDef+0xcc>)
 80035fa:	f023 0302 	bic.w	r3, r3, #2
 80035fe:	6453      	str	r3, [r2, #68]	; 0x44
}
 8003600:	bf00      	nop
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40010000 	.word	0x40010000
 800360c:	40023800 	.word	0x40023800
 8003610:	40020000 	.word	0x40020000
 8003614:	40000400 	.word	0x40000400
 8003618:	40020400 	.word	0x40020400
 800361c:	40000800 	.word	0x40000800
 8003620:	40020c00 	.word	0x40020c00
 8003624:	40001000 	.word	0x40001000
 8003628:	40010400 	.word	0x40010400

0800362c <_ZN9Timer_PWMC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj>:

Timer_PWM::Timer_PWM(TIM_HandleTypeDef *tim, TIM_TypeDef *Tim_Num, u16 arr, u16 pcs):Timer(tim, Tim_Num, arr, pcs)
 800362c:	b580      	push	{r7, lr}
 800362e:	b09c      	sub	sp, #112	; 0x70
 8003630:	af02      	add	r7, sp, #8
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	68b9      	ldr	r1, [r7, #8]
 8003646:	f7ff fd53 	bl	80030f0 <_ZN5TimerC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj>
 800364a:	4a8e      	ldr	r2, [pc, #568]	; (8003884 <_ZN9Timer_PWMC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj+0x258>)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	601a      	str	r2, [r3, #0]
{
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003650:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	605a      	str	r2, [r3, #4]
 800365a:	609a      	str	r2, [r3, #8]
 800365c:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800365e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8003668:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	611a      	str	r2, [r3, #16]
 8003678:	615a      	str	r2, [r3, #20]
 800367a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800367c:	f107 0314 	add.w	r3, r7, #20
 8003680:	2220      	movs	r2, #32
 8003682:	2100      	movs	r1, #0
 8003684:	4618      	mov	r0, r3
 8003686:	f000 f9bd 	bl	8003a04 <memset>

	this->tim->Init.Prescaler = this->pcs;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	6892      	ldr	r2, [r2, #8]
 8003692:	605a      	str	r2, [r3, #4]
	this->tim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	609a      	str	r2, [r3, #8]
	this->tim->Init.Period = this->arr;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	6852      	ldr	r2, [r2, #4]
 80036a4:	60da      	str	r2, [r3, #12]
	this->tim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	611a      	str	r2, [r3, #16]
	this->tim->Init.RepetitionCounter = 0;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	615a      	str	r2, [r3, #20]
	this->tim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	2280      	movs	r2, #128	; 0x80
 80036bc:	619a      	str	r2, [r3, #24]
	if (this->TIM_Base_Init() != HAL_OK){//删掉tim.c后可能会出现问题
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff fd59 	bl	8003178 <_ZN5Timer13TIM_Base_InitEv>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	bf14      	ite	ne
 80036cc:	2301      	movne	r3, #1
 80036ce:	2300      	moveq	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <_ZN9Timer_PWMC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj+0xae>
		Error_Handler();
 80036d6:	f7fd f9e3 	bl	8000aa0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036de:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(this->tim, &sClockSourceConfig) != HAL_OK){
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80036e8:	4611      	mov	r1, r2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff f81e 	bl	800272c <HAL_TIM_ConfigClockSource>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	bf14      	ite	ne
 80036f6:	2301      	movne	r3, #1
 80036f8:	2300      	moveq	r3, #0
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <_ZN9Timer_PWMC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj+0xd8>
		Error_Handler();
 8003700:	f7fd f9ce 	bl	8000aa0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(this->tim) != HAL_OK){
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4618      	mov	r0, r3
 800370a:	f7fe fd23 	bl	8002154 <HAL_TIM_PWM_Init>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	bf14      	ite	ne
 8003714:	2301      	movne	r3, #1
 8003716:	2300      	moveq	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <_ZN9Timer_PWMC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj+0xf6>
		Error_Handler();
 800371e:	f7fd f9bf 	bl	8000aa0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003722:	2300      	movs	r3, #0
 8003724:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003726:	2300      	movs	r3, #0
 8003728:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(this->tim, &sMasterConfig) != HAL_OK){
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003732:	4611      	mov	r1, r2
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff fbf9 	bl	8002f2c <HAL_TIMEx_MasterConfigSynchronization>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	bf14      	ite	ne
 8003740:	2301      	movne	r3, #1
 8003742:	2300      	moveq	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <_ZN9Timer_PWMC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj+0x122>
		Error_Handler();
 800374a:	f7fd f9a9 	bl	8000aa0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800374e:	2360      	movs	r3, #96	; 0x60
 8003750:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.Pulse = 0;
 8003752:	2300      	movs	r3, #0
 8003754:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003756:	2300      	movs	r3, #0
 8003758:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800375a:	2300      	movs	r3, #0
 800375c:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800375e:	2300      	movs	r3, #0
 8003760:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003762:	2300      	movs	r3, #0
 8003764:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003766:	2300      	movs	r3, #0
 8003768:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_TIM_PWM_ConfigChannel(this->tim, &sConfigOC, TIM_CHANNEL_1) != HAL_OK){
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8003772:	2200      	movs	r2, #0
 8003774:	4618      	mov	r0, r3
 8003776:	f7fe ff17 	bl	80025a8 <HAL_TIM_PWM_ConfigChannel>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	bf14      	ite	ne
 8003780:	2301      	movne	r3, #1
 8003782:	2300      	moveq	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <_ZN9Timer_PWMC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj+0x162>
		Error_Handler();
 800378a:	f7fd f989 	bl	8000aa0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(this->tim, &sConfigOC, TIM_CHANNEL_2) != HAL_OK){
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8003796:	2204      	movs	r2, #4
 8003798:	4618      	mov	r0, r3
 800379a:	f7fe ff05 	bl	80025a8 <HAL_TIM_PWM_ConfigChannel>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <_ZN9Timer_PWMC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj+0x186>
		Error_Handler();
 80037ae:	f7fd f977 	bl	8000aa0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(this->tim, &sConfigOC, TIM_CHANNEL_3) != HAL_OK){
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80037ba:	2208      	movs	r2, #8
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fe fef3 	bl	80025a8 <HAL_TIM_PWM_ConfigChannel>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	bf14      	ite	ne
 80037c8:	2301      	movne	r3, #1
 80037ca:	2300      	moveq	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <_ZN9Timer_PWMC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj+0x1aa>
		Error_Handler();
 80037d2:	f7fd f965 	bl	8000aa0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(this->tim, &sConfigOC, TIM_CHANNEL_4) != HAL_OK){
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80037de:	220c      	movs	r2, #12
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fe fee1 	bl	80025a8 <HAL_TIM_PWM_ConfigChannel>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	bf14      	ite	ne
 80037ec:	2301      	movne	r3, #1
 80037ee:	2300      	moveq	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <_ZN9Timer_PWMC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj+0x1ce>
		Error_Handler();
 80037f6:	f7fd f953 	bl	8000aa0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80037fe:	2300      	movs	r3, #0
 8003800:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003802:	2300      	movs	r3, #0
 8003804:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003806:	2300      	movs	r3, #0
 8003808:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800380a:	2300      	movs	r3, #0
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800380e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003812:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003814:	2300      	movs	r3, #0
 8003816:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(this->tim, &sBreakDeadTimeConfig) != HAL_OK){
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f107 0214 	add.w	r2, r7, #20
 8003820:	4611      	mov	r1, r2
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff fbfe 	bl	8003024 <HAL_TIMEx_ConfigBreakDeadTime>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	bf14      	ite	ne
 800382e:	2301      	movne	r3, #1
 8003830:	2300      	moveq	r3, #0
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <_ZN9Timer_PWMC1EP17TIM_HandleTypeDefP11TIM_TypeDefjj+0x210>
		Error_Handler();
 8003838:	f7fd f932 	bl	8000aa0 <Error_Handler>
	}
	this->TIM_MspPostInit(this->tim);
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	4619      	mov	r1, r3
 8003844:	4610      	mov	r0, r2
 8003846:	f7ff fe17 	bl	8003478 <_ZN5Timer15TIM_MspPostInitEP17TIM_HandleTypeDef>
	HAL_TIM_PWM_Start(this->tim, TIM_CHANNEL_1);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	2100      	movs	r1, #0
 8003850:	4618      	mov	r0, r3
 8003852:	f7fe fcd9 	bl	8002208 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(this->tim, TIM_CHANNEL_2);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	2104      	movs	r1, #4
 800385c:	4618      	mov	r0, r3
 800385e:	f7fe fcd3 	bl	8002208 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(this->tim, TIM_CHANNEL_3);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	2108      	movs	r1, #8
 8003868:	4618      	mov	r0, r3
 800386a:	f7fe fccd 	bl	8002208 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(this->tim, TIM_CHANNEL_4);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	210c      	movs	r1, #12
 8003874:	4618      	mov	r0, r3
 8003876:	f7fe fcc7 	bl	8002208 <HAL_TIM_PWM_Start>
}
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4618      	mov	r0, r3
 800387e:	3768      	adds	r7, #104	; 0x68
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	08003c7c 	.word	0x08003c7c

08003888 <_ZN9Timer_PWMD1Ev>:

Timer_PWM::~Timer_PWM()
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	4a05      	ldr	r2, [pc, #20]	; (80038a8 <_ZN9Timer_PWMD1Ev+0x20>)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fc49 	bl	8003130 <_ZN5TimerD1Ev>
{

}
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	08003c7c 	.word	0x08003c7c

080038ac <_ZN9Timer_PWMD0Ev>:
Timer_PWM::~Timer_PWM()
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
}
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff ffe7 	bl	8003888 <_ZN9Timer_PWMD1Ev>
 80038ba:	2118      	movs	r1, #24
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f841 	bl	8003944 <_ZdlPvj>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <_ZN9Timer_PWM7PWM_OutEhj>:

void Timer_PWM::PWM_Out(u8 n, u16 pwm)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	460b      	mov	r3, r1
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	72fb      	strb	r3, [r7, #11]
	this->pwm = pwm;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	615a      	str	r2, [r3, #20]
	switch(n){
 80038e0:	7afb      	ldrb	r3, [r7, #11]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	2b03      	cmp	r3, #3
 80038e6:	d827      	bhi.n	8003938 <_ZN9Timer_PWM7PWM_OutEhj+0x6c>
 80038e8:	a201      	add	r2, pc, #4	; (adr r2, 80038f0 <_ZN9Timer_PWM7PWM_OutEhj+0x24>)
 80038ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ee:	bf00      	nop
 80038f0:	08003901 	.word	0x08003901
 80038f4:	0800390f 	.word	0x0800390f
 80038f8:	0800391d 	.word	0x0800391d
 80038fc:	0800392b 	.word	0x0800392b
	case 1:
		__HAL_TIM_SET_COMPARE(this->tim, TIM_CHANNEL_1, this->pwm);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	6952      	ldr	r2, [r2, #20]
 800390a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800390c:	e014      	b.n	8003938 <_ZN9Timer_PWM7PWM_OutEhj+0x6c>
	case 2:
		__HAL_TIM_SET_COMPARE(this->tim, TIM_CHANNEL_2, this->pwm);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	6952      	ldr	r2, [r2, #20]
 8003918:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 800391a:	e00d      	b.n	8003938 <_ZN9Timer_PWM7PWM_OutEhj+0x6c>
	case 3:
		__HAL_TIM_SET_COMPARE(this->tim, TIM_CHANNEL_3, this->pwm);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	6952      	ldr	r2, [r2, #20]
 8003926:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8003928:	e006      	b.n	8003938 <_ZN9Timer_PWM7PWM_OutEhj+0x6c>
	case 4:
		__HAL_TIM_SET_COMPARE(this->tim, TIM_CHANNEL_4, this->pwm);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	6952      	ldr	r2, [r2, #20]
 8003934:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8003936:	bf00      	nop
	}
}
 8003938:	bf00      	nop
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <_ZdlPvj>:
 8003944:	f000 b811 	b.w	800396a <_ZdlPv>

08003948 <_Znwj>:
 8003948:	2801      	cmp	r0, #1
 800394a:	bf38      	it	cc
 800394c:	2001      	movcc	r0, #1
 800394e:	b510      	push	{r4, lr}
 8003950:	4604      	mov	r4, r0
 8003952:	4620      	mov	r0, r4
 8003954:	f000 f846 	bl	80039e4 <malloc>
 8003958:	b930      	cbnz	r0, 8003968 <_Znwj+0x20>
 800395a:	f000 f809 	bl	8003970 <_ZSt15get_new_handlerv>
 800395e:	b908      	cbnz	r0, 8003964 <_Znwj+0x1c>
 8003960:	f000 f80e 	bl	8003980 <abort>
 8003964:	4780      	blx	r0
 8003966:	e7f4      	b.n	8003952 <_Znwj+0xa>
 8003968:	bd10      	pop	{r4, pc}

0800396a <_ZdlPv>:
 800396a:	f000 b843 	b.w	80039f4 <free>
	...

08003970 <_ZSt15get_new_handlerv>:
 8003970:	4b02      	ldr	r3, [pc, #8]	; (800397c <_ZSt15get_new_handlerv+0xc>)
 8003972:	6818      	ldr	r0, [r3, #0]
 8003974:	f3bf 8f5b 	dmb	ish
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	2000009c 	.word	0x2000009c

08003980 <abort>:
 8003980:	b508      	push	{r3, lr}
 8003982:	2006      	movs	r0, #6
 8003984:	f000 f928 	bl	8003bd8 <raise>
 8003988:	2001      	movs	r0, #1
 800398a:	f7fd f911 	bl	8000bb0 <_exit>
	...

08003990 <__errno>:
 8003990:	4b01      	ldr	r3, [pc, #4]	; (8003998 <__errno+0x8>)
 8003992:	6818      	ldr	r0, [r3, #0]
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	2000000c 	.word	0x2000000c

0800399c <__libc_init_array>:
 800399c:	b570      	push	{r4, r5, r6, lr}
 800399e:	4d0d      	ldr	r5, [pc, #52]	; (80039d4 <__libc_init_array+0x38>)
 80039a0:	4c0d      	ldr	r4, [pc, #52]	; (80039d8 <__libc_init_array+0x3c>)
 80039a2:	1b64      	subs	r4, r4, r5
 80039a4:	10a4      	asrs	r4, r4, #2
 80039a6:	2600      	movs	r6, #0
 80039a8:	42a6      	cmp	r6, r4
 80039aa:	d109      	bne.n	80039c0 <__libc_init_array+0x24>
 80039ac:	4d0b      	ldr	r5, [pc, #44]	; (80039dc <__libc_init_array+0x40>)
 80039ae:	4c0c      	ldr	r4, [pc, #48]	; (80039e0 <__libc_init_array+0x44>)
 80039b0:	f000 f93c 	bl	8003c2c <_init>
 80039b4:	1b64      	subs	r4, r4, r5
 80039b6:	10a4      	asrs	r4, r4, #2
 80039b8:	2600      	movs	r6, #0
 80039ba:	42a6      	cmp	r6, r4
 80039bc:	d105      	bne.n	80039ca <__libc_init_array+0x2e>
 80039be:	bd70      	pop	{r4, r5, r6, pc}
 80039c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039c4:	4798      	blx	r3
 80039c6:	3601      	adds	r6, #1
 80039c8:	e7ee      	b.n	80039a8 <__libc_init_array+0xc>
 80039ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ce:	4798      	blx	r3
 80039d0:	3601      	adds	r6, #1
 80039d2:	e7f2      	b.n	80039ba <__libc_init_array+0x1e>
 80039d4:	08003cbc 	.word	0x08003cbc
 80039d8:	08003cbc 	.word	0x08003cbc
 80039dc:	08003cbc 	.word	0x08003cbc
 80039e0:	08003cc0 	.word	0x08003cc0

080039e4 <malloc>:
 80039e4:	4b02      	ldr	r3, [pc, #8]	; (80039f0 <malloc+0xc>)
 80039e6:	4601      	mov	r1, r0
 80039e8:	6818      	ldr	r0, [r3, #0]
 80039ea:	f000 b863 	b.w	8003ab4 <_malloc_r>
 80039ee:	bf00      	nop
 80039f0:	2000000c 	.word	0x2000000c

080039f4 <free>:
 80039f4:	4b02      	ldr	r3, [pc, #8]	; (8003a00 <free+0xc>)
 80039f6:	4601      	mov	r1, r0
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	f000 b80b 	b.w	8003a14 <_free_r>
 80039fe:	bf00      	nop
 8003a00:	2000000c 	.word	0x2000000c

08003a04 <memset>:
 8003a04:	4402      	add	r2, r0
 8003a06:	4603      	mov	r3, r0
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d100      	bne.n	8003a0e <memset+0xa>
 8003a0c:	4770      	bx	lr
 8003a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a12:	e7f9      	b.n	8003a08 <memset+0x4>

08003a14 <_free_r>:
 8003a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a16:	2900      	cmp	r1, #0
 8003a18:	d048      	beq.n	8003aac <_free_r+0x98>
 8003a1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a1e:	9001      	str	r0, [sp, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f1a1 0404 	sub.w	r4, r1, #4
 8003a26:	bfb8      	it	lt
 8003a28:	18e4      	addlt	r4, r4, r3
 8003a2a:	f000 f8f1 	bl	8003c10 <__malloc_lock>
 8003a2e:	4a20      	ldr	r2, [pc, #128]	; (8003ab0 <_free_r+0x9c>)
 8003a30:	9801      	ldr	r0, [sp, #4]
 8003a32:	6813      	ldr	r3, [r2, #0]
 8003a34:	4615      	mov	r5, r2
 8003a36:	b933      	cbnz	r3, 8003a46 <_free_r+0x32>
 8003a38:	6063      	str	r3, [r4, #4]
 8003a3a:	6014      	str	r4, [r2, #0]
 8003a3c:	b003      	add	sp, #12
 8003a3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a42:	f000 b8eb 	b.w	8003c1c <__malloc_unlock>
 8003a46:	42a3      	cmp	r3, r4
 8003a48:	d90b      	bls.n	8003a62 <_free_r+0x4e>
 8003a4a:	6821      	ldr	r1, [r4, #0]
 8003a4c:	1862      	adds	r2, r4, r1
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	bf04      	itt	eq
 8003a52:	681a      	ldreq	r2, [r3, #0]
 8003a54:	685b      	ldreq	r3, [r3, #4]
 8003a56:	6063      	str	r3, [r4, #4]
 8003a58:	bf04      	itt	eq
 8003a5a:	1852      	addeq	r2, r2, r1
 8003a5c:	6022      	streq	r2, [r4, #0]
 8003a5e:	602c      	str	r4, [r5, #0]
 8003a60:	e7ec      	b.n	8003a3c <_free_r+0x28>
 8003a62:	461a      	mov	r2, r3
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	b10b      	cbz	r3, 8003a6c <_free_r+0x58>
 8003a68:	42a3      	cmp	r3, r4
 8003a6a:	d9fa      	bls.n	8003a62 <_free_r+0x4e>
 8003a6c:	6811      	ldr	r1, [r2, #0]
 8003a6e:	1855      	adds	r5, r2, r1
 8003a70:	42a5      	cmp	r5, r4
 8003a72:	d10b      	bne.n	8003a8c <_free_r+0x78>
 8003a74:	6824      	ldr	r4, [r4, #0]
 8003a76:	4421      	add	r1, r4
 8003a78:	1854      	adds	r4, r2, r1
 8003a7a:	42a3      	cmp	r3, r4
 8003a7c:	6011      	str	r1, [r2, #0]
 8003a7e:	d1dd      	bne.n	8003a3c <_free_r+0x28>
 8003a80:	681c      	ldr	r4, [r3, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	6053      	str	r3, [r2, #4]
 8003a86:	4421      	add	r1, r4
 8003a88:	6011      	str	r1, [r2, #0]
 8003a8a:	e7d7      	b.n	8003a3c <_free_r+0x28>
 8003a8c:	d902      	bls.n	8003a94 <_free_r+0x80>
 8003a8e:	230c      	movs	r3, #12
 8003a90:	6003      	str	r3, [r0, #0]
 8003a92:	e7d3      	b.n	8003a3c <_free_r+0x28>
 8003a94:	6825      	ldr	r5, [r4, #0]
 8003a96:	1961      	adds	r1, r4, r5
 8003a98:	428b      	cmp	r3, r1
 8003a9a:	bf04      	itt	eq
 8003a9c:	6819      	ldreq	r1, [r3, #0]
 8003a9e:	685b      	ldreq	r3, [r3, #4]
 8003aa0:	6063      	str	r3, [r4, #4]
 8003aa2:	bf04      	itt	eq
 8003aa4:	1949      	addeq	r1, r1, r5
 8003aa6:	6021      	streq	r1, [r4, #0]
 8003aa8:	6054      	str	r4, [r2, #4]
 8003aaa:	e7c7      	b.n	8003a3c <_free_r+0x28>
 8003aac:	b003      	add	sp, #12
 8003aae:	bd30      	pop	{r4, r5, pc}
 8003ab0:	200000a0 	.word	0x200000a0

08003ab4 <_malloc_r>:
 8003ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab6:	1ccd      	adds	r5, r1, #3
 8003ab8:	f025 0503 	bic.w	r5, r5, #3
 8003abc:	3508      	adds	r5, #8
 8003abe:	2d0c      	cmp	r5, #12
 8003ac0:	bf38      	it	cc
 8003ac2:	250c      	movcc	r5, #12
 8003ac4:	2d00      	cmp	r5, #0
 8003ac6:	4606      	mov	r6, r0
 8003ac8:	db01      	blt.n	8003ace <_malloc_r+0x1a>
 8003aca:	42a9      	cmp	r1, r5
 8003acc:	d903      	bls.n	8003ad6 <_malloc_r+0x22>
 8003ace:	230c      	movs	r3, #12
 8003ad0:	6033      	str	r3, [r6, #0]
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ad6:	f000 f89b 	bl	8003c10 <__malloc_lock>
 8003ada:	4921      	ldr	r1, [pc, #132]	; (8003b60 <_malloc_r+0xac>)
 8003adc:	680a      	ldr	r2, [r1, #0]
 8003ade:	4614      	mov	r4, r2
 8003ae0:	b99c      	cbnz	r4, 8003b0a <_malloc_r+0x56>
 8003ae2:	4f20      	ldr	r7, [pc, #128]	; (8003b64 <_malloc_r+0xb0>)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	b923      	cbnz	r3, 8003af2 <_malloc_r+0x3e>
 8003ae8:	4621      	mov	r1, r4
 8003aea:	4630      	mov	r0, r6
 8003aec:	f000 f83c 	bl	8003b68 <_sbrk_r>
 8003af0:	6038      	str	r0, [r7, #0]
 8003af2:	4629      	mov	r1, r5
 8003af4:	4630      	mov	r0, r6
 8003af6:	f000 f837 	bl	8003b68 <_sbrk_r>
 8003afa:	1c43      	adds	r3, r0, #1
 8003afc:	d123      	bne.n	8003b46 <_malloc_r+0x92>
 8003afe:	230c      	movs	r3, #12
 8003b00:	6033      	str	r3, [r6, #0]
 8003b02:	4630      	mov	r0, r6
 8003b04:	f000 f88a 	bl	8003c1c <__malloc_unlock>
 8003b08:	e7e3      	b.n	8003ad2 <_malloc_r+0x1e>
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	1b5b      	subs	r3, r3, r5
 8003b0e:	d417      	bmi.n	8003b40 <_malloc_r+0x8c>
 8003b10:	2b0b      	cmp	r3, #11
 8003b12:	d903      	bls.n	8003b1c <_malloc_r+0x68>
 8003b14:	6023      	str	r3, [r4, #0]
 8003b16:	441c      	add	r4, r3
 8003b18:	6025      	str	r5, [r4, #0]
 8003b1a:	e004      	b.n	8003b26 <_malloc_r+0x72>
 8003b1c:	6863      	ldr	r3, [r4, #4]
 8003b1e:	42a2      	cmp	r2, r4
 8003b20:	bf0c      	ite	eq
 8003b22:	600b      	streq	r3, [r1, #0]
 8003b24:	6053      	strne	r3, [r2, #4]
 8003b26:	4630      	mov	r0, r6
 8003b28:	f000 f878 	bl	8003c1c <__malloc_unlock>
 8003b2c:	f104 000b 	add.w	r0, r4, #11
 8003b30:	1d23      	adds	r3, r4, #4
 8003b32:	f020 0007 	bic.w	r0, r0, #7
 8003b36:	1ac2      	subs	r2, r0, r3
 8003b38:	d0cc      	beq.n	8003ad4 <_malloc_r+0x20>
 8003b3a:	1a1b      	subs	r3, r3, r0
 8003b3c:	50a3      	str	r3, [r4, r2]
 8003b3e:	e7c9      	b.n	8003ad4 <_malloc_r+0x20>
 8003b40:	4622      	mov	r2, r4
 8003b42:	6864      	ldr	r4, [r4, #4]
 8003b44:	e7cc      	b.n	8003ae0 <_malloc_r+0x2c>
 8003b46:	1cc4      	adds	r4, r0, #3
 8003b48:	f024 0403 	bic.w	r4, r4, #3
 8003b4c:	42a0      	cmp	r0, r4
 8003b4e:	d0e3      	beq.n	8003b18 <_malloc_r+0x64>
 8003b50:	1a21      	subs	r1, r4, r0
 8003b52:	4630      	mov	r0, r6
 8003b54:	f000 f808 	bl	8003b68 <_sbrk_r>
 8003b58:	3001      	adds	r0, #1
 8003b5a:	d1dd      	bne.n	8003b18 <_malloc_r+0x64>
 8003b5c:	e7cf      	b.n	8003afe <_malloc_r+0x4a>
 8003b5e:	bf00      	nop
 8003b60:	200000a0 	.word	0x200000a0
 8003b64:	200000a4 	.word	0x200000a4

08003b68 <_sbrk_r>:
 8003b68:	b538      	push	{r3, r4, r5, lr}
 8003b6a:	4d06      	ldr	r5, [pc, #24]	; (8003b84 <_sbrk_r+0x1c>)
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	4604      	mov	r4, r0
 8003b70:	4608      	mov	r0, r1
 8003b72:	602b      	str	r3, [r5, #0]
 8003b74:	f7fd f826 	bl	8000bc4 <_sbrk>
 8003b78:	1c43      	adds	r3, r0, #1
 8003b7a:	d102      	bne.n	8003b82 <_sbrk_r+0x1a>
 8003b7c:	682b      	ldr	r3, [r5, #0]
 8003b7e:	b103      	cbz	r3, 8003b82 <_sbrk_r+0x1a>
 8003b80:	6023      	str	r3, [r4, #0]
 8003b82:	bd38      	pop	{r3, r4, r5, pc}
 8003b84:	2000025c 	.word	0x2000025c

08003b88 <_raise_r>:
 8003b88:	291f      	cmp	r1, #31
 8003b8a:	b538      	push	{r3, r4, r5, lr}
 8003b8c:	4604      	mov	r4, r0
 8003b8e:	460d      	mov	r5, r1
 8003b90:	d904      	bls.n	8003b9c <_raise_r+0x14>
 8003b92:	2316      	movs	r3, #22
 8003b94:	6003      	str	r3, [r0, #0]
 8003b96:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9a:	bd38      	pop	{r3, r4, r5, pc}
 8003b9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003b9e:	b112      	cbz	r2, 8003ba6 <_raise_r+0x1e>
 8003ba0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003ba4:	b94b      	cbnz	r3, 8003bba <_raise_r+0x32>
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	f000 f830 	bl	8003c0c <_getpid_r>
 8003bac:	462a      	mov	r2, r5
 8003bae:	4601      	mov	r1, r0
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bb6:	f000 b817 	b.w	8003be8 <_kill_r>
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d00a      	beq.n	8003bd4 <_raise_r+0x4c>
 8003bbe:	1c59      	adds	r1, r3, #1
 8003bc0:	d103      	bne.n	8003bca <_raise_r+0x42>
 8003bc2:	2316      	movs	r3, #22
 8003bc4:	6003      	str	r3, [r0, #0]
 8003bc6:	2001      	movs	r0, #1
 8003bc8:	e7e7      	b.n	8003b9a <_raise_r+0x12>
 8003bca:	2400      	movs	r4, #0
 8003bcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	4798      	blx	r3
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	e7e0      	b.n	8003b9a <_raise_r+0x12>

08003bd8 <raise>:
 8003bd8:	4b02      	ldr	r3, [pc, #8]	; (8003be4 <raise+0xc>)
 8003bda:	4601      	mov	r1, r0
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	f7ff bfd3 	b.w	8003b88 <_raise_r>
 8003be2:	bf00      	nop
 8003be4:	2000000c 	.word	0x2000000c

08003be8 <_kill_r>:
 8003be8:	b538      	push	{r3, r4, r5, lr}
 8003bea:	4d07      	ldr	r5, [pc, #28]	; (8003c08 <_kill_r+0x20>)
 8003bec:	2300      	movs	r3, #0
 8003bee:	4604      	mov	r4, r0
 8003bf0:	4608      	mov	r0, r1
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	602b      	str	r3, [r5, #0]
 8003bf6:	f7fc ffcb 	bl	8000b90 <_kill>
 8003bfa:	1c43      	adds	r3, r0, #1
 8003bfc:	d102      	bne.n	8003c04 <_kill_r+0x1c>
 8003bfe:	682b      	ldr	r3, [r5, #0]
 8003c00:	b103      	cbz	r3, 8003c04 <_kill_r+0x1c>
 8003c02:	6023      	str	r3, [r4, #0]
 8003c04:	bd38      	pop	{r3, r4, r5, pc}
 8003c06:	bf00      	nop
 8003c08:	2000025c 	.word	0x2000025c

08003c0c <_getpid_r>:
 8003c0c:	f7fc bfb8 	b.w	8000b80 <_getpid>

08003c10 <__malloc_lock>:
 8003c10:	4801      	ldr	r0, [pc, #4]	; (8003c18 <__malloc_lock+0x8>)
 8003c12:	f000 b809 	b.w	8003c28 <__retarget_lock_acquire_recursive>
 8003c16:	bf00      	nop
 8003c18:	20000264 	.word	0x20000264

08003c1c <__malloc_unlock>:
 8003c1c:	4801      	ldr	r0, [pc, #4]	; (8003c24 <__malloc_unlock+0x8>)
 8003c1e:	f000 b804 	b.w	8003c2a <__retarget_lock_release_recursive>
 8003c22:	bf00      	nop
 8003c24:	20000264 	.word	0x20000264

08003c28 <__retarget_lock_acquire_recursive>:
 8003c28:	4770      	bx	lr

08003c2a <__retarget_lock_release_recursive>:
 8003c2a:	4770      	bx	lr

08003c2c <_init>:
 8003c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2e:	bf00      	nop
 8003c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c32:	bc08      	pop	{r3}
 8003c34:	469e      	mov	lr, r3
 8003c36:	4770      	bx	lr

08003c38 <_fini>:
 8003c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3a:	bf00      	nop
 8003c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3e:	bc08      	pop	{r3}
 8003c40:	469e      	mov	lr, r3
 8003c42:	4770      	bx	lr
